webpackJsonp([2],{321:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var n=a(6),l=r(n),s=a(16),o=a(11);a(27),a(28);var u=a(14),c=a(322),i=r(c),p=a(29),d=r(p),f=a(323),g=r(f),m=a(30),h=(0,m.configureStore)({auth:d.default,myBlogList:g.default}),y=(0,u.layout)({comp:i.default,forAuth:!0});(0,s.render)(l.default.createElement(o.Provider,{store:h},l.default.createElement(y,null)),document.getElementById("root"))},322:function(e,t,a){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e},o=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),u=a(6),c=function(e){return e&&e.__esModule?e:{default:e}}(u),i=a(11),p=a(39),d=a(86),f=a(14),g=function(e){function t(e){r(this,t);var a=n(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={start:a.props.myBlogList.start,blogs:a.props.myBlogList.blogs},a}return l(t,e),o(t,[{key:"componentWillMount",value:function(){this.props.dispatch((0,p.graphql)({type:"MY_BLOG_LIST",start:this.props.myBlogList.start,perpage:this.props.myBlogList.perpage}))}},{key:"changePage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.props.dispatch((0,p.graphql)({type:"MY_BLOG_LIST",start:e,perpage:this.props.myBlogList.perpage}))}},{key:"publicBlog",value:function(e){this.props.dispatch((0,p.graphql)({type:"MY_BLOG_PUBLIC",id:e.id,public:e.public}))}},{key:"getBlogItems",value:function(){var e=this,t=(0,d.chunk)(this.props.myBlogList.blogs,3);return(0,d.map)(t,function(t){var a=(0,d.map)(t,function(t){function a(a){return a.preventDefault(),e.publicBlog({id:t.id,public:!t.public})}var r=null;return r=t.public?c.default.createElement("btn",{className:"btn btn-default",onClick:a,"data-id":t.id},c.default.createElement("span",{className:"glyphicon glyphicon-remove"}),"  hide"):c.default.createElement("btn",{className:"btn btn-default",onClick:a,"data-id":t.id},c.default.createElement("span",{className:"glyphicon glyphicon-ok"}),"  show"),c.default.createElement("div",{className:"col-md-4"},c.default.createElement("div",{className:"panel panel-default"},c.default.createElement("div",{className:"panel-heading"},c.default.createElement("h4",{className:"panel-title"},c.default.createElement("a",{href:"/blog-detail/"+t.id},t.title))),c.default.createElement("div",{className:"panel-body"},c.default.createElement("div",{dangerouslySetInnerHTML:{__html:t.text}})),c.default.createElement("div",{className:"panel-footer"},c.default.createElement("p",null,c.default.createElement("span",{className:"glyphicon glyphicon-user"})," ",t.userName),c.default.createElement("p",null,c.default.createElement("span",{className:"glyphicon glyphicon-calendar"})," ",t.date),c.default.createElement("p",null,c.default.createElement("a",{href:"/blog-edit/"+t.id,className:"btn btn-default"},c.default.createElement("span",{className:"glyphicon glyphicon-pencil"}),"  edit")," ",r))))});return c.default.createElement("div",{className:"row"},a)})}},{key:"render",value:function(){var e=null;"error"===this.props.myBlogList.status?e={className:"danger",text:this.props.myBlogList.error}:"send"===this.props.status&&(e={className:"info",text:"Loading, please wait"});var t={start:this.props.myBlogList.start,perpage:this.props.myBlogList.perpage,count:this.props.myBlogList.count,items:this.getBlogItems(),changePage:this.changePage.bind(this)};return c.default.createElement("div",null,c.default.createElement(f.AlertMessage,{opts:e}),c.default.createElement(f.PaginatorLayout,{param:t}))}}]),t}(c.default.Component),m=function(e){return s({},e)};g=(0,i.connect)(m)(g),t.default=g},323:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e},n=a(86),l={userId:window.localParams.userId?parseInt(window.localParams.userId):null,start:window.localParams.start?parseInt(window.localParams.start):0,perpage:window.localParams.perpage?parseInt(window.localParams.perpage):9,blogs:[],count:0,status:null},s=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:l,t=arguments[1],a=r({},e);switch(t.type){case"MY_BLOG_LIST_SEND":return a.start=t.start,a.status="send",a;case"MY_BLOG_LIST_SUCCESS":return a.status="success",a.blogs=t.data.getMyBlogList.blogs,a.count=t.data.getMyBlogList.count,a;case"MY_BLOG_LIST_ERROR":return a.status="error",a.error=t.error,a;case"MY_BLOG_PUBLIC_SEND":return a.start=t.start,a.status="send",a;case"MY_BLOG_PUBLIC_SUCCESS":return a.status="success",(0,n.forEach)(a.blogs,function(e){e.id==t.data.publicMyBlog.id&&(e.public=t.data.publicMyBlog.public)}),a;case"MY_BLOG_PUBLIC_ERROR":return a.status="error",a.error=t.error,a;default:return e}};t.default=s}},[321]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,