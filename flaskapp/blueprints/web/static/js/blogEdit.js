webpackJsonp([4],{328:function(t,e,a){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var i=a(4),l=r(i),o=a(15),n=a(9);a(25),a(145),a(26);var s=a(11),u=a(330),c=r(u),d=a(27),f=r(d),p=a(413),g=r(p),h=a(28),b=(0,h.configureStore)({auth:f.default,blogEdit:g.default}),m=(0,s.layout)({comp:c.default,forAuth:!0});(0,o.render)(l.default.createElement(n.Provider,{store:b},l.default.createElement(m,null)),document.getElementById("root"))},330:function(t,e,a){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var n=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r])}return t},s=function(){function t(t,e){for(var a=0;a<e.length;a++){var r=e[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,a,r){return a&&t(e.prototype,a),r&&t(e,r),e}}(),u=a(4),c=r(u),d=a(9),f=a(31),p=a(11),g=a(40),h=a(171),b=r(h),m=a(172),E=r(m),y=a(173),v=function(t){function e(t){i(this,e);var a=l(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return a.state=n({},t.blogEdit),a.state.editorState=g.EditorState.createEmpty(),a}return o(e,t),s(e,[{key:"componentWillMount",value:function(){-1!==this.state.id&&this.props.dispatch((0,f.graphql)({type:"BLOG_GET",id:this.state.id}))}},{key:"componentWillReceiveProps",value:function(t){if("success_get"==t.blogEdit.status){var e=(0,E.default)(t.blogEdit.text),a=g.ContentState.createFromBlockArray(e.contentBlocks,e.entityMap);this.setState({title:t.blogEdit.title,text:t.blogEdit.text,public:t.blogEdit.public,date:t.blogEdit.date,editorState:g.EditorState.createWithContent(a)})}}},{key:"fieldChange",value:function(t){var e={},a="public"==t.target.id?t.target.checked:t.target.value;e[t.target.id]=a,this.setState(e)}},{key:"onEditorStateChange",value:function(t){this.setState({editorState:t})}},{key:"formSubmit",value:function(t){t.preventDefault();var e=(0,b.default)((0,g.convertToRaw)(this.state.editorState.getCurrentContent()));if(e&&e.length>512)return this.props.dispatch({type:"BLOG_EDIT_ERROR",error:"Text is too long!"});this.props.dispatch((0,f.graphql)({type:"BLOG_EDIT",id:this.state.id,title:this.state.title,text:(0,b.default)((0,g.convertToRaw)(this.state.editorState.getCurrentContent())),public:this.state.public}))}},{key:"render",value:function(){var t=this,e=null;return"error"===this.props.blogEdit.status?e={className:"danger",text:this.props.blogEdit.error||"Error, wrong blog data"}:"send"===this.props.blogEdit.status?e={className:"info",text:"Loading, please wait"}:"success_edit"===this.props.blogEdit.status&&(e={className:"success",text:"Blog saved successfully"},setTimeout(function(){window.location="/blog-edit/"+t.props.blogEdit.id},1e3)),c.default.createElement("div",null,c.default.createElement("form",{onSubmit:this.formSubmit.bind(this)},c.default.createElement("div",{className:"form-group"},c.default.createElement("label",{htmlFor:"title"},"Title"),c.default.createElement("input",{required:!0,type:"text",className:"form-control",id:"title",placeholder:"Title",onChange:this.fieldChange.bind(this),value:this.state.title})),c.default.createElement("div",{className:"form-group"},c.default.createElement("label",{htmlFor:"text"},"Text"),c.default.createElement(y.Editor,{editorState:this.state.editorState,editorClassName:"form-control",onEditorStateChange:this.onEditorStateChange.bind(this),toolbar:{options:["inline","list","fontSize","fontFamily","textAlign","link","history","colorPicker"]}})),c.default.createElement("div",{className:"checkbox"},c.default.createElement("label",null,c.default.createElement("input",{type:"checkbox",id:"public",onChange:this.fieldChange.bind(this),checked:!!this.state.public})," Public")),c.default.createElement(p.AlertMessage,{opts:e}),c.default.createElement("hr",null),c.default.createElement("div",null,c.default.createElement("button",{type:"submit",className:"btn btn-primary"},c.default.createElement("span",{className:"glyphicon glyphicon-floppy-disk"}),"Â  Save")),c.default.createElement("br",null)))}}]),e}(c.default.Component),_=function(t){return n({},t)};v=(0,d.connect)(_)(v),e.default=v},413:function(t,e,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r])}return t},i=window.localParams.blogId||"-1",l={id:parseInt(i),user_id:0,user_name:"",title:"",text:"",date:"",public:!1,status:null},o=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:l,e=arguments[1],a=null;switch(e.type){case"BLOG_GET_SEND":return r({status:"send"},t);case"BLOG_GET_SUCCESS":return a=r({},t),a.status="success_get",a.id=e.data.getBlog.id,a.user_id=e.data.getBlog.userId,a.user_name=e.data.getBlog.userName,a.text=e.data.getBlog.text,a.title=e.data.getBlog.title,a.date=e.data.getBlog.date,a.public=!!e.data.getBlog.public,a;case"BLOG_GET_ERROR":return r({status:"error",error:e.error},t);case"BLOG_EDIT_SEND":return a=r({},t),a.status="send",a.id=e.id,a.text=e.text,a.title=e.title,a.public=e.public,a;case"BLOG_EDIT_SUCCESS":return a=r({},t),a.status="success_edit",a.id=e.data.editBlog.id,a.text=e.data.editBlog.text,a.title=e.data.editBlog.title,a.public=e.data.editBlog.public,a;case"BLOG_EDIT_ERROR":return a=r({},t),a.status="error",a.error=e.error,a;default:return t}};e.default=o}},[328]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,