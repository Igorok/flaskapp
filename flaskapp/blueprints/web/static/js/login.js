webpackJsonp([10],{314:function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}var r=a(2),o=n(r),l=a(11),s=a(7);a(19),a(20);var u=a(9),c=a(315),i=n(c),p=a(21),f=n(p),d=a(22),m=(0,d.configureStore)({auth:f.default}),h=(0,u.layout)({comp:i.default});(0,l.render)(o.default.createElement(s.Provider,{store:m},o.default.createElement(h,null)),document.getElementById("root"))},315:function(e,t,a){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},s=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),u=a(2),c=function(e){return e&&e.__esModule?e:{default:e}}(u),i=a(7),p=a(25),f=a(9),d=function(e){function t(e){n(this,t);var a=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={captcha:null},a}return o(t,e),s(t,[{key:"componentDidMount",value:function(){if(this.props.isAuthenticated)return window.location="/"}},{key:"formSubmit",value:function(e){if(e.preventDefault(),!this.state.captcha)return this.props.dispatch({type:"AUTH_ERROR",error:"Captcha is not valid!"});this.props.dispatch((0,p.graphql)({type:"AUTH",login:e.target.elements.loginInput.value,password:e.target.elements.passwordInput.value}))}},{key:"componentDidUpdate",value:function(){"success"===this.props.status&&setTimeout(function(){return window.location="/"},1e3)}},{key:"checkCaptcha",value:function(e){this.setState({captcha:e})}},{key:"render",value:function(){var e=null,t=null;return"error"===this.props.status?t={className:"danger",text:this.props.error||"Error, wrong login or password"}:"send"===this.props.status?(e="disabled",t={className:"info",text:"Loading, please wait"}):"success"===this.props.status&&(t={className:"success",text:"Loginned successfully"}),c.default.createElement("div",{className:"row"},c.default.createElement("div",{className:"col-lg-offset-3 col-lg-6"},c.default.createElement("div",{className:"panel panel-default"},c.default.createElement("div",{className:"panel-heading"},c.default.createElement("h3",{className:"panel-title"},"Authentication")),c.default.createElement("div",{className:"panel-body"},c.default.createElement("form",{onSubmit:this.formSubmit.bind(this)},c.default.createElement("div",{className:"form-group"},c.default.createElement("label",{htmlFor:"loginInput"},"Login"),c.default.createElement("input",{type:"text",className:"form-control",id:"loginInput",placeholder:"Login",defaultValue:this.props.login,disabled:e})),c.default.createElement("div",{className:"form-group"},c.default.createElement("label",{htmlFor:"passwordInput"},"Password"),c.default.createElement("input",{type:"password",className:"form-control",id:"passwordInput",placeholder:"Password",defaultValue:this.props.password,disabled:e})),c.default.createElement(f.MathCaptcha,{cb:this.checkCaptcha.bind(this)}),c.default.createElement(f.AlertMessage,{opts:t}),c.default.createElement("button",{type:"submit",className:"btn btn-default btn-block",disabled:e},"Login")),c.default.createElement("br",null),c.default.createElement("p",{className:"text-center"},c.default.createElement("a",{href:"/registration"},"Registration"))))))}}]),t}(c.default.Component),m=function(e){return l({},e.auth)};d=(0,i.connect)(m)(d),t.default=d}},[314]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,