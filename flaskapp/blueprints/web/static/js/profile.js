webpackJsonp([1],{311:function(e,t,a){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}var n=a(6),r=l(n),s=a(17),i=a(19);a(42),a(43);var o=a(23),u=a(312),c=l(u),d=a(44),f=l(d),p=a(313),m=l(p),h=a(45),E=(0,h.configureStore)({auth:f.default,profile:m.default}),g=(0,o.layout)({comp:c.default,forAuth:!0});(0,s.render)(r.default.createElement(i.Provider,{store:E},r.default.createElement(g,null)),document.getElementById("root"))},312:function(e,t,a){"use strict";function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var l in a)Object.prototype.hasOwnProperty.call(a,l)&&(e[l]=a[l])}return e},i=function(){function e(e,t){for(var a=0;a<t.length;a++){var l=t[a];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,a,l){return a&&e(t.prototype,a),l&&e(t,l),t}}(),o=a(6),u=function(e){return e&&e.__esModule?e:{default:e}}(o),c=a(19),d=a(60),f=a(23),p=function(e){function t(){return l(this,t),n(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,e),i(t,[{key:"render",value:function(){return u.default.createElement("div",{className:"row"},u.default.createElement("div",{className:"col-sm-3"},u.default.createElement("div",{className:"panel panel-default"},u.default.createElement("div",{className:"panel-heading"},u.default.createElement("span",{className:"glyphicon glyphicon-bookmark"}),"  ",u.default.createElement("a",{href:"/my-blogs"},"My blogs")),u.default.createElement("div",{className:"panel-body"},this.props.profile.countBlogs))),u.default.createElement("div",{className:"col-sm-3"},u.default.createElement("div",{className:"panel panel-default"},u.default.createElement("div",{className:"panel-heading"},u.default.createElement("span",{className:"glyphicon glyphicon-user"}),"  ",u.default.createElement("a",{href:"#"},"My friends")),u.default.createElement("div",{className:"panel-body"},"Friends : ",this.props.profile.friends,u.default.createElement("br",null),"Requests : ",this.props.profile.friendRequests,u.default.createElement("br",null),"My Requests : ",this.props.profile.selfFriendRequests,u.default.createElement("br",null)))),u.default.createElement("div",{className:"col-sm-3"},u.default.createElement("div",{className:"panel panel-default"},u.default.createElement("div",{className:"panel-heading"},u.default.createElement("span",{className:"glyphicon glyphicon-envelope"}),"  ",u.default.createElement("a",{href:"/chats"},"My chats")),u.default.createElement("div",{className:"panel-body"},this.props.profile.countChats))))}}]),t}(u.default.Component),m=function(e){function t(e){l(this,t);var a=n(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={login:a.props.profile.login,email:a.props.profile.email,edit:!1},a}return r(t,e),i(t,[{key:"formSubmit",value:function(e){e.preventDefault(),this.props.dispatch((0,d.graphql)({type:"PROFILE_EDIT",login:this.state.login,email:this.state.email}))}},{key:"fieldChange",value:function(e){var t={};t[e.target.id]=e.target.value,this.setState(t)}},{key:"setMode",value:function(e){this.setState({edit:!this.state.edit})}},{key:"componentWillReceiveProps",value:function(e){this.setState({login:e.profile.login,email:e.profile.email})}},{key:"render",value:function(){var e="",t="";return this.state.edit?e="hidden":t="hidden",u.default.createElement("div",{className:"panel panel-default"},u.default.createElement("div",{className:"panel-heading"},u.default.createElement("button",{className:"btn btn-default "+t,onClick:this.setMode.bind(this)},u.default.createElement("span",{className:"glyphicon glyphicon-user"}),"   View profile"),u.default.createElement("button",{className:"btn btn-default "+e,onClick:this.setMode.bind(this)},u.default.createElement("span",{className:"glyphicon glyphicon-cog"}),"   Edit profile")),u.default.createElement("div",{className:"panel-body"},u.default.createElement("div",{className:e},u.default.createElement("div",{className:"row"},u.default.createElement("div",{className:"col-sm-2"},u.default.createElement("label",null,"Login")),u.default.createElement("div",{className:"col-sm-10"},this.state.login)),u.default.createElement("div",{className:"row"},u.default.createElement("div",{className:"col-sm-2"},u.default.createElement("label",null,"Email")),u.default.createElement("div",{className:"col-sm-10"},this.state.email))),u.default.createElement("div",{className:t},u.default.createElement("form",{onSubmit:this.formSubmit.bind(this)},u.default.createElement("div",{className:"form-group"},u.default.createElement("label",{htmlFor:"login"},"Password"),u.default.createElement("input",{type:"text",className:"form-control",id:"login",placeholder:"Login",value:this.state.login,onChange:this.fieldChange.bind(this)})),u.default.createElement("div",{className:"form-group"},u.default.createElement("label",{htmlFor:"email"},"Email address"),u.default.createElement("input",{type:"email",className:"form-control",id:"email",placeholder:"Email",value:this.state.email,onChange:this.fieldChange.bind(this)})),u.default.createElement("button",{type:"submit",className:"btn btn-default"},u.default.createElement("span",{className:"glyphicon glyphicon-floppy-disk"}),"  Submit")))))}}]),t}(u.default.Component),h=function(e){function t(){return l(this,t),n(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,e),i(t,[{key:"componentWillMount",value:function(){this.props.dispatch((0,d.graphql)({type:"PROFILE"}))}},{key:"render",value:function(){var e=null;return"error"===this.props.profile.status||"edit_error"===this.props.profile.status?e={className:"danger",text:this.props.profile.error||this.props.profile.error}:"send"===this.props.profile.status?e={className:"info",text:"Loading, please wait"}:"edit_success"===this.props.profile.status&&(e={className:"success",text:"The profile updated successfully"}),u.default.createElement("div",null,u.default.createElement(f.AlertMessage,{opts:e}),u.default.createElement(m,{profile:this.props.profile,dispatch:this.props.dispatch}),u.default.createElement(p,{profile:this.props.profile}))}}]),t}(u.default.Component),E=function(e){return s({},e)};h=(0,c.connect)(E)(h),t.default=h},313:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var l in a)Object.prototype.hasOwnProperty.call(a,l)&&(e[l]=a[l])}return e},n={id:"",login:"",email:"",friends:"",friendRequests:0,selfFriendRequests:0,countChats:0,countBlogs:0,status:null,error:null},r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n,t=arguments[1],a=null;switch(t.type){case"PROFILE_SEND":var r=l({},e);return r.status="send",r;case"PROFILE_SUCCESS":return a=l({},t.data.profile),{_id:a._id,login:a.login,email:a.email,friends:a.friends||0,friendRequests:a.friendRequests||0,selfFriendRequests:a.selfFriendRequests||0,countChats:a.countChats||0,countBlogs:a.countBlogs||0,status:"success",error:null};case"PROFILE_ERROR":var s=l({},e);return s.status="error",s.error=t.error,s;case"PROFILE_EDIT_SEND":return e=l({},e),e.login=t.login,e.email=t.email,e.status="send",e;case"PROFILE_EDIT_SUCCESS":return a=l({},t.data.editProfile),e=l({},e),e.login=a.login,e.email=a.email,e.status="edit_success",e.error=null,e;case"PROFILE_EDIT_ERROR":return e=l({},e),e.status="edit_error",e.error=t.error,e;default:return e}};t.default=r}},[311]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,