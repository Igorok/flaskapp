webpackJsonp([1],{417:function(t,e,a){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var i=a(2),o=r(i),s=a(12),l=a(8);a(24),a(145),a(25);var n=a(9),d=a(418),u=r(d),c=a(26),p=r(c),f=a(419),m=r(f),h=a(27),E=(0,h.configureStore)({auth:p.default,postEdit:m.default}),b=(0,n.layout)({comp:u.default,forAuth:!0});(0,s.render)(o.default.createElement(l.Provider,{store:E},o.default.createElement(b,null)),document.getElementById("root"))},418:function(t,e,a){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r])}return t},n=function(){function t(t,e){for(var a=0;a<e.length;a++){var r=e[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,a,r){return a&&t(e.prototype,a),r&&t(e,r),e}}(),d=a(2),u=r(d),c=a(8),p=a(29),f=a(9),m=a(40),h=a(171),E=r(h),b=a(172),g=r(b),y=a(173),v=function(t){function e(t){i(this,e);var a=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return a.state=l({},t.postEdit),a.state.editorState=m.EditorState.createEmpty(),a}return s(e,t),n(e,[{key:"componentWillMount",value:function(){-1!==this.state.id&&this.props.dispatch((0,p.graphql)({type:"MY_POST_GET",id:this.state.id,blogId:this.state.blogId}))}},{key:"componentWillReceiveProps",value:function(t){if("success_get"==t.postEdit.status){var e=(0,g.default)(t.postEdit.text),a=m.ContentState.createFromBlockArray(e.contentBlocks,e.entityMap);this.setState({userId:t.postEdit.userId,userName:t.postEdit.userName,userEmail:t.postEdit.userEmail,title:t.postEdit.title,description:t.postEdit.description,text:t.postEdit.text,date:t.postEdit.date,public:t.postEdit.public,editorState:m.EditorState.createWithContent(a)})}}},{key:"fieldChange",value:function(t){var e={},a="public"==t.target.id?t.target.checked:t.target.value;e[t.target.id]=a,this.setState(e)}},{key:"onEditorStateChange",value:function(t){this.setState({editorState:t})}},{key:"formSubmit",value:function(t){t.preventDefault();var e=(0,E.default)((0,m.convertToRaw)(this.state.editorState.getCurrentContent()));this.props.dispatch((0,p.graphql)({type:"POST_EDIT",id:this.state.id,blogId:this.state.blogId,title:this.state.title,description:this.state.description,text:e,public:this.state.public}))}},{key:"render",value:function(){var t=this,e=null;return"error"===this.props.postEdit.status?e={className:"danger",text:this.props.postEdit.error||"Error, wrong post data"}:"send"===this.props.postEdit.status?e={className:"info",text:"Loading, please wait"}:"success_edit"===this.props.postEdit.status&&(e={className:"success",text:"Post saved successfully"},setTimeout(function(){window.location="/post-edit/"+t.props.postEdit.blogId+"/"+t.props.postEdit.id},1e3)),u.default.createElement("div",null,u.default.createElement("ol",{className:"breadcrumb"},u.default.createElement("li",null,u.default.createElement("a",{href:"/my-blog-list"},"My blogs")),u.default.createElement("li",null,u.default.createElement("a",{href:"/my-blog-detail/"+this.props.postEdit.blogId},"Blog")),u.default.createElement("li",{className:"active"},this.state.title||"Edit post")),u.default.createElement("form",{onSubmit:this.formSubmit.bind(this)},u.default.createElement("div",{className:"form-group"},u.default.createElement("label",{htmlFor:"title"},"Title"),u.default.createElement("input",{required:!0,type:"text",className:"form-control",id:"title",placeholder:"Title",onChange:this.fieldChange.bind(this),value:this.state.title})),u.default.createElement("div",{className:"form-group"},u.default.createElement("label",{htmlFor:"description"},"Description"),u.default.createElement("input",{required:!0,type:"text",className:"form-control",id:"description",placeholder:"Description",onChange:this.fieldChange.bind(this),value:this.state.description})),u.default.createElement("div",{className:"form-group"},u.default.createElement("label",{htmlFor:"text"},"Text"),u.default.createElement(y.Editor,{editorState:this.state.editorState,editorClassName:"form-control",onEditorStateChange:this.onEditorStateChange.bind(this),toolbar:{options:["inline","list","fontSize","fontFamily","textAlign","link","history","colorPicker"]}})),u.default.createElement("div",{className:"checkbox"},u.default.createElement("label",null,u.default.createElement("input",{type:"checkbox",id:"public",onChange:this.fieldChange.bind(this),checked:!!this.state.public})," Public")),u.default.createElement(f.AlertMessage,{opts:e}),u.default.createElement("hr",null),u.default.createElement("div",null,u.default.createElement("button",{type:"submit",className:"btn btn-primary"},u.default.createElement("span",{className:"glyphicon glyphicon-floppy-disk"}),"Â  Save")),u.default.createElement("br",null)))}}]),e}(u.default.Component),P=function(t){return l({},t)};v=(0,c.connect)(P)(v),e.default=v},419:function(t,e,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r])}return t},i=window.localParams.blogId,o=window.localParams.postId||"-1",s={id:parseInt(o),blogId:parseInt(i),userId:0,userName:"",userEmail:"",title:"",description:"",text:"",date:"",public:!1,status:null},l=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s,e=arguments[1],a=null;switch(e.type){case"MY_POST_GET_SEND":return r({status:"send"},t);case"MY_POST_GET_SUCCESS":return a=r({},t),a.status="success_get",a.id=e.data.getMyPost.id,a.blogId=e.data.getMyPost.blogId,a.userId=e.data.getMyPost.userId,a.userName=e.data.getMyPost.userName,a.userEmail=e.data.getMyPost.userEmail,a.title=e.data.getMyPost.title,a.description=e.data.getMyPost.description,a.text=e.data.getMyPost.text,a.date=e.data.getMyPost.date,a.public=!!e.data.getMyPost.public,a;case"MY_POST_GET_ERROR":return r({status:"error",error:e.error},t);case"POST_EDIT_SEND":return a=r({},t),a.status="send",a.id=e.id,a.blogId=e.blogId,a.title=e.title,a.description=e.description,a.text=e.text,a.public=e.public,a;case"POST_EDIT_SUCCESS":return a=r({},t),a.status="success_edit",a.id=e.data.editPost.id,a.blogId=e.data.editPost.blogId,a.title=e.data.editPost.title,a.description=e.data.editPost.description,a.text=e.data.editPost.text,a.date=e.data.editPost.date,a.public=e.data.editPost.public,a;case"POST_EDIT_ERROR":return a=r({},t),a.status="error",a.error=e.error,a;default:return t}};e.default=l}},[417]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,