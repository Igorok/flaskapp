webpackJsonp([5],{414:function(t,e,r){"use strict";function a(t){return t&&t.__esModule?t:{default:t}}var u=r(5),l=a(u),d=r(15),o=r(9);r(25),r(145),r(26);var s=r(12),i=r(146),n=a(i),c=r(27),g=a(c),_=r(415),f=a(_),p=r(28),B=(0,p.configureStore)({auth:g.default,postEdit:f.default}),b=(0,s.layout)({comp:n.default,forAuth:!0});(0,d.render)(l.default.createElement(o.Provider,{store:B},l.default.createElement(b,null)),document.getElementById("root"))},415:function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a])}return t},u=window.localParams.blogId,l=window.localParams.postId||"-1",d=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}({id:parseInt(u),user_id:0,user_name:"",title:"",text:"",date:"",public:!1,status:null},"id",parseInt(l)),o=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:d,e=arguments[1],r=null;switch(e.type){case"BLOG_GET_SEND":return a({status:"send"},t);case"BLOG_GET_SUCCESS":return r=a({},t),r.status="success_get",r.id=e.data.getBlog.id,r.user_id=e.data.getBlog.userId,r.user_name=e.data.getBlog.userName,r.text=e.data.getBlog.text,r.title=e.data.getBlog.title,r.date=e.data.getBlog.date,r.public=!!e.data.getBlog.public,r;case"BLOG_GET_ERROR":return a({status:"error",error:e.error},t);case"BLOG_EDIT_SEND":return r=a({},t),r.status="send",r.id=e.id,r.text=e.text,r.title=e.title,r.public=e.public,r;case"BLOG_EDIT_SUCCESS":return r=a({},t),r.status="success_edit",r.id=e.data.editBlog.id,r.text=e.data.editBlog.text,r.title=e.data.editBlog.title,r.public=e.data.editBlog.public,r;case"BLOG_EDIT_ERROR":return r=a({},t),r.status="error",r.error=e.error,r;default:return t}};e.default=o}},[414]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,