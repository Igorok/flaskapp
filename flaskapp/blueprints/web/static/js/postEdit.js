webpackJsonp([5],{414:function(t,e,a){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=a(5),i=r(o),s=a(15),n=a(9);a(25),a(145),a(26);var l=a(12),d=a(416),u=r(d),c=a(27),p=r(c),f=a(415),m=r(f),h=a(28),E=(0,h.configureStore)({auth:p.default,postEdit:m.default}),b=(0,l.layout)({comp:u.default,forAuth:!0});(0,s.render)(i.default.createElement(n.Provider,{store:E},i.default.createElement(b,null)),document.getElementById("root"))},415:function(t,e,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r])}return t},o=window.localParams.blogId,i=window.localParams.postId||"-1",s={id:parseInt(i),blogId:parseInt(o),userId:0,userName:"",userEmail:"",title:"",description:"",text:"",date:"",public:!1,status:null},n=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s,e=arguments[1],a=null;switch(e.type){case"POST_GET_SEND":return r({status:"send"},t);case"POST_GET_SUCCESS":return a=r({},t),a.status="success_get",a.id=e.data.getPost.id,a.blogId=e.data.getPost.blogId,a.userId=e.data.getPost.userId,a.userName=e.data.getPost.userName,a.userEmail=e.data.getPost.userEmail,a.title=e.data.getPost.title,a.description=e.data.getPost.description,a.text=e.data.getPost.text,a.date=e.data.getPost.date,a.public=!!e.data.getPost.public,a;case"POST_GET_ERROR":return r({status:"error",error:e.error},t);case"POST_EDIT_SEND":return a=r({},t),a.status="send",a.id=e.id,a.blogId=e.blogId,a.title=e.title,a.description=e.description,a.text=e.text,a.public=e.public,a;case"POST_EDIT_SUCCESS":return a=r({},t),a.status="success_edit",a.id=e.data.editPost.id,a.blogId=e.data.editPost.blogId,a.title=e.data.editPost.title,a.description=e.data.editPost.description,a.text=e.data.editPost.text,a.date=e.data.editPost.date,a.public=e.data.editPost.public,a;case"POST_EDIT_ERROR":return a=r({},t),a.status="error",a.error=e.error,a;default:return t}};e.default=n},416:function(t,e,a){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var n=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r])}return t},l=function(){function t(t,e){for(var a=0;a<e.length;a++){var r=e[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,a,r){return a&&t(e.prototype,a),r&&t(e,r),e}}(),d=a(5),u=r(d),c=a(9),p=a(39),f=a(12),m=a(47),h=a(410),E=r(h),b=a(411),g=r(b),y=a(412),v=function(t){function e(t){o(this,e);var a=i(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return a.state=n({},t.postEdit),a.state.editorState=m.EditorState.createEmpty(),a}return s(e,t),l(e,[{key:"componentWillMount",value:function(){-1!==this.state.id&&this.props.dispatch((0,p.graphql)({type:"POST_GET",id:this.state.id}))}},{key:"componentWillReceiveProps",value:function(t){if("success_get"==t.postEdit.status){var e=(0,g.default)(t.postEdit.text),a=m.ContentState.createFromBlockArray(e.contentBlocks,e.entityMap);this.setState({userId:t.postEdit.userId,userName:t.postEdit.userName,userEmail:t.postEdit.userEmail,title:t.postEdit.title,description:t.postEdit.description,text:t.postEdit.text,date:t.postEdit.date,public:t.postEdit.public,editorState:m.EditorState.createWithContent(a)})}}},{key:"fieldChange",value:function(t){var e={},a="public"==t.target.id?t.target.checked:t.target.value;e[t.target.id]=a,this.setState(e)}},{key:"onEditorStateChange",value:function(t){this.setState({editorState:t})}},{key:"formSubmit",value:function(t){t.preventDefault();(0,E.default)((0,m.convertToRaw)(this.state.editorState.getCurrentContent()));return console.log("this.state",this.state),!1}},{key:"render",value:function(){var t=this,e=null;return"error"===this.props.postEdit.status?e={className:"danger",text:this.props.postEdit.error||"Error, wrong post data"}:"send"===this.props.postEdit.status?e={className:"info",text:"Loading, please wait"}:"success_edit"===this.props.postEdit.status&&(e={className:"success",text:"Post saved successfully"},setTimeout(function(){window.location="/post-edit/"+t.props.postEdit.blogId+"/"+t.props.postEdit.id},1e3)),u.default.createElement("div",null,u.default.createElement("form",{onSubmit:this.formSubmit.bind(this)},u.default.createElement("div",{className:"form-group"},u.default.createElement("label",{htmlFor:"title"},"Title"),u.default.createElement("input",{required:!0,type:"text",className:"form-control",id:"title",placeholder:"Title",onChange:this.fieldChange.bind(this),value:this.state.title})),u.default.createElement("div",{className:"form-group"},u.default.createElement("label",{htmlFor:"description"},"Description"),u.default.createElement("input",{required:!0,type:"text",className:"form-control",id:"description",placeholder:"Description",onChange:this.fieldChange.bind(this),value:this.state.description})),u.default.createElement("div",{className:"form-group"},u.default.createElement("label",{htmlFor:"text"},"Text"),u.default.createElement(y.Editor,{editorState:this.state.editorState,editorClassName:"form-control",onEditorStateChange:this.onEditorStateChange.bind(this),toolbar:{options:["inline","list","fontSize","fontFamily","textAlign","link","history","colorPicker"]}})),u.default.createElement("div",{className:"checkbox"},u.default.createElement("label",null,u.default.createElement("input",{type:"checkbox",id:"public",onChange:this.fieldChange.bind(this),checked:!!this.state.public})," Public")),u.default.createElement(f.AlertMessage,{opts:e}),u.default.createElement("hr",null),u.default.createElement("div",null,u.default.createElement("button",{type:"submit",className:"btn btn-primary"},u.default.createElement("span",{className:"glyphicon glyphicon-floppy-disk"}),"Â  Save")),u.default.createElement("br",null)))}}]),e}(u.default.Component),P=function(t){return n({},t)};v=(0,c.connect)(P)(v),e.default=v}},[414]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcG9zdEVkaXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljX3NyYy9wb3N0RWRpdC5qcyIsIndlYnBhY2s6Ly8vLi9zdGF0aWNfc3JjL3Bvc3QvRWRpdFJlZC5qcyIsIndlYnBhY2s6Ly8vLi9zdGF0aWNfc3JjL3Bvc3QvRWRpdENvbXAuanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wIiwiNDE0IiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX3JlYWN0RG9tIiwiX3JlYWN0UmVkdXgiLCJfY29tcG9uZW50IiwiX0VkaXRDb21wIiwiX0VkaXRDb21wMiIsIl9Mb2dpblJlZCIsIl9Mb2dpblJlZDIiLCJfRWRpdFJlZCIsIl9FZGl0UmVkMiIsIl9jb25maWd1cmVTdG9yZSIsInN0b3JlIiwiY29uZmlndXJlU3RvcmUiLCJhdXRoIiwicG9zdEVkaXQiLCJDb21wIiwibGF5b3V0IiwiY29tcCIsIkVkaXRDb21wIiwiZm9yQXV0aCIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCI0MTUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYmxvZ0lkIiwid2luZG93IiwibG9jYWxQYXJhbXMiLCJwb3N0SWQiLCJpbml0U3RhdGUiLCJpZCIsInBhcnNlSW50IiwidXNlcklkIiwidXNlck5hbWUiLCJ1c2VyRW1haWwiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwidGV4dCIsImRhdGUiLCJwdWJsaWMiLCJzdGF0dXMiLCJzdGF0ZSIsInVuZGVmaW5lZCIsImFjdGlvbiIsImRhdGEiLCJ0eXBlIiwiZ2V0UG9zdCIsImVycm9yIiwiZWRpdFBvc3QiLCI0MTYiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9hY3Rpb24iLCJfZHJhZnRKcyIsIl9kcmFmdGpzVG9IdG1sIiwiX2RyYWZ0anNUb0h0bWwyIiwiX2h0bWxUb0RyYWZ0anMiLCJfaHRtbFRvRHJhZnRqczIiLCJfcmVhY3REcmFmdFd5c2l3eWciLCJfUmVhY3QkQ29tcG9uZW50IiwidGhpcyIsIl90aGlzIiwiZ2V0UHJvdG90eXBlT2YiLCJlZGl0b3JTdGF0ZSIsIkVkaXRvclN0YXRlIiwiY3JlYXRlRW1wdHkiLCJkaXNwYXRjaCIsImdyYXBocWwiLCJuZXh0UHJvcHMiLCJibG9ja3NGcm9tSFRNTCIsImNvbnRlbnQiLCJDb250ZW50U3RhdGUiLCJjcmVhdGVGcm9tQmxvY2tBcnJheSIsImNvbnRlbnRCbG9ja3MiLCJlbnRpdHlNYXAiLCJzZXRTdGF0ZSIsImNyZWF0ZVdpdGhDb250ZW50IiwiZSIsInN0YXRlT2JqIiwidmFsIiwiY2hlY2tlZCIsInByZXZlbnREZWZhdWx0IiwiY29udmVydFRvUmF3IiwiZ2V0Q3VycmVudENvbnRlbnQiLCJjb25zb2xlIiwibG9nIiwiX3RoaXMyIiwiYWxlcnRPcHRzIiwiY2xhc3NOYW1lIiwic2V0VGltZW91dCIsImxvY2F0aW9uIiwib25TdWJtaXQiLCJmb3JtU3VibWl0IiwiYmluZCIsImh0bWxGb3IiLCJyZXF1aXJlZCIsInBsYWNlaG9sZGVyIiwib25DaGFuZ2UiLCJmaWVsZENoYW5nZSIsIkVkaXRvciIsImVkaXRvckNsYXNzTmFtZSIsIm9uRWRpdG9yU3RhdGVDaGFuZ2UiLCJ0b29sYmFyIiwib3B0aW9ucyIsIkFsZXJ0TWVzc2FnZSIsIm9wdHMiLCJSZWFjdCIsIkNvbXBvbmVudCIsIm1hcFN0YXRlVG9Qcm9wcyIsImNvbm5lY3QiXSwibWFwcGluZ3MiOiJBQUFBQSxjQUFjLElBRVJDLElBQ0EsU0FBVUMsRUFBUUMsRUFBU0MsR0FFakMsWUFpQ0EsU0FBU0MsR0FBdUJDLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUUUsUUFBU0YsR0N0Q3ZGLEdBQUFHLEdBQUFMLEVBQUEsR0RVSU0sRUFBVUwsRUFBdUJJLEdDVHJDRSxFQUFBUCxFQUFBLElBQ0FRLEVBQUFSLEVBQUEsRUFFQUEsR0FBQSxJQUNBQSxFQUFBLEtBQ0FBLEVBQUEsR0FFQSxJQUFBUyxHQUFBVCxFQUFBLElBQ0FVLEVBQUFWLEVBQUEsS0RpQklXLEVBQWFWLEVBQXVCUyxHQ2Z4Q0UsRUFBQVosRUFBQSxJRG1CSWEsRUFBYVosRUFBdUJXLEdDbEJ4Q0UsRUFBQWQsRUFBQSxLRHNCSWUsRUFBWWQsRUFBdUJhLEdDcEJ2Q0UsRUFBQWhCLEVBQUEsSUFHSWlCLEdBQVEsRUFBQUQsRUFBQUUsaUJBQ1hDLEtBQU1BLFVBQ05DLFNBQVVBLFlBR1BDLEdBQU8sRUFBQVosRUFBQWEsU0FBUUMsS0FBTUMsVUFBVUMsU0FBUyxLQUM1QyxFQUFBbEIsRUFBQW1CLFFBQ0NwQixFQUFBRixRQUFBdUIsY0FBQ25CLEVBQUFvQixVQUFTWCxNQUFPQSxHQUNoQlgsRUFBQUYsUUFBQXVCLGNBQUNOLEVBQUQsT0FFRFEsU0FBU0MsZUFBZSxVRDJCbkJDLElBQ0EsU0FBVWpDLEVBQVFDLEVBQVNDLEdBRWpDLFlBR0FnQyxRQUFPQyxlQUFlbEMsRUFBUyxj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QWEsT0FBUSxVQUFXLG1CQUtsRzNJLEVBQUFGLFFBQUF1QixjQUFBLE9BQUt1RyxVQUFVLFlBQ1g1SCxFQUFBRixRQUFBdUIsY0FBQSxhQUNJckIsRUFBQUYsUUFBQXVCLGNBQUEsU0FDSXVDLEtBQUssV0FDTGYsR0FBRyxTQUNId0YsU0FBWXJDLEtBQUtzQyxZQUFqQkwsS0FBWWpDLE1BQ1pvQixVQUFjcEIsS0FBS3hDLE1BQU1GLFNBTGpDLFlBVUp0RCxFQUFBRixRQUFBdUIsY0FBQ2xCLEVBQUF5SSxjQUFhQyxLQUFNbEIsSUFFcEIzSCxFQUFBRixRQUFBdUIsY0FBQSxXQUNBckIsRUFBQUYsUUFBQXVCLGNBQUEsV0FDSXJCLEVBQUFGLFFBQUF1QixjQUFBLFVBQVF1QyxLQUFLLFNBQVNnRSxVQUFVLG1CQUM1QjVILEVBQUFGLFFBQUF1QixjQUFBLFFBQU11RyxVQUFVLG9DQURwQixXQUtKNUgsRUFBQUYsUUFBQXVCLGNBQUEsaUJIK09MSCxHR2haWTRILFVBQU1DLFdBd0x2QkMsRUFBa0IsU0FBQ3hGLEdBQ3JCLE1BQUEzQixNQUFXMkIsR0FFZnRDLElBQVcsRUFBQWhCLEVBQUErSSxTQUFRRCxHQUFpQjlILEdINE5wQ3pCLEVBQVFLLFFHM05Pb0IsS0hxWVoiLCJmaWxlIjoicG9zdEVkaXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3ZWJwYWNrSnNvbnAoWzVdLHtcblxuLyoqKi8gNDE0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxudmFyIF9yZWFjdFJlZHV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMTQ1KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cbnZhciBfY29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cbnZhciBfRWRpdENvbXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxNik7XG5cbnZhciBfRWRpdENvbXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRWRpdENvbXApO1xuXG52YXIgX0xvZ2luUmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cbnZhciBfTG9naW5SZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9naW5SZWQpO1xuXG52YXIgX0VkaXRSZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxNSk7XG5cbnZhciBfRWRpdFJlZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FZGl0UmVkKTtcblxudmFyIF9jb25maWd1cmVTdG9yZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgc3RvcmUgPSAoMCwgX2NvbmZpZ3VyZVN0b3JlLmNvbmZpZ3VyZVN0b3JlKSh7XG5cdGF1dGg6IF9Mb2dpblJlZDIuZGVmYXVsdCxcblx0cG9zdEVkaXQ6IF9FZGl0UmVkMi5kZWZhdWx0XG59KTtcblxudmFyIENvbXAgPSAoMCwgX2NvbXBvbmVudC5sYXlvdXQpKHsgY29tcDogX0VkaXRDb21wMi5kZWZhdWx0LCBmb3JBdXRoOiB0cnVlIH0pO1xuKDAsIF9yZWFjdERvbS5yZW5kZXIpKF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHRfcmVhY3RSZWR1eC5Qcm92aWRlcixcblx0eyBzdG9yZTogc3RvcmUgfSxcblx0X3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcCwgbnVsbClcbiksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNDE1OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbi8qXG5cblwiaWRcIiBTRVJJQUwgUFJJTUFSWSBLRVksXG5cInVzZXJfaWRcIiBTRVJJQUwgTk9UIE5VTEwsXG5cImJsb2dfaWRcIiBTRVJJQUwgTk9UIE5VTEwsXG5cInRpdGxlXCIgdmFyY2hhcigxMjgpIERFRkFVTFQgTlVMTCxcblwiZGVzY3JpcHRpb25cIiB2YXJjaGFyKDI1NikgREVGQVVMVCBOVUxMLFxuXCJ0ZXh0XCIgdGV4dCxcblwiZGF0ZVwiIHRpbWVzdGFtcCBERUZBVUxUIE5VTExcblxuKi9cblxudmFyIGJsb2dJZCA9IHdpbmRvdy5sb2NhbFBhcmFtcy5ibG9nSWQ7XG52YXIgcG9zdElkID0gd2luZG93LmxvY2FsUGFyYW1zLnBvc3RJZCB8fCAnLTEnO1xudmFyIGluaXRTdGF0ZSA9IHtcbiAgICBpZDogcGFyc2VJbnQocG9zdElkKSxcbiAgICBibG9nSWQ6IHBhcnNlSW50KGJsb2dJZCksXG4gICAgdXNlcklkOiAwLFxuICAgIHVzZXJOYW1lOiAnJyxcbiAgICB1c2VyRW1haWw6ICcnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgdGV4dDogJycsXG4gICAgZGF0ZTogJycsXG4gICAgcHVibGljOiBmYWxzZSxcblxuICAgIC8vIHRlY2huaWNhbCBpbmZvXG4gICAgc3RhdHVzOiBudWxsXG59O1xuXG52YXIgcG9zdEVkaXQgPSBmdW5jdGlvbiBwb3N0RWRpdCgpIHtcbiAgICB2YXIgc3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGluaXRTdGF0ZTtcbiAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gICAgdmFyIGRhdGEgPSBudWxsO1xuXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdQT1NUX0dFVF9TRU5EJzpcbiAgICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnc2VuZCdcbiAgICAgICAgICAgIH0sIHN0YXRlKTtcbiAgICAgICAgY2FzZSAnUE9TVF9HRVRfU1VDQ0VTUyc6XG4gICAgICAgICAgICBkYXRhID0gX2V4dGVuZHMoe30sIHN0YXRlKTtcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3N1Y2Nlc3NfZ2V0JztcbiAgICAgICAgICAgIGRhdGEuaWQgPSBhY3Rpb24uZGF0YS5nZXRQb3N0LmlkO1xuICAgICAgICAgICAgZGF0YS5ibG9nSWQgPSBhY3Rpb24uZGF0YS5nZXRQb3N0LmJsb2dJZDtcbiAgICAgICAgICAgIGRhdGEudXNlcklkID0gYWN0aW9uLmRhdGEuZ2V0UG9zdC51c2VySWQ7XG4gICAgICAgICAgICBkYXRhLnVzZXJOYW1lID0gYWN0aW9uLmRhdGEuZ2V0UG9zdC51c2VyTmFtZTtcbiAgICAgICAgICAgIGRhdGEudXNlckVtYWlsID0gYWN0aW9uLmRhdGEuZ2V0UG9zdC51c2VyRW1haWw7XG4gICAgICAgICAgICBkYXRhLnRpdGxlID0gYWN0aW9uLmRhdGEuZ2V0UG9zdC50aXRsZTtcbiAgICAgICAgICAgIGRhdGEuZGVzY3JpcHRpb24gPSBhY3Rpb24uZGF0YS5nZXRQb3N0LmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgZGF0YS50ZXh0ID0gYWN0aW9uLmRhdGEuZ2V0UG9zdC50ZXh0O1xuICAgICAgICAgICAgZGF0YS5kYXRlID0gYWN0aW9uLmRhdGEuZ2V0UG9zdC5kYXRlO1xuICAgICAgICAgICAgZGF0YS5wdWJsaWMgPSAhIWFjdGlvbi5kYXRhLmdldFBvc3QucHVibGljO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ1BPU1RfR0VUX0VSUk9SJzpcbiAgICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgIGVycm9yOiBhY3Rpb24uZXJyb3JcbiAgICAgICAgICAgIH0sIHN0YXRlKTtcblxuICAgICAgICBjYXNlICdQT1NUX0VESVRfU0VORCc6XG4gICAgICAgICAgICBkYXRhID0gX2V4dGVuZHMoe30sIHN0YXRlKTtcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3NlbmQnO1xuICAgICAgICAgICAgZGF0YS5pZCA9IGFjdGlvbi5pZDtcbiAgICAgICAgICAgIGRhdGEuYmxvZ0lkID0gYWN0aW9uLmJsb2dJZDtcbiAgICAgICAgICAgIGRhdGEudGl0bGUgPSBhY3Rpb24udGl0bGU7XG4gICAgICAgICAgICBkYXRhLmRlc2NyaXB0aW9uID0gYWN0aW9uLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgZGF0YS50ZXh0ID0gYWN0aW9uLnRleHQ7XG4gICAgICAgICAgICBkYXRhLnB1YmxpYyA9IGFjdGlvbi5wdWJsaWM7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgY2FzZSAnUE9TVF9FRElUX1NVQ0NFU1MnOlxuICAgICAgICAgICAgZGF0YSA9IF9leHRlbmRzKHt9LCBzdGF0ZSk7XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdzdWNjZXNzX2VkaXQnO1xuICAgICAgICAgICAgZGF0YS5pZCA9IGFjdGlvbi5kYXRhLmVkaXRQb3N0LmlkO1xuICAgICAgICAgICAgZGF0YS5ibG9nSWQgPSBhY3Rpb24uZGF0YS5lZGl0UG9zdC5ibG9nSWQ7XG4gICAgICAgICAgICBkYXRhLnRpdGxlID0gYWN0aW9uLmRhdGEuZWRpdFBvc3QudGl0bGU7XG4gICAgICAgICAgICBkYXRhLmRlc2NyaXB0aW9uID0gYWN0aW9uLmRhdGEuZWRpdFBvc3QuZGVzY3JpcHRpb247XG4gICAgICAgICAgICBkYXRhLnRleHQgPSBhY3Rpb24uZGF0YS5lZGl0UG9zdC50ZXh0O1xuICAgICAgICAgICAgZGF0YS5kYXRlID0gYWN0aW9uLmRhdGEuZWRpdFBvc3QuZGF0ZTtcbiAgICAgICAgICAgIGRhdGEucHVibGljID0gYWN0aW9uLmRhdGEuZWRpdFBvc3QucHVibGljO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ1BPU1RfRURJVF9FUlJPUic6XG4gICAgICAgICAgICBkYXRhID0gX2V4dGVuZHMoe30sIHN0YXRlKTtcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ2Vycm9yJztcbiAgICAgICAgICAgIGRhdGEuZXJyb3IgPSBhY3Rpb24uZXJyb3I7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHBvc3RFZGl0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNDE2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdFJlZHV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxudmFyIF9hY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcblxudmFyIF9jb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblxudmFyIF9kcmFmdEpzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nyk7XG5cbnZhciBfZHJhZnRqc1RvSHRtbCA9IF9fd2VicGFja19yZXF1aXJlX18oNDEwKTtcblxudmFyIF9kcmFmdGpzVG9IdG1sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RyYWZ0anNUb0h0bWwpO1xuXG52YXIgX2h0bWxUb0RyYWZ0anMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxMSk7XG5cbnZhciBfaHRtbFRvRHJhZnRqczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9odG1sVG9EcmFmdGpzKTtcblxudmFyIF9yZWFjdERyYWZ0V3lzaXd5ZyA9IF9fd2VicGFja19yZXF1aXJlX18oNDEyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgRWRpdENvbXAgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhFZGl0Q29tcCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBFZGl0Q29tcChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRWRpdENvbXApO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChFZGl0Q29tcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEVkaXRDb21wKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICAgIF90aGlzLnN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLnBvc3RFZGl0KTtcbiAgICAgICAgX3RoaXMuc3RhdGUuZWRpdG9yU3RhdGUgPSBfZHJhZnRKcy5FZGl0b3JTdGF0ZS5jcmVhdGVFbXB0eSgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEVkaXRDb21wLCBbe1xuICAgICAgICBrZXk6ICdjb21wb25lbnRXaWxsTW91bnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuaWQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKCgwLCBfYWN0aW9uLmdyYXBocWwpKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVF9HRVQnLFxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLnN0YXRlLmlkXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcHMucG9zdEVkaXQuc3RhdHVzID09ICdzdWNjZXNzX2dldCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2tzRnJvbUhUTUwgPSAoMCwgX2h0bWxUb0RyYWZ0anMyLmRlZmF1bHQpKG5leHRQcm9wcy5wb3N0RWRpdC50ZXh0KTtcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IF9kcmFmdEpzLkNvbnRlbnRTdGF0ZS5jcmVhdGVGcm9tQmxvY2tBcnJheShibG9ja3NGcm9tSFRNTC5jb250ZW50QmxvY2tzLCBibG9ja3NGcm9tSFRNTC5lbnRpdHlNYXApO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZDogbmV4dFByb3BzLnBvc3RFZGl0LnVzZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgdXNlck5hbWU6IG5leHRQcm9wcy5wb3N0RWRpdC51c2VyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdXNlckVtYWlsOiBuZXh0UHJvcHMucG9zdEVkaXQudXNlckVtYWlsLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmV4dFByb3BzLnBvc3RFZGl0LnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbmV4dFByb3BzLnBvc3RFZGl0LmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBuZXh0UHJvcHMucG9zdEVkaXQudGV4dCxcbiAgICAgICAgICAgICAgICAgICAgZGF0ZTogbmV4dFByb3BzLnBvc3RFZGl0LmRhdGUsXG4gICAgICAgICAgICAgICAgICAgIHB1YmxpYzogbmV4dFByb3BzLnBvc3RFZGl0LnB1YmxpYyxcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yU3RhdGU6IF9kcmFmdEpzLkVkaXRvclN0YXRlLmNyZWF0ZVdpdGhDb250ZW50KGNvbnRlbnQpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2ZpZWxkQ2hhbmdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpZWxkQ2hhbmdlKGUpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZU9iaiA9IHt9O1xuICAgICAgICAgICAgdmFyIHZhbCA9IGUudGFyZ2V0LmlkID09ICdwdWJsaWMnID8gZS50YXJnZXQuY2hlY2tlZCA6IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgc3RhdGVPYmpbZS50YXJnZXQuaWRdID0gdmFsO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZU9iaik7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uRWRpdG9yU3RhdGVDaGFuZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25FZGl0b3JTdGF0ZUNoYW5nZShlZGl0b3JTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgZWRpdG9yU3RhdGU6IGVkaXRvclN0YXRlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZm9ybVN1Ym1pdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtU3VibWl0KGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gKDAsIF9kcmFmdGpzVG9IdG1sMi5kZWZhdWx0KSgoMCwgX2RyYWZ0SnMuY29udmVydFRvUmF3KSh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkpKTtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3RoaXMuc3RhdGUnLCB0aGlzLnN0YXRlKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBpZiAodGV4dCAmJiAodGV4dC5sZW5ndGggPiA1MTIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnQkxPR19FRElUX0VSUk9SJyxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICdUZXh0IGlzIHRvbyBsb25nIScsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChncmFwaHFsKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnQkxPR19FRElUJyxcbiAgICAgICAgICAgICAgICBpZDogdGhpcy5zdGF0ZS5pZCxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5zdGF0ZS50aXRsZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBkcmFmdFRvSHRtbChjb252ZXJ0VG9SYXcodGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpKSksXG4gICAgICAgICAgICAgICAgcHVibGljOiB0aGlzLnN0YXRlLnB1YmxpYyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICovXG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIGFsZXJ0T3B0cyA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnBvc3RFZGl0LnN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnZGFuZ2VyJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGhpcy5wcm9wcy5wb3N0RWRpdC5lcnJvciB8fCAnRXJyb3IsIHdyb25nIHBvc3QgZGF0YSdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnBvc3RFZGl0LnN0YXR1cyA9PT0gJ3NlbmQnKSB7XG4gICAgICAgICAgICAgICAgYWxlcnRPcHRzID0ge1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdpbmZvJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0xvYWRpbmcsIHBsZWFzZSB3YWl0J1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMucG9zdEVkaXQuc3RhdHVzID09PSAnc3VjY2Vzc19lZGl0Jykge1xuICAgICAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdQb3N0IHNhdmVkIHN1Y2Nlc3NmdWxseSdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSAnL3Bvc3QtZWRpdC8nICsgX3RoaXMyLnByb3BzLnBvc3RFZGl0LmJsb2dJZCArICcvJyArIF90aGlzMi5wcm9wcy5wb3N0RWRpdC5pZDtcbiAgICAgICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdmb3JtJyxcbiAgICAgICAgICAgICAgICAgICAgeyBvblN1Ym1pdDogdGhpcy5mb3JtU3VibWl0LmJpbmQodGhpcykgfSxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZm9ybS1ncm91cCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBodG1sRm9yOiAndGl0bGUnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1RpdGxlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnZm9ybS1jb250cm9sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5maWVsZENoYW5nZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnRpdGxlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdmb3JtLWdyb3VwJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGh0bWxGb3I6ICdkZXNjcmlwdGlvbicgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRGVzY3JpcHRpb24nXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdmb3JtLWNvbnRyb2wnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAnZGVzY3JpcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnRGVzY3JpcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmZpZWxkQ2hhbmdlLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2Zvcm0tZ3JvdXAnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgaHRtbEZvcjogJ3RleHQnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1RleHQnXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0RHJhZnRXeXNpd3lnLkVkaXRvciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvclN0YXRlOiB0aGlzLnN0YXRlLmVkaXRvclN0YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvckNsYXNzTmFtZTogJ2Zvcm0tY29udHJvbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25FZGl0b3JTdGF0ZUNoYW5nZTogdGhpcy5vbkVkaXRvclN0YXRlQ2hhbmdlLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbJ2lubGluZScsICdsaXN0JywgJ2ZvbnRTaXplJywgJ2ZvbnRGYW1pbHknLCAndGV4dEFsaWduJywgJ2xpbmsnLCAnaGlzdG9yeScsICdjb2xvclBpY2tlciddXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY2hlY2tib3gnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogJ3B1YmxpYycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmZpZWxkQ2hhbmdlLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6ICEhdGhpcy5zdGF0ZS5wdWJsaWNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIFB1YmxpYydcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudC5BbGVydE1lc3NhZ2UsIHsgb3B0czogYWxlcnRPcHRzIH0pLFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaHInLCBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHR5cGU6ICdzdWJtaXQnLCBjbGFzc05hbWU6ICdidG4gYnRuLXByaW1hcnknIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogJ2dseXBoaWNvbiBnbHlwaGljb24tZmxvcHB5LWRpc2snIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXHhBMCBTYXZlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYnInLCBudWxsKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRWRpdENvbXA7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG52YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSk7XG59O1xuRWRpdENvbXAgPSAoMCwgX3JlYWN0UmVkdXguY29ubmVjdCkobWFwU3RhdGVUb1Byb3BzKShFZGl0Q29tcCk7XG5leHBvcnRzLmRlZmF1bHQgPSBFZGl0Q29tcDtcblxuLypcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7YXBpLCBncmFwaHFsfSBmcm9tICcuLi9oZWxwZXJzL2FjdGlvbidcbmltcG9ydCB7QWxlcnRNZXNzYWdlfSBmcm9tICcuLi9oZWxwZXJzL2NvbXBvbmVudCdcblxuaW1wb3J0IHsgRWRpdG9yU3RhdGUsIGNvbnZlcnRUb1JhdywgQ29udGVudFN0YXRlIH0gZnJvbSAnZHJhZnQtanMnO1xuaW1wb3J0IGRyYWZ0VG9IdG1sIGZyb20gJ2RyYWZ0anMtdG8taHRtbCc7XG5pbXBvcnQgaHRtbFRvRHJhZnQgZnJvbSAnaHRtbC10by1kcmFmdGpzJztcbmltcG9ydCB7IEVkaXRvciB9IGZyb20gJ3JlYWN0LWRyYWZ0LXd5c2l3eWcnO1xuXG5cblxuY2xhc3MgRWRpdENvbXAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHsuLi5wcm9wcy5ibG9nRWRpdH07XG4gICAgICAgIHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUgPSBFZGl0b3JTdGF0ZS5jcmVhdGVFbXB0eSgpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxNb3VudCAoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlkID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKGdyYXBocWwoe1xuICAgICAgICAgICAgdHlwZTogJ0JMT0dfR0VUJyxcbiAgICAgICAgICAgIGlkOiB0aGlzLnN0YXRlLmlkLFxuICAgICAgICB9KSk7XG5cbiAgICB9XG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5ibG9nRWRpdC5zdGF0dXMgPT0gJ3N1Y2Nlc3NfZ2V0Jykge1xuICAgICAgICAgICAgY29uc3QgYmxvY2tzRnJvbUhUTUwgPSBodG1sVG9EcmFmdChuZXh0UHJvcHMuYmxvZ0VkaXQudGV4dCk7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gQ29udGVudFN0YXRlLmNyZWF0ZUZyb21CbG9ja0FycmF5KFxuICAgICAgICAgICAgICAgIGJsb2Nrc0Zyb21IVE1MLmNvbnRlbnRCbG9ja3MsXG4gICAgICAgICAgICAgICAgYmxvY2tzRnJvbUhUTUwuZW50aXR5TWFwXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV4dFByb3BzLmJsb2dFZGl0LnRpdGxlLFxuICAgICAgICAgICAgICAgIHRleHQ6IG5leHRQcm9wcy5ibG9nRWRpdC50ZXh0LFxuICAgICAgICAgICAgICAgIHB1YmxpYzogbmV4dFByb3BzLmJsb2dFZGl0LnB1YmxpYyxcbiAgICAgICAgICAgICAgICBkYXRlOiBuZXh0UHJvcHMuYmxvZ0VkaXQuZGF0ZSxcbiAgICAgICAgICAgICAgICBlZGl0b3JTdGF0ZTogRWRpdG9yU3RhdGUuY3JlYXRlV2l0aENvbnRlbnQoY29udGVudCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbiAgICBmaWVsZENoYW5nZSAoZSkge1xuICAgICAgICBsZXQgc3RhdGVPYmogPSB7fTtcbiAgICAgICAgbGV0IHZhbCA9IChlLnRhcmdldC5pZCA9PSAncHVibGljJykgPyBlLnRhcmdldC5jaGVja2VkIDogZS50YXJnZXQudmFsdWU7XG4gICAgICAgIHN0YXRlT2JqW2UudGFyZ2V0LmlkXSA9IHZhbDtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZU9iaik7XG4gICAgfVxuXG4gICAgb25FZGl0b3JTdGF0ZUNoYW5nZSAoZWRpdG9yU3RhdGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBlZGl0b3JTdGF0ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgZm9ybVN1Ym1pdCAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCB0ZXh0ID0gZHJhZnRUb0h0bWwoY29udmVydFRvUmF3KHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSkpO1xuXG4gICAgICAgIGlmICh0ZXh0ICYmICh0ZXh0Lmxlbmd0aCA+IDUxMikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnQkxPR19FRElUX0VSUk9SJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ1RleHQgaXMgdG9vIGxvbmchJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChncmFwaHFsKHtcbiAgICAgICAgICAgIHR5cGU6ICdCTE9HX0VESVQnLFxuICAgICAgICAgICAgaWQ6IHRoaXMuc3RhdGUuaWQsXG4gICAgICAgICAgICB0aXRsZTogdGhpcy5zdGF0ZS50aXRsZSxcbiAgICAgICAgICAgIHRleHQ6IGRyYWZ0VG9IdG1sKGNvbnZlcnRUb1Jhdyh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkpKSxcbiAgICAgICAgICAgIHB1YmxpYzogdGhpcy5zdGF0ZS5wdWJsaWMsXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICByZW5kZXIgKCkge1xuICAgICAgICBsZXQgYWxlcnRPcHRzID0gbnVsbDtcbiAgICBcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuYmxvZ0VkaXQuc3RhdHVzID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICBhbGVydE9wdHMgPSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnZGFuZ2VyJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnByb3BzLmJsb2dFZGl0LmVycm9yIHx8ICdFcnJvciwgd3JvbmcgYmxvZyBkYXRhJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuYmxvZ0VkaXQuc3RhdHVzID09PSAnc2VuZCcpIHtcbiAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdpbmZvJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiAnTG9hZGluZywgcGxlYXNlIHdhaXQnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuYmxvZ0VkaXQuc3RhdHVzID09PSAnc3VjY2Vzc19lZGl0Jykge1xuICAgICAgICAgICAgYWxlcnRPcHRzID0ge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdCbG9nIHNhdmVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSAnL2Jsb2ctZWRpdC8nICsgdGhpcy5wcm9wcy5ibG9nRWRpdC5pZDtcbiAgICAgICAgICAgIH0sIDEwMDApXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPGRpdj5cbiAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXs6OnRoaXMuZm9ybVN1Ym1pdH0gPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInRpdGxlXCI+VGl0bGU8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJ0aXRsZVwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUaXRsZVwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9ezo6dGhpcy5maWVsZENoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnRpdGxlfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInRleHRcIj5UZXh0PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPEVkaXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yU3RhdGU9e3RoaXMuc3RhdGUuZWRpdG9yU3RhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3JDbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25FZGl0b3JTdGF0ZUNoYW5nZT17Ojp0aGlzLm9uRWRpdG9yU3RhdGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFyPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogWydpbmxpbmUnLCAnbGlzdCcsICdmb250U2l6ZScsICdmb250RmFtaWx5JywgJ3RleHRBbGlnbicsICdsaW5rJywgJ2hpc3RvcnknLCAnY29sb3JQaWNrZXInXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNoZWNrYm94XCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ncHVibGljJyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17Ojp0aGlzLmZpZWxkQ2hhbmdlfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkID0geyEhIHRoaXMuc3RhdGUucHVibGljfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz4gUHVibGljXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8QWxlcnRNZXNzYWdlIG9wdHM9e2FsZXJ0T3B0c30gLz5cblxuICAgICAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAgICAgIDxkaXYgPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nZ2x5cGhpY29uIGdseXBoaWNvbi1mbG9wcHktZGlzayc+PC9zcGFuPiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgU2F2ZVxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XG4gICAgcmV0dXJuIHsuLi5zdGF0ZX1cbn1cbkVkaXRDb21wID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKEVkaXRDb21wKVxuZXhwb3J0IGRlZmF1bHQgRWRpdENvbXBcbiovXG5cbi8qKiovIH0pXG5cbn0sWzQxNF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBwb3N0RWRpdC5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSdcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCAnYm9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5jc3MnO1xuaW1wb3J0ICdyZWFjdC1kcmFmdC13eXNpd3lnL2Rpc3QvcmVhY3QtZHJhZnQtd3lzaXd5Zy5jc3MnO1xuaW1wb3J0ICcuL3N0eWxlcy9pbmRleC5zY3NzJ1xuXG5pbXBvcnQge2xheW91dH0gZnJvbSAnLi9oZWxwZXJzL2NvbXBvbmVudCdcbmltcG9ydCBFZGl0Q29tcCBmcm9tICcuL3Bvc3QvRWRpdENvbXAnXG5cbmltcG9ydCBhdXRoIGZyb20gJy4vYXV0aC9Mb2dpblJlZCdcbmltcG9ydCBwb3N0RWRpdCBmcm9tICcuL3Bvc3QvRWRpdFJlZCdcblxuaW1wb3J0IHtjb25maWd1cmVTdG9yZX0gZnJvbSAnLi9oZWxwZXJzL2NvbmZpZ3VyZVN0b3JlJ1xuXG5cbmxldCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKHtcblx0YXV0aDogYXV0aCxcblx0cG9zdEVkaXQ6IHBvc3RFZGl0LFxufSk7XG5cbmxldCBDb21wID0gbGF5b3V0KHtjb21wOiBFZGl0Q29tcCwgZm9yQXV0aDogdHJ1ZX0pO1xucmVuZGVyKFxuXHQ8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cblx0XHQ8Q29tcCAvPlxuXHQ8L1Byb3ZpZGVyPixcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKVxuKVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3RhdGljX3NyYy9wb3N0RWRpdC5qcyIsIi8qXG5cblwiaWRcIiBTRVJJQUwgUFJJTUFSWSBLRVksXG5cInVzZXJfaWRcIiBTRVJJQUwgTk9UIE5VTEwsXG5cImJsb2dfaWRcIiBTRVJJQUwgTk9UIE5VTEwsXG5cInRpdGxlXCIgdmFyY2hhcigxMjgpIERFRkFVTFQgTlVMTCxcblwiZGVzY3JpcHRpb25cIiB2YXJjaGFyKDI1NikgREVGQVVMVCBOVUxMLFxuXCJ0ZXh0XCIgdGV4dCxcblwiZGF0ZVwiIHRpbWVzdGFtcCBERUZBVUxUIE5VTExcblxuKi9cblxubGV0IGJsb2dJZCA9IHdpbmRvdy5sb2NhbFBhcmFtcy5ibG9nSWQ7XG5sZXQgcG9zdElkID0gd2luZG93LmxvY2FsUGFyYW1zLnBvc3RJZCB8fCAnLTEnO1xubGV0IGluaXRTdGF0ZSA9IHtcbiAgICBpZDogcGFyc2VJbnQocG9zdElkKSxcbiAgICBibG9nSWQ6IHBhcnNlSW50KGJsb2dJZCksXG4gICAgdXNlcklkOiAwLFxuICAgIHVzZXJOYW1lOiAnJyxcbiAgICB1c2VyRW1haWw6ICcnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgdGV4dDogJycsXG4gICAgZGF0ZTogJycsXG4gICAgcHVibGljOiBmYWxzZSxcblxuICAgIC8vIHRlY2huaWNhbCBpbmZvXG4gICAgc3RhdHVzOiBudWxsLFxufTtcblxuXG5jb25zdCBwb3N0RWRpdCA9IChzdGF0ZSA9IGluaXRTdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgbGV0IGRhdGEgPSBudWxsO1xuXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdQT1NUX0dFVF9TRU5EJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnc2VuZCcsXG4gICAgICAgICAgICAgICAgLi4uc3RhdGVcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ1BPU1RfR0VUX1NVQ0NFU1MnOlxuICAgICAgICAgICAgZGF0YSA9IHsuLi5zdGF0ZX07XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdzdWNjZXNzX2dldCc7XG4gICAgICAgICAgICBkYXRhLmlkID0gYWN0aW9uLmRhdGEuZ2V0UG9zdC5pZDtcbiAgICAgICAgICAgIGRhdGEuYmxvZ0lkID0gYWN0aW9uLmRhdGEuZ2V0UG9zdC5ibG9nSWQ7XG4gICAgICAgICAgICBkYXRhLnVzZXJJZCA9IGFjdGlvbi5kYXRhLmdldFBvc3QudXNlcklkO1xuICAgICAgICAgICAgZGF0YS51c2VyTmFtZSA9IGFjdGlvbi5kYXRhLmdldFBvc3QudXNlck5hbWU7XG4gICAgICAgICAgICBkYXRhLnVzZXJFbWFpbCA9IGFjdGlvbi5kYXRhLmdldFBvc3QudXNlckVtYWlsO1xuICAgICAgICAgICAgZGF0YS50aXRsZSA9IGFjdGlvbi5kYXRhLmdldFBvc3QudGl0bGU7XG4gICAgICAgICAgICBkYXRhLmRlc2NyaXB0aW9uID0gYWN0aW9uLmRhdGEuZ2V0UG9zdC5kZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIGRhdGEudGV4dCA9IGFjdGlvbi5kYXRhLmdldFBvc3QudGV4dDtcbiAgICAgICAgICAgIGRhdGEuZGF0ZSA9IGFjdGlvbi5kYXRhLmdldFBvc3QuZGF0ZTtcbiAgICAgICAgICAgIGRhdGEucHVibGljID0gISEgYWN0aW9uLmRhdGEuZ2V0UG9zdC5wdWJsaWM7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgY2FzZSAnUE9TVF9HRVRfRVJST1InOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGFjdGlvbi5lcnJvcixcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSAnUE9TVF9FRElUX1NFTkQnOlxuICAgICAgICAgICAgZGF0YSA9IHsuLi5zdGF0ZX07XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdzZW5kJztcbiAgICAgICAgICAgIGRhdGEuaWQgPSBhY3Rpb24uaWQ7XG4gICAgICAgICAgICBkYXRhLmJsb2dJZCA9IGFjdGlvbi5ibG9nSWQ7XG4gICAgICAgICAgICBkYXRhLnRpdGxlID0gYWN0aW9uLnRpdGxlO1xuICAgICAgICAgICAgZGF0YS5kZXNjcmlwdGlvbiA9IGFjdGlvbi5kZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIGRhdGEudGV4dCA9IGFjdGlvbi50ZXh0O1xuICAgICAgICAgICAgZGF0YS5wdWJsaWMgPSBhY3Rpb24ucHVibGljO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ1BPU1RfRURJVF9TVUNDRVNTJzpcbiAgICAgICAgICAgIGRhdGEgPSB7Li4uc3RhdGV9O1xuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnc3VjY2Vzc19lZGl0JztcbiAgICAgICAgICAgIGRhdGEuaWQgPSBhY3Rpb24uZGF0YS5lZGl0UG9zdC5pZDtcbiAgICAgICAgICAgIGRhdGEuYmxvZ0lkID0gYWN0aW9uLmRhdGEuZWRpdFBvc3QuYmxvZ0lkO1xuICAgICAgICAgICAgZGF0YS50aXRsZSA9IGFjdGlvbi5kYXRhLmVkaXRQb3N0LnRpdGxlO1xuICAgICAgICAgICAgZGF0YS5kZXNjcmlwdGlvbiA9IGFjdGlvbi5kYXRhLmVkaXRQb3N0LmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgZGF0YS50ZXh0ID0gYWN0aW9uLmRhdGEuZWRpdFBvc3QudGV4dDtcbiAgICAgICAgICAgIGRhdGEuZGF0ZSA9IGFjdGlvbi5kYXRhLmVkaXRQb3N0LmRhdGU7XG4gICAgICAgICAgICBkYXRhLnB1YmxpYyA9IGFjdGlvbi5kYXRhLmVkaXRQb3N0LnB1YmxpYztcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICBjYXNlICdQT1NUX0VESVRfRVJST1InOlxuICAgICAgICAgICAgZGF0YSA9IHsuLi5zdGF0ZX07XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdlcnJvcic7XG4gICAgICAgICAgICBkYXRhLmVycm9yID0gYWN0aW9uLmVycm9yO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG5cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBwb3N0RWRpdDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zdGF0aWNfc3JjL3Bvc3QvRWRpdFJlZC5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7YXBpLCBncmFwaHFsfSBmcm9tICcuLi9oZWxwZXJzL2FjdGlvbidcbmltcG9ydCB7QWxlcnRNZXNzYWdlfSBmcm9tICcuLi9oZWxwZXJzL2NvbXBvbmVudCdcblxuaW1wb3J0IHsgRWRpdG9yU3RhdGUsIGNvbnZlcnRUb1JhdywgQ29udGVudFN0YXRlIH0gZnJvbSAnZHJhZnQtanMnO1xuaW1wb3J0IGRyYWZ0VG9IdG1sIGZyb20gJ2RyYWZ0anMtdG8taHRtbCc7XG5pbXBvcnQgaHRtbFRvRHJhZnQgZnJvbSAnaHRtbC10by1kcmFmdGpzJztcbmltcG9ydCB7IEVkaXRvciB9IGZyb20gJ3JlYWN0LWRyYWZ0LXd5c2l3eWcnO1xuXG5jbGFzcyBFZGl0Q29tcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0gey4uLnByb3BzLnBvc3RFZGl0fTtcbiAgICAgICAgdGhpcy5zdGF0ZS5lZGl0b3JTdGF0ZSA9IEVkaXRvclN0YXRlLmNyZWF0ZUVtcHR5KCk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50ICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaWQgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goZ3JhcGhxbCh7XG4gICAgICAgICAgICB0eXBlOiAnUE9TVF9HRVQnLFxuICAgICAgICAgICAgaWQ6IHRoaXMuc3RhdGUuaWQsXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICBpZiAobmV4dFByb3BzLnBvc3RFZGl0LnN0YXR1cyA9PSAnc3VjY2Vzc19nZXQnKSB7XG4gICAgICAgICAgICBjb25zdCBibG9ja3NGcm9tSFRNTCA9IGh0bWxUb0RyYWZ0KG5leHRQcm9wcy5wb3N0RWRpdC50ZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBDb250ZW50U3RhdGUuY3JlYXRlRnJvbUJsb2NrQXJyYXkoXG4gICAgICAgICAgICAgICAgYmxvY2tzRnJvbUhUTUwuY29udGVudEJsb2NrcyxcbiAgICAgICAgICAgICAgICBibG9ja3NGcm9tSFRNTC5lbnRpdHlNYXBcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHVzZXJJZDogbmV4dFByb3BzLnBvc3RFZGl0LnVzZXJJZCxcbiAgICAgICAgICAgICAgICB1c2VyTmFtZTogbmV4dFByb3BzLnBvc3RFZGl0LnVzZXJOYW1lLFxuICAgICAgICAgICAgICAgIHVzZXJFbWFpbDogbmV4dFByb3BzLnBvc3RFZGl0LnVzZXJFbWFpbCxcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV4dFByb3BzLnBvc3RFZGl0LnRpdGxlLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBuZXh0UHJvcHMucG9zdEVkaXQuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgdGV4dDogbmV4dFByb3BzLnBvc3RFZGl0LnRleHQsXG4gICAgICAgICAgICAgICAgZGF0ZTogbmV4dFByb3BzLnBvc3RFZGl0LmRhdGUsXG4gICAgICAgICAgICAgICAgcHVibGljOiBuZXh0UHJvcHMucG9zdEVkaXQucHVibGljLFxuICAgICAgICAgICAgICAgIGVkaXRvclN0YXRlOiBFZGl0b3JTdGF0ZS5jcmVhdGVXaXRoQ29udGVudChjb250ZW50KSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmllbGRDaGFuZ2UgKGUpIHtcbiAgICAgICAgbGV0IHN0YXRlT2JqID0ge307XG4gICAgICAgIGxldCB2YWwgPSAoZS50YXJnZXQuaWQgPT0gJ3B1YmxpYycpID8gZS50YXJnZXQuY2hlY2tlZCA6IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICBzdGF0ZU9ialtlLnRhcmdldC5pZF0gPSB2YWw7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGVPYmopO1xuICAgIH1cblxuICAgIG9uRWRpdG9yU3RhdGVDaGFuZ2UgKGVkaXRvclN0YXRlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZWRpdG9yU3RhdGVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZm9ybVN1Ym1pdCAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCB0ZXh0ID0gZHJhZnRUb0h0bWwoY29udmVydFRvUmF3KHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSkpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgJ3RoaXMuc3RhdGUnLFxuICAgICAgICAgICAgdGhpcy5zdGF0ZVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8qXG4gICAgICAgIGlmICh0ZXh0ICYmICh0ZXh0Lmxlbmd0aCA+IDUxMikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnQkxPR19FRElUX0VSUk9SJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ1RleHQgaXMgdG9vIGxvbmchJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChncmFwaHFsKHtcbiAgICAgICAgICAgIHR5cGU6ICdCTE9HX0VESVQnLFxuICAgICAgICAgICAgaWQ6IHRoaXMuc3RhdGUuaWQsXG4gICAgICAgICAgICB0aXRsZTogdGhpcy5zdGF0ZS50aXRsZSxcbiAgICAgICAgICAgIHRleHQ6IGRyYWZ0VG9IdG1sKGNvbnZlcnRUb1Jhdyh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkpKSxcbiAgICAgICAgICAgIHB1YmxpYzogdGhpcy5zdGF0ZS5wdWJsaWMsXG4gICAgICAgIH0pKTtcbiAgICAgICAgKi9cbiAgICB9XG5cbiAgICByZW5kZXIgKCkge1xuICAgICAgICBsZXQgYWxlcnRPcHRzID0gbnVsbDtcbiAgICBcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucG9zdEVkaXQuc3RhdHVzID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICBhbGVydE9wdHMgPSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnZGFuZ2VyJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnByb3BzLnBvc3RFZGl0LmVycm9yIHx8ICdFcnJvciwgd3JvbmcgcG9zdCBkYXRhJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMucG9zdEVkaXQuc3RhdHVzID09PSAnc2VuZCcpIHtcbiAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdpbmZvJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiAnTG9hZGluZywgcGxlYXNlIHdhaXQnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMucG9zdEVkaXQuc3RhdHVzID09PSAnc3VjY2Vzc19lZGl0Jykge1xuICAgICAgICAgICAgYWxlcnRPcHRzID0ge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdQb3N0IHNhdmVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBgL3Bvc3QtZWRpdC8ke3RoaXMucHJvcHMucG9zdEVkaXQuYmxvZ0lkfS8ke3RoaXMucHJvcHMucG9zdEVkaXQuaWR9YDtcbiAgICAgICAgICAgIH0sIDEwMDApXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPGRpdj5cbiAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXs6OnRoaXMuZm9ybVN1Ym1pdH0gPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInRpdGxlXCI+VGl0bGU8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJ0aXRsZVwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUaXRsZVwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9ezo6dGhpcy5maWVsZENoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnRpdGxlfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImRlc2NyaXB0aW9uXCI+RGVzY3JpcHRpb248L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJkZXNjcmlwdGlvblwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJEZXNjcmlwdGlvblwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9ezo6dGhpcy5maWVsZENoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInRleHRcIj5UZXh0PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPEVkaXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yU3RhdGU9e3RoaXMuc3RhdGUuZWRpdG9yU3RhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3JDbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25FZGl0b3JTdGF0ZUNoYW5nZT17Ojp0aGlzLm9uRWRpdG9yU3RhdGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFyPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogWydpbmxpbmUnLCAnbGlzdCcsICdmb250U2l6ZScsICdmb250RmFtaWx5JywgJ3RleHRBbGlnbicsICdsaW5rJywgJ2hpc3RvcnknLCAnY29sb3JQaWNrZXInXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNoZWNrYm94XCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ncHVibGljJyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17Ojp0aGlzLmZpZWxkQ2hhbmdlfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkID0geyEhIHRoaXMuc3RhdGUucHVibGljfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz4gUHVibGljXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8QWxlcnRNZXNzYWdlIG9wdHM9e2FsZXJ0T3B0c30gLz5cblxuICAgICAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAgICAgIDxkaXYgPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nZ2x5cGhpY29uIGdseXBoaWNvbi1mbG9wcHktZGlzayc+PC9zcGFuPiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgU2F2ZVxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgfVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XG4gICAgcmV0dXJuIHsuLi5zdGF0ZX1cbn1cbkVkaXRDb21wID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKEVkaXRDb21wKVxuZXhwb3J0IGRlZmF1bHQgRWRpdENvbXBcblxuXG5cblxuLypcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7YXBpLCBncmFwaHFsfSBmcm9tICcuLi9oZWxwZXJzL2FjdGlvbidcbmltcG9ydCB7QWxlcnRNZXNzYWdlfSBmcm9tICcuLi9oZWxwZXJzL2NvbXBvbmVudCdcblxuaW1wb3J0IHsgRWRpdG9yU3RhdGUsIGNvbnZlcnRUb1JhdywgQ29udGVudFN0YXRlIH0gZnJvbSAnZHJhZnQtanMnO1xuaW1wb3J0IGRyYWZ0VG9IdG1sIGZyb20gJ2RyYWZ0anMtdG8taHRtbCc7XG5pbXBvcnQgaHRtbFRvRHJhZnQgZnJvbSAnaHRtbC10by1kcmFmdGpzJztcbmltcG9ydCB7IEVkaXRvciB9IGZyb20gJ3JlYWN0LWRyYWZ0LXd5c2l3eWcnO1xuXG5cblxuY2xhc3MgRWRpdENvbXAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHsuLi5wcm9wcy5ibG9nRWRpdH07XG4gICAgICAgIHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUgPSBFZGl0b3JTdGF0ZS5jcmVhdGVFbXB0eSgpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxNb3VudCAoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlkID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKGdyYXBocWwoe1xuICAgICAgICAgICAgdHlwZTogJ0JMT0dfR0VUJyxcbiAgICAgICAgICAgIGlkOiB0aGlzLnN0YXRlLmlkLFxuICAgICAgICB9KSk7XG5cbiAgICB9XG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5ibG9nRWRpdC5zdGF0dXMgPT0gJ3N1Y2Nlc3NfZ2V0Jykge1xuICAgICAgICAgICAgY29uc3QgYmxvY2tzRnJvbUhUTUwgPSBodG1sVG9EcmFmdChuZXh0UHJvcHMuYmxvZ0VkaXQudGV4dCk7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gQ29udGVudFN0YXRlLmNyZWF0ZUZyb21CbG9ja0FycmF5KFxuICAgICAgICAgICAgICAgIGJsb2Nrc0Zyb21IVE1MLmNvbnRlbnRCbG9ja3MsXG4gICAgICAgICAgICAgICAgYmxvY2tzRnJvbUhUTUwuZW50aXR5TWFwXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbmV4dFByb3BzLmJsb2dFZGl0LnRpdGxlLFxuICAgICAgICAgICAgICAgIHRleHQ6IG5leHRQcm9wcy5ibG9nRWRpdC50ZXh0LFxuICAgICAgICAgICAgICAgIHB1YmxpYzogbmV4dFByb3BzLmJsb2dFZGl0LnB1YmxpYyxcbiAgICAgICAgICAgICAgICBkYXRlOiBuZXh0UHJvcHMuYmxvZ0VkaXQuZGF0ZSxcbiAgICAgICAgICAgICAgICBlZGl0b3JTdGF0ZTogRWRpdG9yU3RhdGUuY3JlYXRlV2l0aENvbnRlbnQoY29udGVudCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbiAgICBmaWVsZENoYW5nZSAoZSkge1xuICAgICAgICBsZXQgc3RhdGVPYmogPSB7fTtcbiAgICAgICAgbGV0IHZhbCA9IChlLnRhcmdldC5pZCA9PSAncHVibGljJykgPyBlLnRhcmdldC5jaGVja2VkIDogZS50YXJnZXQudmFsdWU7XG4gICAgICAgIHN0YXRlT2JqW2UudGFyZ2V0LmlkXSA9IHZhbDtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZU9iaik7XG4gICAgfVxuXG4gICAgb25FZGl0b3JTdGF0ZUNoYW5nZSAoZWRpdG9yU3RhdGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBlZGl0b3JTdGF0ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgZm9ybVN1Ym1pdCAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCB0ZXh0ID0gZHJhZnRUb0h0bWwoY29udmVydFRvUmF3KHRoaXMuc3RhdGUuZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSkpO1xuXG4gICAgICAgIGlmICh0ZXh0ICYmICh0ZXh0Lmxlbmd0aCA+IDUxMikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnQkxPR19FRElUX0VSUk9SJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ1RleHQgaXMgdG9vIGxvbmchJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChncmFwaHFsKHtcbiAgICAgICAgICAgIHR5cGU6ICdCTE9HX0VESVQnLFxuICAgICAgICAgICAgaWQ6IHRoaXMuc3RhdGUuaWQsXG4gICAgICAgICAgICB0aXRsZTogdGhpcy5zdGF0ZS50aXRsZSxcbiAgICAgICAgICAgIHRleHQ6IGRyYWZ0VG9IdG1sKGNvbnZlcnRUb1Jhdyh0aGlzLnN0YXRlLmVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkpKSxcbiAgICAgICAgICAgIHB1YmxpYzogdGhpcy5zdGF0ZS5wdWJsaWMsXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICByZW5kZXIgKCkge1xuICAgICAgICBsZXQgYWxlcnRPcHRzID0gbnVsbDtcbiAgICBcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuYmxvZ0VkaXQuc3RhdHVzID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICBhbGVydE9wdHMgPSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnZGFuZ2VyJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnByb3BzLmJsb2dFZGl0LmVycm9yIHx8ICdFcnJvciwgd3JvbmcgYmxvZyBkYXRhJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuYmxvZ0VkaXQuc3RhdHVzID09PSAnc2VuZCcpIHtcbiAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdpbmZvJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiAnTG9hZGluZywgcGxlYXNlIHdhaXQnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuYmxvZ0VkaXQuc3RhdHVzID09PSAnc3VjY2Vzc19lZGl0Jykge1xuICAgICAgICAgICAgYWxlcnRPcHRzID0ge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdCbG9nIHNhdmVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSAnL2Jsb2ctZWRpdC8nICsgdGhpcy5wcm9wcy5ibG9nRWRpdC5pZDtcbiAgICAgICAgICAgIH0sIDEwMDApXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPGRpdj5cbiAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXs6OnRoaXMuZm9ybVN1Ym1pdH0gPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInRpdGxlXCI+VGl0bGU8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJ0aXRsZVwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUaXRsZVwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9ezo6dGhpcy5maWVsZENoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnRpdGxlfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInRleHRcIj5UZXh0PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPEVkaXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yU3RhdGU9e3RoaXMuc3RhdGUuZWRpdG9yU3RhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3JDbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25FZGl0b3JTdGF0ZUNoYW5nZT17Ojp0aGlzLm9uRWRpdG9yU3RhdGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFyPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogWydpbmxpbmUnLCAnbGlzdCcsICdmb250U2l6ZScsICdmb250RmFtaWx5JywgJ3RleHRBbGlnbicsICdsaW5rJywgJ2hpc3RvcnknLCAnY29sb3JQaWNrZXInXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNoZWNrYm94XCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ncHVibGljJyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17Ojp0aGlzLmZpZWxkQ2hhbmdlfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkID0geyEhIHRoaXMuc3RhdGUucHVibGljfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz4gUHVibGljXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8QWxlcnRNZXNzYWdlIG9wdHM9e2FsZXJ0T3B0c30gLz5cblxuICAgICAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAgICAgIDxkaXYgPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nZ2x5cGhpY29uIGdseXBoaWNvbi1mbG9wcHktZGlzayc+PC9zcGFuPiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgU2F2ZVxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XG4gICAgcmV0dXJuIHsuLi5zdGF0ZX1cbn1cbkVkaXRDb21wID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKEVkaXRDb21wKVxuZXhwb3J0IGRlZmF1bHQgRWRpdENvbXBcbiovXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3RhdGljX3NyYy9wb3N0L0VkaXRDb21wLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==