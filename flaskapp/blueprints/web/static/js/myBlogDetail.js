webpackJsonp([5],{361:function(e,t,a){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}var s=a(1),r=l(s),n=a(10),o=a(7);a(16),a(17);var i=a(8),c=a(362),p=l(c),u=a(18),d=l(u),f=a(363),m=l(f),g=a(19),h=(0,g.configureStore)({auth:d.default,myPostList:m.default}),b=(0,i.layout)({comp:p.default,forAuth:!0});(0,n.render)(r.default.createElement(o.Provider,{store:h},r.default.createElement(b,null)),document.getElementById("root"))},362:function(e,t,a){"use strict";function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var l in a)Object.prototype.hasOwnProperty.call(a,l)&&(e[l]=a[l])}return e},o=function(){function e(e,t){for(var a=0;a<t.length;a++){var l=t[a];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,a,l){return a&&e(t.prototype,a),l&&e(t,l),t}}(),i=a(1),c=function(e){return e&&e.__esModule?e:{default:e}}(i),p=a(7),u=a(21),d=a(29),f=a(8),m=function(e){function t(){return l(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,e),o(t,[{key:"render",value:function(){var e=this,t=null;if(this.props.blog){var a=function(t){return t.preventDefault(),e.props.publicBlog({id:e.props.blog.id,public:!e.props.blog.public})},l=null;l=this.props.blog.public?c.default.createElement("btn",{className:"btn btn-default",onClick:a,"data-id":this.props.blog.id},c.default.createElement("span",{className:"glyphicon glyphicon-remove"}),"  hide"):c.default.createElement("btn",{className:"btn btn-default",onClick:a,"data-id":this.props.blog.id},c.default.createElement("span",{className:"glyphicon glyphicon-ok"}),"  show"),t=c.default.createElement("div",{className:"panel panel-default"},c.default.createElement("div",{className:"panel-heading"},c.default.createElement("h4",{className:"panel-title"},this.props.blog.title)),c.default.createElement("div",{className:"panel-body"},c.default.createElement("div",{dangerouslySetInnerHTML:{__html:this.props.blog.text}})),c.default.createElement("div",{className:"panel-footer"},c.default.createElement("p",null,c.default.createElement("span",{className:"glyphicon glyphicon-user"})," ",this.props.blog.userName," | ",c.default.createElement("span",{className:"glyphicon glyphicon-time"})," ",this.props.blog.date),c.default.createElement("p",null,c.default.createElement("a",{href:"/blog-edit/"+this.props.blog.id,className:"btn btn-default"},c.default.createElement("span",{className:"glyphicon glyphicon-pencil"}),"  edit")," ",l," ",c.default.createElement("a",{href:"/post-edit/"+this.props.blog.id+"/-1",className:"btn btn-default"},c.default.createElement("span",{className:"glyphicon glyphicon-plus"}),"  Add post"))))}return t}}]),t}(c.default.Component),g=function(e){function t(e){l(this,t);var a=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={start:a.props.myPostList.start,blog:a.props.myPostList.blog,posts:a.props.myPostList.posts},a}return r(t,e),o(t,[{key:"componentWillMount",value:function(){this.changePage()}},{key:"changePage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.props.dispatch((0,u.graphql)({type:"MY_BLOG_DETAIL",start:e,perpage:this.props.myPostList.perpage,blogId:this.props.myPostList.blogId}))}},{key:"publicBlog",value:function(e){this.props.dispatch((0,u.graphql)({type:"MY_BLOG_PUBLIC",id:e.id,public:e.public}))}},{key:"getPostItems",value:function(){var e=this;if(!e.props.myPostList.posts||!e.props.myPostList.posts.length)return null;var t=(0,d.chunk)(this.props.myPostList.posts,3);return(0,d.map)(t,function(t){var a=(0,d.map)(t,function(t){return c.default.createElement("div",{className:"col-md-4"},c.default.createElement("div",{className:"panel panel-default"},c.default.createElement("div",{className:"panel-heading"},c.default.createElement("h4",{className:"panel-title"},c.default.createElement("a",{href:"/post-edit/"+e.props.myPostList.blog.id+"/"+t.id},t.title))),c.default.createElement("div",{className:"panel-body"},t.description),c.default.createElement("div",{className:"panel-footer"},c.default.createElement("p",null,c.default.createElement("span",{className:"glyphicon glyphicon-user"})," ",t.userName),c.default.createElement("p",null,c.default.createElement("span",{className:"glyphicon glyphicon-time"})," ",t.date))))});return c.default.createElement("div",{className:"row"},a)})}},{key:"render",value:function(){var e=null;"error"===this.props.myPostList.status?e={className:"danger",text:this.props.myPostList.error}:"send"===this.props.status&&(e={className:"info",text:"Loading, please wait"});var t={start:this.props.myPostList.start,perpage:this.props.myPostList.perpage,count:this.props.myPostList.count,items:this.getPostItems(),changePage:this.changePage.bind(this)};return c.default.createElement("div",null,c.default.createElement(f.AlertMessage,{opts:e}),c.default.createElement("ol",{className:"breadcrumb"},c.default.createElement("li",null,c.default.createElement("a",{href:"/my-blogs"},"My blogs")),c.default.createElement("li",{className:"active"},this.props.myPostList.blog?this.props.myPostList.blog.title:null)),c.default.createElement(m,{blog:this.props.myPostList.blog,publicBlog:this.publicBlog.bind(this)}),c.default.createElement(f.PaginatorLayout,{param:t}))}}]),t}(c.default.Component),h=function(e){return n({},e)};g=(0,p.connect)(h)(g),t.default=g},363:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var l in a)Object.prototype.hasOwnProperty.call(a,l)&&(e[l]=a[l])}return e},s=(a(29),{blogId:window.localParams.blogId?parseInt(window.localParams.blogId):null,start:window.localParams.start?parseInt(window.localParams.start):0,perpage:window.localParams.perpage?parseInt(window.localParams.perpage):9,count:0,blog:null,posts:[],status:null}),r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s,t=arguments[1],a=l({},e);switch(t.type){case"MY_BLOG_DETAIL_SEND":return a.start=t.start,a.status="send",a;case"MY_BLOG_DETAIL_SUCCESS":return a.status="success",a.count=t.data.getMyBlogDetail.count,a.blog=t.data.getMyBlogDetail.blog,a.posts=t.data.getMyBlogDetail.posts,a;case"MY_BLOG_DETAIL_ERROR":return a.status="error",a.error=t.error,a;case"MY_BLOG_PUBLIC_SEND":return a.start=t.start,a.status="send",a;case"MY_BLOG_PUBLIC_SUCCESS":return a.status="success",a.blog.public=t.data.publicMyBlog.public,console.log("action.data.publicMyBlog",t.data.publicMyBlog),a;case"MY_BLOG_PUBLIC_ERROR":return a.status="error",a.error=t.error,a;default:return e}};t.default=r}},[361]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,