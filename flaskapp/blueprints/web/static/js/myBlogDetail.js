webpackJsonp([2],{328:function(e,t,a){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}var s=a(2),r=l(s),n=a(11),o=a(8);a(21),a(22);var i=a(9),c=a(329),p=l(c),u=a(23),d=l(u),f=a(330),m=l(f),g=a(24),h=(0,g.configureStore)({auth:d.default,myPostList:m.default}),b=(0,i.layout)({comp:p.default,forAuth:!0});(0,n.render)(r.default.createElement(o.Provider,{store:h},r.default.createElement(b,null)),document.getElementById("root"))},329:function(e,t,a){"use strict";function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var l in a)Object.prototype.hasOwnProperty.call(a,l)&&(e[l]=a[l])}return e},o=function(){function e(e,t){for(var a=0;a<t.length;a++){var l=t[a];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}return function(t,a,l){return a&&e(t.prototype,a),l&&e(t,l),t}}(),i=a(2),c=function(e){return e&&e.__esModule?e:{default:e}}(i),p=a(8),u=a(28),d=a(32),f=a(9),m=function(e){function t(){return l(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,e),o(t,[{key:"render",value:function(){var e=this,t=null;if(this.props.blog){var a=function(t){return t.preventDefault(),e.props.publicBlog({id:e.props.blog.id,public:!e.props.blog.public})},l=null;l=this.props.blog.public?c.default.createElement("btn",{className:"btn btn-default",onClick:a,"data-id":this.props.blog.id},c.default.createElement("span",{className:"glyphicon glyphicon-remove"}),"  hide"):c.default.createElement("btn",{className:"btn btn-default",onClick:a,"data-id":this.props.blog.id},c.default.createElement("span",{className:"glyphicon glyphicon-ok"}),"  show"),t=c.default.createElement("div",{className:"panel panel-default"},c.default.createElement("div",{className:"panel-heading"},c.default.createElement("h4",{className:"panel-title"},this.props.blog.title)),c.default.createElement("div",{className:"panel-body"},c.default.createElement("div",{dangerouslySetInnerHTML:{__html:this.props.blog.text}})),c.default.createElement("div",{className:"panel-footer"},c.default.createElement("p",null,c.default.createElement("span",{className:"glyphicon glyphicon-user"})," ",this.props.blog.userName," | ",c.default.createElement("span",{className:"glyphicon glyphicon-calendar"})," ",this.props.blog.date),c.default.createElement("p",null,c.default.createElement("a",{href:"/blog-edit/"+this.props.blog.id,className:"btn btn-default"},c.default.createElement("span",{className:"glyphicon glyphicon-pencil"}),"  edit")," ",l," ",c.default.createElement("a",{href:"/post-edit/"+this.props.blog.id+"/-1",className:"btn btn-default"},c.default.createElement("span",{className:"glyphicon glyphicon-plus"}),"  Add post"))))}return t}}]),t}(c.default.Component),g=function(e){function t(e){l(this,t);var a=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={start:a.props.myPostList.start,blog:a.props.myPostList.blog,posts:a.props.myPostList.posts},a}return r(t,e),o(t,[{key:"componentWillMount",value:function(){this.changePage()}},{key:"changePage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.props.dispatch((0,u.graphql)({type:"MY_BLOG_DETAIL",start:e,perpage:this.props.myPostList.perpage,blogId:this.props.myPostList.blogId}))}},{key:"publicBlog",value:function(e){this.props.dispatch((0,u.graphql)({type:"MY_BLOG_PUBLIC",id:e.id,public:e.public}))}},{key:"getPostItems",value:function(){var e=this;if(!e.props.myPostList.posts||!e.props.myPostList.posts.length)return null;var t=(0,d.chunk)(this.props.myPostList.posts,3);return(0,d.map)(t,function(t){var a=(0,d.map)(t,function(t){return c.default.createElement("div",{className:"col-md-4"},c.default.createElement("div",{className:"panel panel-default"},c.default.createElement("div",{className:"panel-heading"},c.default.createElement("h4",{className:"panel-title"},c.default.createElement("a",{href:"/post-edit/"+e.props.myPostList.blog.id+"/"+t.id},t.title))),c.default.createElement("div",{className:"panel-body"},t.description),c.default.createElement("div",{className:"panel-footer"},c.default.createElement("p",null,c.default.createElement("span",{className:"glyphicon glyphicon-user"})," ",t.userName),c.default.createElement("p",null,c.default.createElement("span",{className:"glyphicon glyphicon-calendar"})," ",t.date))))});return c.default.createElement("div",{className:"row"},a)})}},{key:"render",value:function(){var e=null;"error"===this.props.myPostList.status?e={className:"danger",text:this.props.myPostList.error}:"send"===this.props.status&&(e={className:"info",text:"Loading, please wait"});var t={start:this.props.myPostList.start,perpage:this.props.myPostList.perpage,count:this.props.myPostList.count,items:this.getPostItems(),changePage:this.changePage.bind(this)};return c.default.createElement("div",null,c.default.createElement(f.AlertMessage,{opts:e}),c.default.createElement("ol",{className:"breadcrumb"},c.default.createElement("li",null,c.default.createElement("a",{href:"/my-blog-list"},"My blogs")),c.default.createElement("li",{className:"active"},this.props.myPostList.blog?this.props.myPostList.blog.title:null)),c.default.createElement(m,{blog:this.props.myPostList.blog,publicBlog:this.publicBlog.bind(this)}),c.default.createElement(f.PaginatorLayout,{param:t}))}}]),t}(c.default.Component),h=function(e){return n({},e)};g=(0,p.connect)(h)(g),t.default=g},330:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var l in a)Object.prototype.hasOwnProperty.call(a,l)&&(e[l]=a[l])}return e},s=(a(32),{blogId:window.localParams.blogId?parseInt(window.localParams.blogId):null,start:window.localParams.start?parseInt(window.localParams.start):0,perpage:window.localParams.perpage?parseInt(window.localParams.perpage):9,count:0,blog:null,posts:[],status:null}),r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s,t=arguments[1],a=l({},e);switch(t.type){case"MY_BLOG_DETAIL_SEND":return a.start=t.start,a.status="send",a;case"MY_BLOG_DETAIL_SUCCESS":return a.status="success",a.count=t.data.getMyBlogDetail.count,a.blog=t.data.getMyBlogDetail.blog,a.posts=t.data.getMyBlogDetail.posts,a;case"MY_BLOG_DETAIL_ERROR":return a.status="error",a.error=t.error,a;case"MY_BLOG_PUBLIC_SEND":return a.start=t.start,a.status="send",a;case"MY_BLOG_PUBLIC_SUCCESS":return a.status="success",a.blog.public=t.data.publicMyBlog.public,console.log("action.data.publicMyBlog",t.data.publicMyBlog),a;case"MY_BLOG_PUBLIC_ERROR":return a.status="error",a.error=t.error,a;default:return e}};t.default=r}},[328]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbXlCbG9nRGV0YWlsLmpzIiwid2VicGFjazovLy8uL3N0YXRpY19zcmMvbXlCbG9nRGV0YWlsLmpzIiwid2VicGFjazovLy8uL3N0YXRpY19zcmMvcG9zdC9NeUxpc3RDb21wLmpzIiwid2VicGFjazovLy8uL3N0YXRpY19zcmMvcG9zdC9NeUxpc3RSZWQuanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wIiwiMzI4IiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX3JlYWN0RG9tIiwiX3JlYWN0UmVkdXgiLCJfY29tcG9uZW50IiwiX015TGlzdENvbXAiLCJfTXlMaXN0Q29tcDIiLCJfTG9naW5SZWQiLCJfTG9naW5SZWQyIiwiX015TGlzdFJlZCIsIl9NeUxpc3RSZWQyIiwiX2NvbmZpZ3VyZVN0b3JlIiwic3RvcmUiLCJjb25maWd1cmVTdG9yZSIsImF1dGgiLCJteVBvc3RMaXN0IiwiQ29tcCIsImxheW91dCIsImNvbXAiLCJNeUxpc3RDb21wIiwiZm9yQXV0aCIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCIzMjkiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiY2FsbCIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZGVmaW5lUHJvcGVydHkiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfYWN0aW9uIiwiX2xvZGFzaCIsIkJsb2dDb21wIiwiX1JlYWN0JENvbXBvbmVudCIsInRoaXMiLCJnZXRQcm90b3R5cGVPZiIsImFwcGx5IiwidHBsIiwiYmxvZyIsInB1YkJsb2ciLCJlIiwicHJldmVudERlZmF1bHQiLCJwdWJsaWNCbG9nIiwiaWQiLCJwdWJsaWMiLCJoaWRlQnRuIiwiY2xhc3NOYW1lIiwib25DbGljayIsImRhdGEtaWQiLCJ0aXRsZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwidGV4dCIsInVzZXJOYW1lIiwiZGF0ZSIsImhyZWYiLCJSZWFjdCIsIkNvbXBvbmVudCIsIl9SZWFjdCRDb21wb25lbnQyIiwiX3RoaXMyIiwic3RhdGUiLCJzdGFydCIsInBvc3RzIiwiY2hhbmdlUGFnZSIsInVuZGVmaW5lZCIsImRpc3BhdGNoIiwiZ3JhcGhxbCIsInR5cGUiLCJwZXJwYWdlIiwiYmxvZ0lkIiwicCIsImNodW5rZWRJdGVtcyIsImNodW5rIiwibWFwIiwicGFydGl0aW9uIiwicG9zdCIsImRlc2NyaXB0aW9uIiwiYWxlcnRPcHRzIiwic3RhdHVzIiwiZXJyb3IiLCJwYWdlclBhcmFtIiwiY291bnQiLCJpdGVtcyIsImdldFBvc3RJdGVtcyIsImJpbmQiLCJBbGVydE1lc3NhZ2UiLCJvcHRzIiwiUGFnaW5hdG9yTGF5b3V0IiwicGFyYW0iLCJtYXBTdGF0ZVRvUHJvcHMiLCJjb25uZWN0IiwiMzMwIiwiaW5pdFN0YXRlIiwid2luZG93IiwibG9jYWxQYXJhbXMiLCJwYXJzZUludCIsImFjdGlvbiIsImRhdGEiLCJnZXRNeUJsb2dE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QnlFLEVBQVdJLEVBQVc3RSxVQUFBLEdBQzFDOEUsT0FBV3JDLEVBQ2YsUUFBUW9DLEVBQU83QixNQUNYLElBQUssc0JBR0QsTUFGQThCLEdBQUtwQyxNQUFRbUMsRUFBT25DLE1BQ3BCb0MsRUFBS25CLE9BQVMsT0FDUG1CLENBQ1gsS0FBSyx5QkFNRCxNQUxBQSxHQUFLbkIsT0FBUyxVQUNkbUIsRUFBS2hCLE1BQVFlLEVBQU9DLEtBQUtDLGdCQUFnQmpCLE1BQ3pDZ0IsRUFBSzNELEtBQU8wRCxFQUFPQyxLQUFLQyxnQkFBZ0I1RCxLQUN4QzJELEVBQUtuQyxNQUFRa0MsRUFBT0MsS0FBS0MsZ0JBQWdCcEMsTUFFbENtQyxDQUNYLEtBQUssdUJBR0QsTUFGQUEsR0FBS25CLE9BQVMsUUFDZG1CLEVBQUtsQixNQUFRaUIsRUFBT2pCLE1BQ2JrQixDQUdYLEtBQUssc0JBR0QsTUFGQUEsR0FBS3BDLE1BQVFtQyxFQUFPbkMsTUFDcEJvQyxFQUFLbkIsT0FBUyxPQUNQbUIsQ0FDWCxLQUFLLHlCQVFELE1BUEFBLEdBQUtuQixPQUFTLFVBQ2RtQixFQUFLM0QsS0FBS00sT0FBU29ELEVBQU9DLEtBQUtFLGFBQWF2RCxPQUU1Q3dELFFBQVFDLElBQ0osMkJBQTRCTCxFQUFPQyxLQUFLRSxjQUdyQ0YsQ0FDWCxLQUFLLHVCQUdELE1BRkFBLEdBQUtuQixPQUFTLFFBQ2RtQixFQUFLbEIsTUFBUWlCLEVBQU9qQixNQUNia0IsQ0FFWCxTQUNJLE1BQU9yQyxJSDZYbkJwRyxHQUFRSyxRRzFYT2dCLEtIc2JaIiwiZmlsZSI6Im15QmxvZ0RldGFpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIndlYnBhY2tKc29ucChbMl0se1xuXG4vKioqLyAzMjg6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG52YXIgX3JlYWN0UmVkdXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cbnZhciBfY29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxudmFyIF9NeUxpc3RDb21wID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMjkpO1xuXG52YXIgX015TGlzdENvbXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTXlMaXN0Q29tcCk7XG5cbnZhciBfTG9naW5SZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblxudmFyIF9Mb2dpblJlZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2dpblJlZCk7XG5cbnZhciBfTXlMaXN0UmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMzApO1xuXG52YXIgX015TGlzdFJlZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NeUxpc3RSZWQpO1xuXG52YXIgX2NvbmZpZ3VyZVN0b3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzdG9yZSA9ICgwLCBfY29uZmlndXJlU3RvcmUuY29uZmlndXJlU3RvcmUpKHtcblx0YXV0aDogX0xvZ2luUmVkMi5kZWZhdWx0LFxuXHRteVBvc3RMaXN0OiBfTXlMaXN0UmVkMi5kZWZhdWx0XG59KTtcblxudmFyIENvbXAgPSAoMCwgX2NvbXBvbmVudC5sYXlvdXQpKHsgY29tcDogX015TGlzdENvbXAyLmRlZmF1bHQsIGZvckF1dGg6IHRydWUgfSk7XG4oMCwgX3JlYWN0RG9tLnJlbmRlcikoX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdF9yZWFjdFJlZHV4LlByb3ZpZGVyLFxuXHR7IHN0b3JlOiBzdG9yZSB9LFxuXHRfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wLCBudWxsKVxuKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMjk6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0UmVkdXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX2FjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xuXG52YXIgX2xvZGFzaCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xuXG52YXIgX2NvbXBvbmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEJsb2dDb21wID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQmxvZ0NvbXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gQmxvZ0NvbXAoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbG9nQ29tcCk7XG5cbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChCbG9nQ29tcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2dDb21wKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEJsb2dDb21wLCBbe1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHRwbCA9IG51bGw7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5ibG9nKSB7XG4gICAgICAgICAgICAgICAgdmFyIHB1YkJsb2cgPSBmdW5jdGlvbiBwdWJCbG9nKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5wcm9wcy5wdWJsaWNCbG9nKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBzZWxmLnByb3BzLmJsb2cuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWM6ICFzZWxmLnByb3BzLmJsb2cucHVibGljXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgaGlkZUJ0biA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5ibG9nLnB1YmxpYykge1xuICAgICAgICAgICAgICAgICAgICBoaWRlQnRuID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnYnRuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnYnRuIGJ0bi1kZWZhdWx0Jywgb25DbGljazogcHViQmxvZywgJ2RhdGEtaWQnOiB0aGlzLnByb3BzLmJsb2cuaWQgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6ICdnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZScgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFx4QTAgaGlkZSdcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBoaWRlQnRuID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnYnRuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnYnRuIGJ0bi1kZWZhdWx0Jywgb25DbGljazogcHViQmxvZywgJ2RhdGEtaWQnOiB0aGlzLnByb3BzLmJsb2cuaWQgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6ICdnbHlwaGljb24gZ2x5cGhpY29uLW9rJyB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdcXHhBMCBzaG93J1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRwbCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbCBwYW5lbC1kZWZhdWx0JyB9LFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbC1oZWFkaW5nJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2g0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3BhbmVsLXRpdGxlJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuYmxvZy50aXRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbC1ib2R5JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiB0aGlzLnByb3BzLmJsb2cudGV4dCB9IH0pXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3BhbmVsLWZvb3RlcicgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6ICdnbHlwaGljb24gZ2x5cGhpY29uLXVzZXInIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXHhBMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5ibG9nLnVzZXJOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXHhBMHxcXHhBMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogJ2dseXBoaWNvbiBnbHlwaGljb24tY2FsZW5kYXInIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXHhBMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5ibG9nLmRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2EnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGhyZWY6IFwiL2Jsb2ctZWRpdC9cIiArIHRoaXMucHJvcHMuYmxvZy5pZCwgY2xhc3NOYW1lOiAnYnRuIGJ0bi1kZWZhdWx0JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1wZW5jaWwnIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXFx4QTAgZWRpdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXHhBMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZUJ0bixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXFx4QTAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgaHJlZjogXCIvcG9zdC1lZGl0L1wiICsgdGhpcy5wcm9wcy5ibG9nLmlkICsgXCIvLTFcIiwgY2xhc3NOYW1lOiAnYnRuIGJ0bi1kZWZhdWx0JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzJyB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xceEEwIEFkZCBwb3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHBsO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJsb2dDb21wO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxudmFyIE15TGlzdENvbXAgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHMoTXlMaXN0Q29tcCwgX1JlYWN0JENvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gTXlMaXN0Q29tcChwcm9wcykge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTXlMaXN0Q29tcCk7XG5cbiAgICAgICAgdmFyIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNeUxpc3RDb21wLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTXlMaXN0Q29tcCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgICAgICBzdGFydDogX3RoaXMyLnByb3BzLm15UG9zdExpc3Quc3RhcnQsXG4gICAgICAgICAgICBibG9nOiBfdGhpczIucHJvcHMubXlQb3N0TGlzdC5ibG9nLFxuICAgICAgICAgICAgcG9zdHM6IF90aGlzMi5wcm9wcy5teVBvc3RMaXN0LnBvc3RzXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKE15TGlzdENvbXAsIFt7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxNb3VudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZVBhZ2UoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2hhbmdlUGFnZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VQYWdlKCkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXG4gICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKCgwLCBfYWN0aW9uLmdyYXBocWwpKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnTVlfQkxPR19ERVRBSUwnLFxuICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgICAgICBwZXJwYWdlOiB0aGlzLnByb3BzLm15UG9zdExpc3QucGVycGFnZSxcbiAgICAgICAgICAgICAgICBibG9nSWQ6IHRoaXMucHJvcHMubXlQb3N0TGlzdC5ibG9nSWRcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtYWtlIHRoZSBibG9nIHB1YmxpYyBvciBoaWRkZW5cbiAgICAgICAgICogQHBhcmFtICB7TnVtYmVyfSBwLmlkIGlkIG9mIGJsb2dcbiAgICAgICAgICogQHBhcmFtICB7Qm9vbGVhbn0gcC5wdWJsaWMgdHJ1ZSAtIHNob3cgYmxvZywgZmFsc2UgLSBoaWRlIGJsb2dcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3B1YmxpY0Jsb2cnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHVibGljQmxvZyhwKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKCgwLCBfYWN0aW9uLmdyYXBocWwpKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnTVlfQkxPR19QVUJMSUMnLFxuICAgICAgICAgICAgICAgIGlkOiBwLmlkLFxuICAgICAgICAgICAgICAgIHB1YmxpYzogcC5wdWJsaWNcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0UG9zdEl0ZW1zJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBvc3RJdGVtcygpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGlmICghc2VsZi5wcm9wcy5teVBvc3RMaXN0LnBvc3RzIHx8ICFzZWxmLnByb3BzLm15UG9zdExpc3QucG9zdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjaHVua2VkSXRlbXMgPSAoMCwgX2xvZGFzaC5jaHVuaykodGhpcy5wcm9wcy5teVBvc3RMaXN0LnBvc3RzLCAzKTtcbiAgICAgICAgICAgIHZhciBwb3N0cyA9ICgwLCBfbG9kYXNoLm1hcCkoY2h1bmtlZEl0ZW1zLCBmdW5jdGlvbiAocG9zdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFydGl0aW9uID0gKDAsIF9sb2Rhc2gubWFwKShwb3N0cywgZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NvbC1tZC00JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbCBwYW5lbC1kZWZhdWx0JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbC1oZWFkaW5nJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoNCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3BhbmVsLXRpdGxlJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2EnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgaHJlZjogXCIvcG9zdC1lZGl0L1wiICsgc2VsZi5wcm9wcy5teVBvc3RMaXN0LmJsb2cuaWQgKyBcIi9cIiArIHBvc3QuaWQgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0LnRpdGxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbC1ib2R5JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0LmRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFuZWwtZm9vdGVyJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnZ2x5cGhpY29uIGdseXBoaWNvbi11c2VyJyB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXHhBMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0LnVzZXJOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3AnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6ICdnbHlwaGljb24gZ2x5cGhpY29uLWNhbGVuZGFyJyB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXHhBMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0LmRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3JvdycgfSxcbiAgICAgICAgICAgICAgICAgICAgcGFydGl0aW9uXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIGFsZXJ0T3B0cyA9IG51bGwsXG4gICAgICAgICAgICAgICAgcG9zdHMgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5teVBvc3RMaXN0LnN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnZGFuZ2VyJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGhpcy5wcm9wcy5teVBvc3RMaXN0LmVycm9yXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5zdGF0dXMgPT09ICdzZW5kJykge1xuICAgICAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnaW5mbycsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdMb2FkaW5nLCBwbGVhc2Ugd2FpdCdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcGFnZXJQYXJhbSA9IHtcbiAgICAgICAgICAgICAgICBzdGFydDogdGhpcy5wcm9wcy5teVBvc3RMaXN0LnN0YXJ0LFxuICAgICAgICAgICAgICAgIHBlcnBhZ2U6IHRoaXMucHJvcHMubXlQb3N0TGlzdC5wZXJwYWdlLFxuICAgICAgICAgICAgICAgIGNvdW50OiB0aGlzLnByb3BzLm15UG9zdExpc3QuY291bnQsXG4gICAgICAgICAgICAgICAgaXRlbXM6IHRoaXMuZ2V0UG9zdEl0ZW1zKCksXG4gICAgICAgICAgICAgICAgY2hhbmdlUGFnZTogdGhpcy5jaGFuZ2VQYWdlLmJpbmQodGhpcylcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnQuQWxlcnRNZXNzYWdlLCB7IG9wdHM6IGFsZXJ0T3B0cyB9KSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ29sJyxcbiAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdicmVhZGNydW1iJyB9LFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2EnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgaHJlZjogJy9teS1ibG9nLWxpc3QnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ015IGJsb2dzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2FjdGl2ZScgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMubXlQb3N0TGlzdC5ibG9nID8gdGhpcy5wcm9wcy5teVBvc3RMaXN0LmJsb2cudGl0bGUgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEJsb2dDb21wLCB7IGJsb2c6IHRoaXMucHJvcHMubXlQb3N0TGlzdC5ibG9nLCBwdWJsaWNCbG9nOiB0aGlzLnB1YmxpY0Jsb2cuYmluZCh0aGlzKSB9KSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tcG9uZW50LlBhZ2luYXRvckxheW91dCwgeyBwYXJhbTogcGFnZXJQYXJhbSB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNeUxpc3RDb21wO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxudmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUpO1xufTtcbk15TGlzdENvbXAgPSAoMCwgX3JlYWN0UmVkdXguY29ubmVjdCkobWFwU3RhdGVUb1Byb3BzKShNeUxpc3RDb21wKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTXlMaXN0Q29tcDtcblxuLyoqKi8gfSksXG5cbi8qKiovIDMzMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2xvZGFzaCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xuXG52YXIgaW5pdFN0YXRlID0ge1xuICAgIGJsb2dJZDogd2luZG93LmxvY2FsUGFyYW1zLmJsb2dJZCA/IHBhcnNlSW50KHdpbmRvdy5sb2NhbFBhcmFtcy5ibG9nSWQpIDogbnVsbCxcbiAgICBzdGFydDogd2luZG93LmxvY2FsUGFyYW1zLnN0YXJ0ID8gcGFyc2VJbnQod2luZG93LmxvY2FsUGFyYW1zLnN0YXJ0KSA6IDAsXG4gICAgcGVycGFnZTogd2luZG93LmxvY2FsUGFyYW1zLnBlcnBhZ2UgPyBwYXJzZUludCh3aW5kb3cubG9jYWxQYXJhbXMucGVycGFnZSkgOiA5LFxuICAgIGNvdW50OiAwLFxuICAgIGJsb2c6IG51bGwsXG4gICAgcG9zdHM6IFtdLFxuICAgIHN0YXR1czogbnVsbFxufTtcblxudmFyIG15UG9zdExpc3QgPSBmdW5jdGlvbiBteVBvc3RMaXN0KCkge1xuICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogaW5pdFN0YXRlO1xuICAgIHZhciBhY3Rpb24gPSBhcmd1bWVudHNbMV07XG5cbiAgICB2YXIgZGF0YSA9IF9leHRlbmRzKHt9LCBzdGF0ZSk7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdNWV9CTE9HX0RFVEFJTF9TRU5EJzpcbiAgICAgICAgICAgIGRhdGEuc3RhcnQgPSBhY3Rpb24uc3RhcnQ7XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdzZW5kJztcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICBjYXNlICdNWV9CTE9HX0RFVEFJTF9TVUNDRVNTJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgICAgICAgICAgZGF0YS5jb3VudCA9IGFjdGlvbi5kYXRhLmdldE15QmxvZ0RldGFpbC5jb3VudDtcbiAgICAgICAgICAgIGRhdGEuYmxvZyA9IGFjdGlvbi5kYXRhLmdldE15QmxvZ0RldGFpbC5ibG9nO1xuICAgICAgICAgICAgZGF0YS5wb3N0cyA9IGFjdGlvbi5kYXRhLmdldE15QmxvZ0RldGFpbC5wb3N0cztcblxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ01ZX0JMT0dfREVUQUlMX0VSUk9SJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ2Vycm9yJztcbiAgICAgICAgICAgIGRhdGEuZXJyb3IgPSBhY3Rpb24uZXJyb3I7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcblxuICAgICAgICBjYXNlICdNWV9CTE9HX1BVQkxJQ19TRU5EJzpcbiAgICAgICAgICAgIGRhdGEuc3RhcnQgPSBhY3Rpb24uc3RhcnQ7XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdzZW5kJztcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICBjYXNlICdNWV9CTE9HX1BVQkxJQ19TVUNDRVNTJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgICAgICAgICAgZGF0YS5ibG9nLnB1YmxpYyA9IGFjdGlvbi5kYXRhLnB1YmxpY015QmxvZy5wdWJsaWM7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhY3Rpb24uZGF0YS5wdWJsaWNNeUJsb2cnLCBhY3Rpb24uZGF0YS5wdWJsaWNNeUJsb2cpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgY2FzZSAnTVlfQkxPR19QVUJMSUNfRVJST1InOlxuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnZXJyb3InO1xuICAgICAgICAgICAgZGF0YS5lcnJvciA9IGFjdGlvbi5lcnJvcjtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IG15UG9zdExpc3Q7XG5cbi8qXG5cbmxldCBpbml0U3RhdGUgPSB7XG4gICAgdXNlcklkOiB3aW5kb3cubG9jYWxQYXJhbXMudXNlcklkID8gcGFyc2VJbnQod2luZG93LmxvY2FsUGFyYW1zLnVzZXJJZCkgOiBudWxsLFxuICAgIHN0YXJ0OiB3aW5kb3cubG9jYWxQYXJhbXMuc3RhcnQgPyBwYXJzZUludCh3aW5kb3cubG9jYWxQYXJhbXMuc3RhcnQpIDogMCxcbiAgICBwZXJwYWdlOiB3aW5kb3cubG9jYWxQYXJhbXMucGVycGFnZSA/IHBhcnNlSW50KHdpbmRvdy5sb2NhbFBhcmFtcy5wZXJwYWdlKSA6IDksXG4gICAgYmxvZ3M6IFtdLFxuICAgIGNvdW50OiAwLFxuICAgIHN0YXR1czogbnVsbCxcbn07XG5cbmNvbnN0IG15QmxvZ0xpc3QgPSAoc3RhdGUgPSBpbml0U3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGxldCBkYXRhID0gey4uLnN0YXRlfTtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ01ZX0JMT0dfREVUQUlMX1NFTkQnOlxuICAgICAgICAgICAgZGF0YS5zdGFydCA9IGFjdGlvbi5zdGFydDtcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3NlbmQnO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ01ZX0JMT0dfREVUQUlMX1NVQ0NFU1MnOlxuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnc3VjY2Vzcyc7XG4gICAgICAgICAgICBkYXRhLmJsb2dzID0gYWN0aW9uLmRhdGEuZ2V0TXlCbG9nTGlzdC5ibG9ncztcbiAgICAgICAgICAgIGRhdGEuY291bnQgPSBhY3Rpb24uZGF0YS5nZXRNeUJsb2dMaXN0LmNvdW50O1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ01ZX0JMT0dfREVUQUlMX0VSUk9SJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ2Vycm9yJztcbiAgICAgICAgICAgIGRhdGEuZXJyb3IgPSBhY3Rpb24uZXJyb3I7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcblxuICAgICAgICBjYXNlICdNWV9QT1NUX1BVQkxJQ19TRU5EJzpcbiAgICAgICAgICAgIGRhdGEuc3RhcnQgPSBhY3Rpb24uc3RhcnQ7XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdzZW5kJztcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICBjYXNlICdNWV9QT1NUX1BVQkxJQ19TVUNDRVNTJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgICAgICAgICAgZm9yRWFjaChkYXRhLmJsb2dzLCAoYmxvZykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChibG9nLmlkID09IGFjdGlvbi5kYXRhLnB1YmxpY015QmxvZy5pZCkge1xuICAgICAgICAgICAgICAgICAgICBibG9nLnB1YmxpYyA9IGFjdGlvbi5kYXRhLnB1YmxpY015QmxvZy5wdWJsaWM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ01ZX1BPU1RfUFVCTElDX0VSUk9SJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ2Vycm9yJztcbiAgICAgICAgICAgIGRhdGEuZXJyb3IgPSBhY3Rpb24uZXJyb3I7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBteUJsb2dMaXN0XG5cbiovXG5cbi8qKiovIH0pXG5cbn0sWzMyOF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBteUJsb2dEZXRhaWwuanMiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuXG5pbXBvcnQgJ2Jvb3RzdHJhcC9kaXN0L2Nzcy9ib290c3RyYXAuY3NzJztcbmltcG9ydCAnLi9zdHlsZXMvaW5kZXguc2NzcydcblxuaW1wb3J0IHtsYXlvdXR9IGZyb20gJy4vaGVscGVycy9jb21wb25lbnQnXG5pbXBvcnQgTXlMaXN0Q29tcCBmcm9tICcuL3Bvc3QvTXlMaXN0Q29tcCdcblxuaW1wb3J0IGF1dGggZnJvbSAnLi9hdXRoL0xvZ2luUmVkJ1xuaW1wb3J0IG15UG9zdExpc3QgZnJvbSAnLi9wb3N0L015TGlzdFJlZCdcblxuaW1wb3J0IHtjb25maWd1cmVTdG9yZX0gZnJvbSAnLi9oZWxwZXJzL2NvbmZpZ3VyZVN0b3JlJ1xuXG5sZXQgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XG5cdGF1dGg6IGF1dGgsXG5cdG15UG9zdExpc3Q6IG15UG9zdExpc3QsXG59KTtcblxubGV0IENvbXAgPSBsYXlvdXQoe2NvbXA6IE15TGlzdENvbXAsIGZvckF1dGg6IHRydWV9KTtcbnJlbmRlcihcblx0PFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG5cdFx0PENvbXAgLz5cblx0PC9Qcm92aWRlcj4sXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JylcbilcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zdGF0aWNfc3JjL215QmxvZ0RldGFpbC5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgZ3JhcGhxbCB9IGZyb20gJy4uL2hlbHBlcnMvYWN0aW9uJztcbmltcG9ydCB7Zm9yRWFjaCwgY2h1bmssIG1hcH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7QWxlcnRNZXNzYWdlLCBQYWdpbmF0b3JMYXlvdXR9IGZyb20gJy4uL2hlbHBlcnMvY29tcG9uZW50JztcblxuY2xhc3MgQmxvZ0NvbXAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIHJlbmRlciAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHRwbCA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmJsb2cpIHtcbiAgICAgICAgICAgIGxldCBoaWRlQnRuID0gbnVsbDtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHB1YkJsb2cgKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucHJvcHMucHVibGljQmxvZyh7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBzZWxmLnByb3BzLmJsb2cuaWQsXG4gICAgICAgICAgICAgICAgICAgIHB1YmxpYzogISBzZWxmLnByb3BzLmJsb2cucHVibGljXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5ibG9nLnB1YmxpYykge1xuICAgICAgICAgICAgICAgIGhpZGVCdG4gPSA8YnRuIGNsYXNzTmFtZT1cImJ0biBidG4tZGVmYXVsdFwiIG9uQ2xpY2s9e3B1YkJsb2d9IGRhdGEtaWQ9e3RoaXMucHJvcHMuYmxvZy5pZH0+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlXCI+PC9zcGFuPiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICBoaWRlXG4gICAgICAgICAgICAgICAgPC9idG4+XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhpZGVCdG4gPSA8YnRuIGNsYXNzTmFtZT1cImJ0biBidG4tZGVmYXVsdFwiIG9uQ2xpY2s9e3B1YkJsb2d9IGRhdGEtaWQ9e3RoaXMucHJvcHMuYmxvZy5pZH0+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tb2tcIj48L3NwYW4+Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgIHNob3dcbiAgICAgICAgICAgICAgICA8L2J0bj5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHBsID0gPGRpdiBjbGFzc05hbWU9XCJwYW5lbCBwYW5lbC1kZWZhdWx0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtaGVhZGluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cInBhbmVsLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYmxvZy50aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IHRoaXMucHJvcHMuYmxvZy50ZXh0fX0gLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtZm9vdGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXVzZXJcIj48L3NwYW4+Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYmxvZy51c2VyTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDt8Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1jYWxlbmRhclwiPjwvc3Bhbj4mbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5ibG9nLmRhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtcIi9ibG9nLWVkaXQvXCIgKyB0aGlzLnByb3BzLmJsb2cuaWR9IGNsYXNzTmFtZT1cImJ0biBidG4tZGVmYXVsdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBlbmNpbFwiPjwvc3Bhbj4mbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aGlkZUJ0bn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtcIi9wb3N0LWVkaXQvXCIgKyB0aGlzLnByb3BzLmJsb2cuaWQgKyBcIi8tMVwifSBjbGFzc05hbWU9XCJidG4gYnRuLWRlZmF1bHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzXCI+PC9zcGFuPiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZGQgcG9zdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRwbDtcbiAgICB9XG59XG5cblxuXG5cblxuY2xhc3MgTXlMaXN0Q29tcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBzdGFydDogdGhpcy5wcm9wcy5teVBvc3RMaXN0LnN0YXJ0LFxuICAgICAgICAgICAgYmxvZzogdGhpcy5wcm9wcy5teVBvc3RMaXN0LmJsb2csXG4gICAgICAgICAgICBwb3N0czogdGhpcy5wcm9wcy5teVBvc3RMaXN0LnBvc3RzLFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50ICgpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VQYWdlKCk7XG4gICAgfVxuXG4gICAgY2hhbmdlUGFnZSAoc3RhcnQgPSAwKSB7XG4gICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goZ3JhcGhxbCh7XG4gICAgICAgICAgICB0eXBlOiAnTVlfQkxPR19ERVRBSUwnLFxuICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgICAgcGVycGFnZTogdGhpcy5wcm9wcy5teVBvc3RMaXN0LnBlcnBhZ2UsXG4gICAgICAgICAgICBibG9nSWQ6IHRoaXMucHJvcHMubXlQb3N0TGlzdC5ibG9nSWQsXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBtYWtlIHRoZSBibG9nIHB1YmxpYyBvciBoaWRkZW5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHAuaWQgaWQgb2YgYmxvZ1xuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IHAucHVibGljIHRydWUgLSBzaG93IGJsb2csIGZhbHNlIC0gaGlkZSBibG9nXG4gICAgICovXG4gICAgcHVibGljQmxvZyAocCkge1xuICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKGdyYXBocWwoe1xuICAgICAgICAgICAgdHlwZTogJ01ZX0JMT0dfUFVCTElDJyxcbiAgICAgICAgICAgIGlkOiBwLmlkLFxuICAgICAgICAgICAgcHVibGljOiBwLnB1YmxpY1xuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgZ2V0UG9zdEl0ZW1zICgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhIHNlbGYucHJvcHMubXlQb3N0TGlzdC5wb3N0cyB8fCBcbiAgICAgICAgICAgICEgc2VsZi5wcm9wcy5teVBvc3RMaXN0LnBvc3RzLmxlbmd0aFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNodW5rZWRJdGVtcyA9IGNodW5rKHRoaXMucHJvcHMubXlQb3N0TGlzdC5wb3N0cywgMyk7XG4gICAgICAgIGxldCBwb3N0cyA9IG1hcChjaHVua2VkSXRlbXMsIHBvc3RzID0+IHtcbiAgICAgICAgICAgIGxldCBwYXJ0aXRpb24gPSBtYXAocG9zdHMsIHBvc3QgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImNvbC1tZC00XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwgcGFuZWwtZGVmYXVsdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbC1oZWFkaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cInBhbmVsLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWYgPSB7XCIvcG9zdC1lZGl0L1wiICsgc2VsZi5wcm9wcy5teVBvc3RMaXN0LmJsb2cuaWQgKyBcIi9cIiArIHBvc3QuaWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Bvc3QudGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cG9zdC5kZXNjcmlwdGlvbn0gXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtZm9vdGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tdXNlclwiPjwvc3Bhbj4mbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Bvc3QudXNlck5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNhbGVuZGFyXCI+PC9zcGFuPiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cG9zdC5kYXRlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+e3BhcnRpdGlvbn08L2Rpdj5cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwb3N0cztcbiAgICB9XG5cbiAgICByZW5kZXIgKCkge1xuICAgICAgICBsZXQgYWxlcnRPcHRzID0gbnVsbCxcbiAgICAgICAgICAgIHBvc3RzID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5teVBvc3RMaXN0LnN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgYWxlcnRPcHRzID0ge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2RhbmdlcicsXG4gICAgICAgICAgICAgICAgdGV4dDogdGhpcy5wcm9wcy5teVBvc3RMaXN0LmVycm9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5zdGF0dXMgPT09ICdzZW5kJykge1xuICAgICAgICAgICAgYWxlcnRPcHRzID0ge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2luZm8nLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdMb2FkaW5nLCBwbGVhc2Ugd2FpdCcsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgbGV0IHBhZ2VyUGFyYW0gPSB7XG4gICAgICAgICAgICBzdGFydDogdGhpcy5wcm9wcy5teVBvc3RMaXN0LnN0YXJ0LFxuICAgICAgICAgICAgcGVycGFnZTogdGhpcy5wcm9wcy5teVBvc3RMaXN0LnBlcnBhZ2UsXG4gICAgICAgICAgICBjb3VudDogdGhpcy5wcm9wcy5teVBvc3RMaXN0LmNvdW50LFxuICAgICAgICAgICAgaXRlbXM6IHRoaXMuZ2V0UG9zdEl0ZW1zKCksXG4gICAgICAgICAgICBjaGFuZ2VQYWdlOiA6OnRoaXMuY2hhbmdlUGFnZSxcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiA8ZGl2PlxuICAgICAgICAgICAgICAgIDxBbGVydE1lc3NhZ2Ugb3B0cz17YWxlcnRPcHRzfSAvPlxuICAgICAgICAgICAgICAgIDxvbCBjbGFzc05hbWU9XCJicmVhZGNydW1iXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPVwiL215LWJsb2ctbGlzdFwiPk15IGJsb2dzPC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJhY3RpdmVcIj57dGhpcy5wcm9wcy5teVBvc3RMaXN0LmJsb2cgPyB0aGlzLnByb3BzLm15UG9zdExpc3QuYmxvZy50aXRsZSA6IG51bGx9PC9saT5cbiAgICAgICAgICAgICAgICA8L29sPlxuICAgICAgICAgICAgICAgIDxCbG9nQ29tcCBibG9nPXt0aGlzLnByb3BzLm15UG9zdExpc3QuYmxvZ30gcHVibGljQmxvZz17Ojp0aGlzLnB1YmxpY0Jsb2d9Lz5cbiAgICAgICAgICAgICAgICA8UGFnaW5hdG9yTGF5b3V0IHBhcmFtPXtwYWdlclBhcmFtfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcbiAgICByZXR1cm4gey4uLnN0YXRlfVxufVxuTXlMaXN0Q29tcCA9IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShNeUxpc3RDb21wKVxuXG5leHBvcnQgZGVmYXVsdCBNeUxpc3RDb21wXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zdGF0aWNfc3JjL3Bvc3QvTXlMaXN0Q29tcC5qcyIsImltcG9ydCB7Zm9yRWFjaH0gZnJvbSAnbG9kYXNoJztcblxubGV0IGluaXRTdGF0ZSA9IHtcbiAgICBibG9nSWQ6IHdpbmRvdy5sb2NhbFBhcmFtcy5ibG9nSWQgPyBwYXJzZUludCh3aW5kb3cubG9jYWxQYXJhbXMuYmxvZ0lkKSA6IG51bGwsXG4gICAgc3RhcnQ6IHdpbmRvdy5sb2NhbFBhcmFtcy5zdGFydCA/IHBhcnNlSW50KHdpbmRvdy5sb2NhbFBhcmFtcy5zdGFydCkgOiAwLFxuICAgIHBlcnBhZ2U6IHdpbmRvdy5sb2NhbFBhcmFtcy5wZXJwYWdlID8gcGFyc2VJbnQod2luZG93LmxvY2FsUGFyYW1zLnBlcnBhZ2UpIDogOSxcbiAgICBjb3VudDogMCxcbiAgICBibG9nOiBudWxsLFxuICAgIHBvc3RzOiBbXSxcbiAgICBzdGF0dXM6IG51bGwsXG59O1xuXG5jb25zdCBteVBvc3RMaXN0ID0gKHN0YXRlID0gaW5pdFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBsZXQgZGF0YSA9IHsuLi5zdGF0ZX07XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdNWV9CTE9HX0RFVEFJTF9TRU5EJzpcbiAgICAgICAgICAgIGRhdGEuc3RhcnQgPSBhY3Rpb24uc3RhcnQ7XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdzZW5kJztcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICBjYXNlICdNWV9CTE9HX0RFVEFJTF9TVUNDRVNTJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgICAgICAgICAgZGF0YS5jb3VudCA9IGFjdGlvbi5kYXRhLmdldE15QmxvZ0RldGFpbC5jb3VudDtcbiAgICAgICAgICAgIGRhdGEuYmxvZyA9IGFjdGlvbi5kYXRhLmdldE15QmxvZ0RldGFpbC5ibG9nO1xuICAgICAgICAgICAgZGF0YS5wb3N0cyA9IGFjdGlvbi5kYXRhLmdldE15QmxvZ0RldGFpbC5wb3N0cztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ01ZX0JMT0dfREVUQUlMX0VSUk9SJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ2Vycm9yJztcbiAgICAgICAgICAgIGRhdGEuZXJyb3IgPSBhY3Rpb24uZXJyb3I7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcblxuICAgICAgICBcbiAgICAgICAgY2FzZSAnTVlfQkxPR19QVUJMSUNfU0VORCc6XG4gICAgICAgICAgICBkYXRhLnN0YXJ0ID0gYWN0aW9uLnN0YXJ0O1xuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnc2VuZCc7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgY2FzZSAnTVlfQkxPR19QVUJMSUNfU1VDQ0VTUyc6XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdzdWNjZXNzJztcbiAgICAgICAgICAgIGRhdGEuYmxvZy5wdWJsaWMgPSBhY3Rpb24uZGF0YS5wdWJsaWNNeUJsb2cucHVibGljO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAnYWN0aW9uLmRhdGEucHVibGljTXlCbG9nJywgYWN0aW9uLmRhdGEucHVibGljTXlCbG9nXG4gICAgICAgICAgICApXG5cbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICBjYXNlICdNWV9CTE9HX1BVQkxJQ19FUlJPUic6XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdlcnJvcic7XG4gICAgICAgICAgICBkYXRhLmVycm9yID0gYWN0aW9uLmVycm9yO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IG15UG9zdExpc3RcblxuLypcblxubGV0IGluaXRTdGF0ZSA9IHtcbiAgICB1c2VySWQ6IHdpbmRvdy5sb2NhbFBhcmFtcy51c2VySWQgPyBwYXJzZUludCh3aW5kb3cubG9jYWxQYXJhbXMudXNlcklkKSA6IG51bGwsXG4gICAgc3RhcnQ6IHdpbmRvdy5sb2NhbFBhcmFtcy5zdGFydCA/IHBhcnNlSW50KHdpbmRvdy5sb2NhbFBhcmFtcy5zdGFydCkgOiAwLFxuICAgIHBlcnBhZ2U6IHdpbmRvdy5sb2NhbFBhcmFtcy5wZXJwYWdlID8gcGFyc2VJbnQod2luZG93LmxvY2FsUGFyYW1zLnBlcnBhZ2UpIDogOSxcbiAgICBibG9nczogW10sXG4gICAgY291bnQ6IDAsXG4gICAgc3RhdHVzOiBudWxsLFxufTtcblxuY29uc3QgbXlCbG9nTGlzdCA9IChzdGF0ZSA9IGluaXRTdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgbGV0IGRhdGEgPSB7Li4uc3RhdGV9O1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnTVlfQkxPR19ERVRBSUxfU0VORCc6XG4gICAgICAgICAgICBkYXRhLnN0YXJ0ID0gYWN0aW9uLnN0YXJ0O1xuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnc2VuZCc7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgY2FzZSAnTVlfQkxPR19ERVRBSUxfU1VDQ0VTUyc6XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdzdWNjZXNzJztcbiAgICAgICAgICAgIGRhdGEuYmxvZ3MgPSBhY3Rpb24uZGF0YS5nZXRNeUJsb2dMaXN0LmJsb2dzO1xuICAgICAgICAgICAgZGF0YS5jb3VudCA9IGFjdGlvbi5kYXRhLmdldE15QmxvZ0xpc3QuY291bnQ7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgY2FzZSAnTVlfQkxPR19ERVRBSUxfRVJST1InOlxuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnZXJyb3InO1xuICAgICAgICAgICAgZGF0YS5lcnJvciA9IGFjdGlvbi5lcnJvcjtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuXG4gICAgICAgIGNhc2UgJ01ZX1BPU1RfUFVCTElDX1NFTkQnOlxuICAgICAgICAgICAgZGF0YS5zdGFydCA9IGFjdGlvbi5zdGFydDtcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3NlbmQnO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ01ZX1BPU1RfUFVCTElDX1NVQ0NFU1MnOlxuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnc3VjY2Vzcyc7XG4gICAgICAgICAgICBmb3JFYWNoKGRhdGEuYmxvZ3MsIChibG9nKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGJsb2cuaWQgPT0gYWN0aW9uLmRhdGEucHVibGljTXlCbG9nLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGJsb2cucHVibGljID0gYWN0aW9uLmRhdGEucHVibGljTXlCbG9nLnB1YmxpYztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgY2FzZSAnTVlfUE9TVF9QVUJMSUNfRVJST1InOlxuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnZXJyb3InO1xuICAgICAgICAgICAgZGF0YS5lcnJvciA9IGFjdGlvbi5lcnJvcjtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGVcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG15QmxvZ0xpc3RcblxuKi9cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zdGF0aWNfc3JjL3Bvc3QvTXlMaXN0UmVkLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==