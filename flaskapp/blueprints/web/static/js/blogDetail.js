webpackJsonp([5],{325:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var s=a(1),l=r(s),n=a(10),o=a(7);a(17),a(18);var p=a(8),i=a(326),u=r(i),c=a(19),f=r(c),d=a(327),m=r(d),g=a(20),h=(0,g.configureStore)({auth:f.default,postList:m.default}),b=(0,p.layout)({comp:u.default,forAuth:!1});(0,n.render)(l.default.createElement(o.Provider,{store:h},l.default.createElement(b,null)),document.getElementById("root"))},326:function(e,t,a){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e},o=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),p=a(1),i=function(e){return e&&e.__esModule?e:{default:e}}(p),u=a(7),c=a(23),f=a(29),d=a(8),m=function(e){function t(){return r(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return l(t,e),o(t,[{key:"render",value:function(){var e=null;return this.props.blog&&(e=i.default.createElement("div",{className:"panel panel-default"},i.default.createElement("div",{className:"panel-heading"},i.default.createElement("h4",{className:"panel-title"},this.props.blog.title)),i.default.createElement("div",{className:"panel-body"},this.props.blog.text),i.default.createElement("div",{className:"panel-footer"},i.default.createElement("p",null,i.default.createElement("span",{className:"glyphicon glyphicon-user"})," ",this.props.blog.userName," | ",i.default.createElement("span",{className:"glyphicon glyphicon-time"})," ",this.props.blog.date)))),e}}]),t}(i.default.Component),g=function(e){function t(e){r(this,t);var a=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={start:a.props.postList.start,blog:a.props.postList.blog,posts:a.props.postList.posts},a}return l(t,e),o(t,[{key:"componentWillMount",value:function(){this.changePage()}},{key:"changePage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.props.dispatch((0,c.graphql)({type:"BLOG_DETAIL",start:e,perpage:this.props.postList.perpage,blogId:this.props.postList.blogId}))}},{key:"getPostItems",value:function(){var e=this;if(!e.props.postList.posts||!e.props.postList.posts.length)return null;var t=(0,f.chunk)(this.props.postList.posts,3);return(0,f.map)(t,function(t){var a=(0,f.map)(t,function(t){return i.default.createElement("div",{className:"col-md-4"},i.default.createElement("div",{className:"panel panel-default"},i.default.createElement("div",{className:"panel-heading"},i.default.createElement("h4",{className:"panel-title"},i.default.createElement("a",{href:"/post/"+e.props.postList.blog.id+"/"+t.id},t.title))),i.default.createElement("div",{className:"panel-body"},t.description),i.default.createElement("div",{className:"panel-footer"},i.default.createElement("p",null,i.default.createElement("span",{className:"glyphicon glyphicon-user"})," ",t.userName),i.default.createElement("p",null,i.default.createElement("span",{className:"glyphicon glyphicon-time"})," ",t.date))))});return i.default.createElement("div",{className:"row"},a)})}},{key:"render",value:function(){var e=null;"error"===this.props.postList.status?e={className:"danger",text:this.props.postList.error}:"send"===this.props.status&&(e={className:"info",text:"Loading, please wait"});var t={start:this.props.postList.start,perpage:this.props.postList.perpage,count:this.props.postList.count,items:this.getPostItems(),changePage:this.changePage.bind(this)};return i.default.createElement("div",null,i.default.createElement(d.AlertMessage,{opts:e}),i.default.createElement("ol",{className:"breadcrumb"},i.default.createElement("li",null,i.default.createElement("a",{href:"/blogs"},"Blogs")),i.default.createElement("li",{className:"active"},this.props.postList.blog?this.props.postList.blog.title:null)),i.default.createElement(m,{blog:this.props.postList.blog}),i.default.createElement(d.PaginatorLayout,{param:t}))}}]),t}(i.default.Component),h=function(e){return n({},e)};g=(0,u.connect)(h)(g),t.default=g},327:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e},s=(a(29),{blogId:window.localParams.blogId?parseInt(window.localParams.blogId):null,start:window.localParams.start?parseInt(window.localParams.start):0,perpage:window.localParams.perpage?parseInt(window.localParams.perpage):9,count:0,blog:null,posts:[],status:null}),l=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s,t=arguments[1],a=r({},e);switch(t.type){case"BLOG_DETAIL_SEND":return a.start=t.start,a.status="send",a;case"BLOG_DETAIL_SUCCESS":return a.status="success",a.count=t.data.getBlogDetail.count,a.blog=t.data.getBlogDetail.blog,a.posts=t.data.getBlogDetail.posts,a;case"BLOG_DETAIL_ERROR":return a.status="error",a.error=t.error,a;default:return e}};t.default=l}},[325]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,