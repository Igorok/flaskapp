webpackJsonp([10],{194:function(e,t,r){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}var s=r(1),n=a(s),o=r(11),l=r(7);r(16),r(17);var i=r(8),u=r(325),c=a(u),d=r(18),f=a(d),p=r(331),m=a(p),h=r(19),g=(0,h.configureStore)({auth:f.default,registration:m.default}),b=(0,i.layout)({comp:c.default});(0,o.render)(n.default.createElement(l.Provider,{store:g},n.default.createElement(b,null)),document.getElementById("root"))},325:function(e,t,r){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function n(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},l=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}(),i=r(1),u=function(e){return e&&e.__esModule?e:{default:e}}(i),c=r(7),d=r(21),f=r(8),p=function(e){function t(e){a(this,t);var r=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.state={email:null,password:null,confirmPassword:null},r}return n(t,e),l(t,[{key:"formSubmit",value:function(e){return e.preventDefault(),!this.state.email||this.state.email.length<1||!this.state.password||this.state.password.length<1?void this.props.dispatch({type:"REG_ERROR",error:"Email and password are required!"}):this.state.password!==this.state.confirmPassword?void this.props.dispatch({type:"REG_ERROR",error:"Please confirm password!"}):void this.props.dispatch((0,d.graphql)({type:"REG",email:this.state.email,password:this.state.password,confirmPassword:this.state.confirmPassword}))}},{key:"componentDidUpdate",value:function(){"success"===this.props.registration.status&&setTimeout(function(){return window.location="/login"},1e3)}},{key:"fieldChange",value:function(e){e.preventDefault();var t={};t[e.target.id]=e.target.value?e.target.value.toString().trim():null,this.setState(t)}},{key:"render",value:function(){var e=null,t=null;return"error"===this.props.registration.status?t={className:"danger",text:this.props.registration.error||"Error, wrong email or password"}:"send"===this.props.registration.status?(e="disabled",t={className:"info",text:"Loading, please wait"}):"success"===this.props.registration.status&&(t={className:"success",text:"Registration is successfully, please login."}),u.default.createElement("div",{className:"row"},u.default.createElement("div",{className:"col-lg-offset-3 col-lg-6"},u.default.createElement("div",{className:"panel panel-default"},u.default.createElement("div",{className:"panel-heading"},u.default.createElement("h3",{className:"panel-title"},"Registration")),u.default.createElement("div",{className:"panel-body"},u.default.createElement("form",{onSubmit:this.formSubmit.bind(this)},u.default.createElement("div",{className:"form-group"},u.default.createElement("label",{htmlFor:"email"},"Email"),u.default.createElement("input",{type:"email",required:!0,className:"form-control",id:"email",placeholder:"Email",defaultValue:this.props.registration.email,onChange:this.fieldChange.bind(this),disabled:e})),u.default.createElement("div",{className:"form-group"},u.default.createElement("label",{htmlFor:"password"},"Password"),u.default.createElement("input",{type:"password",required:!0,className:"form-control",id:"password",placeholder:"Password",defaultValue:this.props.registration.password,onChange:this.fieldChange.bind(this),disabled:e})),u.default.createElement("div",{className:"form-group"},u.default.createElement("label",{htmlFor:"confirmPassword"},"Confirm password"),u.default.createElement("input",{type:"password",required:!0,className:"form-control",id:"confirmPassword",placeholder:"Confirm password",defaultValue:this.props.registration.confirmPassword,onChange:this.fieldChange.bind(this),disabled:e})),u.default.createElement(f.AlertMessage,{opts:t}),u.default.createElement("button",{type:"submit",className:"btn btn-default btn-block",disabled:e},"Registration")),u.default.createElement("br",null),u.default.createElement("p",{className:"text-center"},u.default.createElement("a",{href:"/login"},"Login"))))))}}]),t}(u.default.Component),m=function(e){return o({},e)};p=(0,c.connect)(m)(p),t.default=p},331:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},s={login:null,password:null,confirmPassword:null,status:null,error:null},n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s,t=arguments[1],r=a({},e);switch(t.type){case"REG_SEND":return r.status="send",r;case"REG_SUCCESS":return r.status="success",r;case"REG_ERROR":return r.status="error",r.error=t.error,r;default:return e}};t.default=n}},[194]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcmVnaXN0cmF0aW9uLmpzIiwid2VicGFjazovLy8uL3N0YXRpY19zcmMvcmVnaXN0cmF0aW9uLmpzIiwid2VicGFjazovLy8uL3N0YXRpY19zcmMvYXV0aC9SZWdDb21wLmpzIiwid2VicGFjazovLy8uL3N0YXRpY19zcmMvYXV0aC9SZWdSZWQuanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wIiwiMTk0IiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX3JlYWN0RG9tIiwiX3JlYWN0UmVkdXgiLCJfY29tcG9uZW50IiwiX1JlZ0NvbXAiLCJfUmVnQ29tcDIiLCJfTG9naW5SZWQiLCJfTG9naW5SZWQyIiwiX1JlZ1JlZCIsIl9SZWdSZWQyIiwiX2NvbmZpZ3VyZVN0b3JlIiwic3RvcmUiLCJjb25maWd1cmVTdG9yZSIsImF1dGgiLCJyZWdpc3RyYXRpb24iLCJDb21wIiwibGF5b3V0IiwiY29tcCIsIlJlZ0NvbXAiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiMzI1IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsImNhbGwiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImRlZmluZVByb3BlcnR5IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2FjdGlvbiIsIkxvZ2luQ29tcCIsIl9SZWFjdCRDb21wb25lbnQiLCJ0aGlzIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsInN0YXRlIiwiZW1haWwiLCJwYXNzd29yZCIsImNvbmZpcm1QYXNzd29yZCIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImRpc3BhdGNoIiwidHlwZSIsImVycm9yIiwiZ3JhcGhxbCIsInN0YXR1cyIsInNldFRpbWVvdXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInVwZGF0ZSIsImlkIiwidG9TdHJpbmciLCJ0cmltIiwic2V0U3RhdGUiLCJkaXNhYmxlZCIsImFsZXJ0T3B0cyIsImNsYXNzTmFtZSIsInRleHQiLCJvblN1Ym1pdCIsImZvcm1TdWJtaXQiLCJiaW5kIiwiaHRtbEZvciIsInJlcXVpcmVkIiwicGxhY2Vob2xkZXIiLCJkZWZhdWx0VmFsdWUiLCJvbkNoYW5nZSIsImZpZWxkQ2hhbmdlIiwiQWxlcnRNZXNzYWdlIiwib3B0cyIsImhyZWYiLCJSZWFjdCIsIkNvbXBvbmVudCIsIm1hcFN0YXRlVG9Qcm9wcyIsImNvbm5lY3QiLCIzMzEiLCJpbml0U3RhdGUiLCJsb2dpbiIsInVuZGVmaW5lZCIsImFjdGlvbiIsImRhdGEiXSwibWFwcGluZ3MiOiJBQUFBQSxjQUFjLEtBRVJDLElBQ0EsU0FBVUMsRUFBUUMsRUFBU0MsR0FFakMsWUErQkEsU0FBU0MsR0FBdUJDLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUUUsUUFBU0YsR0NwQ3ZGLEdBQUFHLEdBQUFMLEVBQUEsR0RVSU0sRUFBVUwsRUFBdUJJLEdDVHJDRSxFQUFBUCxFQUFBLElBQ0FRLEVBQUFSLEVBQUEsRUFFQUEsR0FBQSxJQUNBQSxFQUFBLEdBRUEsSUFBQVMsR0FBQVQsRUFBQSxHQUNBVSxFQUFBVixFQUFBLEtEZ0JJVyxFQUFZVixFQUF1QlMsR0NkdkNFLEVBQUFaLEVBQUEsSURrQklhLEVBQWFaLEVBQXVCVyxHQ2pCeENFLEVBQUFkLEVBQUEsS0RxQkllLEVBQVdkLEVBQXVCYSxHQ25CdENFLEVBQUFoQixFQUFBLElBRUlpQixHQUFRLEVBQUFELEVBQUFFLGlCQUNSQyxLQUFNQSxVQUNUQyxhQUFjQSxZQUdYQyxHQUFPLEVBQUFaLEVBQUFhLFNBQVFDLEtBQU1DLGFBQ3pCLEVBQUFqQixFQUFBa0IsUUFDQ25CLEVBQUFGLFFBQUFzQixjQUFDbEIsRUFBQW1CLFVBQVNWLE1BQU9BLEdBQ2hCWCxFQUFBRixRQUFBc0IsY0FBQ0wsRUFBRCxPQUVETyxTQUFTQyxlQUFlLFVEMkJuQkMsSUFDQSxTQUFVaEMsRUFBUUMsRUFBU0MsR0FFakMsWUF1QkEsU0FBUytCLEdBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNBRWhILFFBQVNDLEdBQTJCQyxFQUFNQyxHQUFRLElBQUtELEVBQVEsS0FBTSxJQUFJRSxnQkFBZSw0REFBZ0UsUUFBT0QsR0FBeUIsZ0JBQVRBLElBQXFDLGtCQUFUQSxHQUE4QkQsRUFBUEMsRUFFbE8sUUFBU0UsR0FBVUMsRUFBVUMsR0FBYyxHQUEwQixrQkFBZkEsSUFBNEMsT0FBZkEsRUFBdUIsS0FBTSxJQUFJUCxXQUFVLGlFQUFvRU8sR0FBZUQsR0FBU0UsVUFBWUMsT0FBT0MsT0FBT0gsR0FBY0EsRUFBV0MsV0FBYUcsYUFBZUMsTUFBT04sRUFBVU8sWUFBWSxFQUFPQyxVQUFVLEVBQU1DLGNBQWMsS0FBZVIsSUFBWUUsT0FBT08sZUFBaUJQLE9BQU9PLGVBQWVWLEVBQVVDLEdBQWNELEVBQVNXLFVBQVlWLEdBeEJqZUUsT0FBT1MsZUFBZXJELEVBQVMsY0FDM0IrQyxPQUFPLEdBR1gsSUFBSU8sR0FBV1YsT0FBT1csUUFBVSxTQUFVQyxHQUFVLElBQUssR0FBSUMsR0FBSSxFQUFHQSxFQUFJQyxVQUFVQyxPQUFRRixJQUFLLENBQUUsR0FBSUcsR0FBU0YsVUFBVUQsRUFBSSxLQUFLLEdBQUlJLEtBQU9ELEdBQWNoQixPQUFPRCxVQUFVbUIsZUFBZXhCLEtBQUtzQixFQUFRQyxLQUFRTCxFQUFPSyxHQUFPRCxFQUFPQyxJQUFZLE1BQU9MLElBRW5QTyxFQUFlLFdBQWMsUUFBU0MsR0FBaUJSLEVBQVFTLEdBQVMsSUFBSyxHQUFJUixHQUFJLEVBQUdBLEVBQUlRLEVBQU1OLE9BQVFGLElBQUssQ0FBRSxHQUFJUyxHQUFhRCxFQUFNUixFQUFJUyxHQUFXbEIsV0FBYWtCLEVBQVdsQixhQUFjLEVBQU9rQixFQUFXaEIsY0FBZSxFQUFVLFNBQVdnQixLQUFZQSxFQUFXakIsVUFBVyxHQUFNTCxPQUFPUyxlQUFlRyxFQUFRVSxFQUFXTCxJQUFLSyxJQUFpQixNQUFPLFVBQVVoQyxFQUFhaUMsRUFBWUMsR0FBaUosTUFBOUhELElBQVlILEVBQWlCOUIsRUFBWVMsVUFBV3dCLEdBQWlCQyxHQUFhSixFQUFpQjlCLEVBQWFrQyxHQUFxQmxDLE1FaEVoaUI1QixFQUFBTCxFQUFBLEdGb0VJTSxFQVFKLFNBQWdDSixHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFFLFFBQVNGLElBUmxERyxHRW5FckNHLEVBQUFSLEVBQUEsR0FDQW9FLEVBQUFwRSxFQUFBLElBQ0FTLEVBQUFULEVBQUEsR0FHTXFFLEVGOEVVLFNBQVVDLEdFN0V0QixRQUFBRCxHQUFZTCxHQUFPakMsRUFBQXdDLEtBQUFGLEVBQUEsSUFBQUcsR0FBQXJDLEVBQUFvQyxNQUFBRixFQUFBbEIsV0FBQVIsT0FBQThCLGVBQUFKLElBQUFoQyxLQUFBa0MsS0FDVFAsR0FEUyxPQUVmUSxHQUFLRSxPQUNEQyxNQUFPLEtBQ1BDLFNBQVUsS0FDVkMsZ0JBQWlCLE1BTE5MLEVGNlFuQixNQS9MQWpDLEdBQVU4QixFQUFXQyxHQWVyQlIsRUFBYU8sSUFDVFQsSUFBSyxhQUNMZCxNQUFPLFNFdEZDZ0MsR0FFUixNQURBQSxHQUFFQyxrQkFFSVIsS0FBS0csTUFBTUMsT0FBU0osS0FBS0csTUFBTUMsTUFBTWpCLE9BQVMsSUFDOUNhLEtBQUtHLE1BQU1FLFVBQVlMLEtBQUtHLE1BQU1FLFNBQVNsQixPQUFTLE1BRXREYSxNQUFLUCxNQUFNZ0IsVUFDUEMsS0FBTSxZQUNOQyxNQUFPLHFDQUlYWCxLQUFLRyxNQUFNRSxXQUFhTCxLQUFLRyxNQUFNRyxvQkFDbkNOLE1BQUtQLE1BQU1nQixVQUNQQyxLQUFNLFlBQ05DLE1BQU8saUNBS2ZYLE1BQUtQLE1BQU1nQixVQUFTLEVBQUFaLEVBQUFlLFVBQ2hCRixLQUFNLE1BQ05OLE1BQU9KLEtBQUtHLE1BQU1DLE1BQ2xCQyxTQUFVTCxLQUFLRyxNQUFNRSxTQUNyQkMsZ0JBQWlCTixLQUFLRyxNQUFNRyxzQkZ1RmhDakIsSUFBSyxxQkFDTGQsTUFBTyxXRW5GZ0MsWUFBbkN5QixLQUFLUCxNQUFNNUMsYUFBYWdFLFFBQ3hCQyxXQUFXLFdBQ1AsTUFBT0MsUUFBT0MsU0FBVyxVQUMxQixRRndGUDNCLElBQUssY0FDTGQsTUFBTyxTRXJGRWdDLEdBQ1RBLEVBQUVDLGdCQUNGLElBQUlTLEtBQ0pBLEdBQU9WLEVBQUV2QixPQUFPa0MsSUFBTVgsRUFBRXZCLE9BQU9ULE1BQVFnQyxFQUFFdkIsT0FBT1QsTUFBTTRDLFdBQVdDLE9BQVMsS0FDMUVwQixLQUFLcUIsU0FBU0osTUZ3RmQ1QixJQUFLLFNBQ0xkLE1BQU8sV0VyRlAsR0FBSStDLEdBQVcsS0FDWEMsRUFBWSxJQW9CaEIsT0FsQnVDLFVBQW5DdkIsS0FBS1AsTUFBTTVDLGFBQWFnRSxPQUN4QlUsR0FDSUMsVUFBVyxTQUNYQyxLQUFNekIsS0FBS1AsTUFBTTVDLGFBQWE4RCxPQUFTLGtDQUVELFNBQW5DWCxLQUFLUCxNQUFNNUMsYUFBYWdFLFFBQy9CUyxFQUFXLFdBQ1hDLEdBQ0lDLFVBQVcsT0FDWEMsS0FBTSx5QkFFZ0MsWUFBbkN6QixLQUFLUCxNQUFNNUMsYUFBYWdFLFNBQy9CVSxHQUNJQyxVQUFXLFVBQ1hDLEtBQU0sZ0RBSVAxRixFQUFBRixRQUFBc0IsY0FBQSxPQUFLcUUsVUFBVSxPQUNsQnpGLEVBQUFGLFFBQUFzQixjQUFBLE9BQUtxRSxVQUFVLDRCQUNYekYsRUFBQUYsUUFBQXNCLGNBQUEsT0FBS3FFLFVBQVUsdUJBQ1h6RixFQUFBRixRQUFBc0IsY0FBQSxPQUFLcUUsVUFBVSxpQkFDWHpGLEVBQUFGLFFBQUFzQixjQUFBLE1BQUlxRSxVQUFVLGVBQWQsaUJBRUp6RixFQUFBRixRQUFBc0IsY0FBQSxPQUFLcUUsVUFBVSxjQUNYekYsRUFBQUYsUUFBQXNCLGNBQUEsUUFBTXVFLFNBQVkxQixLQUFLMkIsV0FBakJDLEtBQVk1QixPQUNkakUsRUFBQUYsUUFBQXNCLGNBQUEsT0FBS3FFLFVBQVUsY0FDWHpGLEVBQUFGLFFBQUFzQixjQUFBLFNBQU8wRSxRQUFRLFNBQWYsU0FDQTlGLEVBQUFGLFFBQUFzQixjQUFBLFNBQ0l1RCxLQUFLLFFBQ0xvQixVQUFBLEVBQ0FOLFVBQVUsZUFDVk4sR0FBRyxRQUNIYSxZQUFZLFFBQ1pDLGFBQWNoQyxLQUFLUCxNQUFNNUMsYUFBYXVELE1BQ3RDNkIsU0FBWWpDLEtBQUtrQyxZQUFqQk4sS0FBWTVCLE1BQ1pzQixTQUFVQSxLQUdsQnZGLEVBQUFGLFFBQUFzQixjQUFBLE9BQUtxRSxVQUFVLGNBQ1h6RixFQUFBRixRQUFBc0IsY0FBQSxTQUFPMEUsUUFBUSxZQUFmLFlBQ0E5RixFQUFBRixRQUFBc0IsY0FBQSxTQUNJdUQsS0FBSyxXQUNMb0IsVUFBQSxFQUNBTixVQUFVLGVBQ1ZOLEdBQUcsV0FDSGEsWUFBWSxXQUNaQyxhQUFjaEMsS0FBS1AsTUFBTTVDLGFBQWF3RCxTQUN0QzRCLFNBQVlqQyxLQUFLa0MsWUFBakJOLEtBQVk1QixNQUNac0IsU0FBVUEsS0FHbEJ2RixFQUFBRixRQUFBc0IsY0FBQSxPQUFLcUUsVUFBVSxjQUNYekYsRUFBQUYsUUFBQXNCLGNBQUEsU0FBTzBFLFFBQVEsbUJBQWYsb0JBQ0E5RixFQUFBRixRQUFBc0IsY0FBQSxTQUNJdUQsS0FBSyxXQUNMb0IsVUFBQSxFQUNBTixVQUFVLGVBQ1ZOLEdBQUcsa0JBQ0hhLFlBQVksbUJBQ1pDLGFBQWNoQyxLQUFLUCxNQUFNNUMsYUFBYXlELGdCQUN0QzJCLFNBQVlqQyxLQUFLa0MsWUFBakJOLEtBQVk1QixNQUNac0IsU0FBVUEsS0FHbEJ2RixFQUFBRixRQUFBc0IsY0FBQ2pCLEVBQUFpRyxjQUFhQyxLQUFNYixJQUNwQnhGLEVBQUFGLFFBQUFzQixjQUFBLFVBQ0l1RCxLQUFLLFNBQ0xjLFVBQVUsNEJBQ1ZGLFNBQVVBLEdBSGQsaUJBTUp2RixFQUFBRixRQUFBc0IsY0FBQSxXQUNBcEIsRUFBQUYsUUFBQXNCLGNBQUEsS0FBR3FFLFVBQVUsZUFDVHpGLEVBQUFGLFFBQUFzQixjQUFBLEtBQUdrRixLQUFLLFVBQVIsa0JGMklqQnZDLEdFOVFhd0MsVUFBTUMsV0E0SXhCQyxFQUFrQixTQUFDckMsR0FDckIsTUFBQXJCLE1BQVdxQixHQUVmTCxJQUFZLEVBQUE3RCxFQUFBd0csU0FBUUQsR0FBaUIxQyxHRnVJckN0RSxFQUFRSyxRRXJJT2lFLEdGeUlUNEMsSUFDQSxTQUFVbkgsRUFBUUMsRUFBU0MsR0FFakMsWUFHQTJDLFFBQU9TLGVBQWVyRCxFQUFTLGNBQzNCK0MsT0FBTyxHQUdYLElBQUlPLEdBQVdWLE9BQU9XLFFBQVUsU0FBVUMsR0FBVSxJQUFLLEdBQUlDLEdBQUksRUFBR0EsRUFBSUMsVUFBVUMsT0FBUUYsSUFBSyxDQUFFLEdBQUlHLEdBQVNGLFVBQVVELEVBQUksS0FBSyxHQUFJSSxLQUFPRCxHQUFjaEIsT0FBT0QsVUFBVW1CLGVBQWV4QixLQUFLc0IsRUFBUUMsS0FBUUwsRUFBT0ssR0FBT0QsRUFBT0MsSUFBWSxNQUFPTCxJRzFTalAyRCxHQUNGQyxNQUFPLEtBQ1B2QyxTQUFVLEtBQ1ZDLGdCQUFpQixLQUNqQk8sT0FBUSxLQUNSRixNQUFPLE1BR0w5RCxFQUFlLFdBQStCLEdBQTlCc0QsR0FBOEJqQixVQUFBQyxPQUFBLE9BQUEwRCxLQUFBM0QsVUFBQSxHQUFBQSxVQUFBLEdBQXRCeUQsRUFBV0csRUFBVzVELFVBQUEsR0FDNUM2RCxPQUFXNUMsRUFDZixRQUFRMkMsRUFBT3BDLE1BQ1gsSUFBSyxXQUVELE1BREFxQyxHQUFLbEMsT0FBUyxPQUNQa0MsQ0FDWCxLQUFLLGNBRUQsTUFEQUEsR0FBS2xDLE9BQVMsVUFDUGtDLENBQ1gsS0FBSyxZQUdELE1BRkFBLEdBQUtsQyxPQUFTLFFBQ2RrQyxFQUFLcEMsTUFBUW1DLEVBQU9uQyxNQUNib0MsQ0FDWCxTQUNJLE1BQU81QyxJSG1UbkIzRSxHQUFRSyxRRy9TT2dCLEtIbVRaIiwiZmlsZSI6InJlZ2lzdHJhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIndlYnBhY2tKc29ucChbMTBdLHtcblxuLyoqKi8gMTk0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3REb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblxudmFyIF9yZWFjdFJlZHV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXG52YXIgX2NvbXBvbmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfUmVnQ29tcCA9IF9fd2VicGFja19yZXF1aXJlX18oMzI1KTtcblxudmFyIF9SZWdDb21wMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlZ0NvbXApO1xuXG52YXIgX0xvZ2luUmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cbnZhciBfTG9naW5SZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9naW5SZWQpO1xuXG52YXIgX1JlZ1JlZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzMxKTtcblxudmFyIF9SZWdSZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVnUmVkKTtcblxudmFyIF9jb25maWd1cmVTdG9yZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgc3RvcmUgPSAoMCwgX2NvbmZpZ3VyZVN0b3JlLmNvbmZpZ3VyZVN0b3JlKSh7XG5cdGF1dGg6IF9Mb2dpblJlZDIuZGVmYXVsdCxcblx0cmVnaXN0cmF0aW9uOiBfUmVnUmVkMi5kZWZhdWx0XG59KTtcblxudmFyIENvbXAgPSAoMCwgX2NvbXBvbmVudC5sYXlvdXQpKHsgY29tcDogX1JlZ0NvbXAyLmRlZmF1bHQgfSk7XG4oMCwgX3JlYWN0RG9tLnJlbmRlcikoX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdF9yZWFjdFJlZHV4LlByb3ZpZGVyLFxuXHR7IHN0b3JlOiBzdG9yZSB9LFxuXHRfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wLCBudWxsKVxuKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMjU6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0UmVkdXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX2FjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXG52YXIgX2NvbXBvbmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIExvZ2luQ29tcCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvZ2luQ29tcCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2dpbkNvbXAocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvZ2luQ29tcCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExvZ2luQ29tcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvZ2luQ29tcCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGVtYWlsOiBudWxsLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGwsXG4gICAgICAgICAgICBjb25maXJtUGFzc3dvcmQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2dpbkNvbXAsIFt7XG4gICAgICAgIGtleTogJ2Zvcm1TdWJtaXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybVN1Ym1pdChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUuZW1haWwgfHwgdGhpcy5zdGF0ZS5lbWFpbC5sZW5ndGggPCAxIHx8ICF0aGlzLnN0YXRlLnBhc3N3b3JkIHx8IHRoaXMuc3RhdGUucGFzc3dvcmQubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUkVHX0VSUk9SJyxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICdFbWFpbCBhbmQgcGFzc3dvcmQgYXJlIHJlcXVpcmVkISdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5wYXNzd29yZCAhPT0gdGhpcy5zdGF0ZS5jb25maXJtUGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1JFR19FUlJPUicsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAnUGxlYXNlIGNvbmZpcm0gcGFzc3dvcmQhJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaCgoMCwgX2FjdGlvbi5ncmFwaHFsKSh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1JFRycsXG4gICAgICAgICAgICAgICAgZW1haWw6IHRoaXMuc3RhdGUuZW1haWwsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuc3RhdGUucGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkOiB0aGlzLnN0YXRlLmNvbmZpcm1QYXNzd29yZFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMucmVnaXN0cmF0aW9uLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24gPSAnL2xvZ2luJztcbiAgICAgICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZmllbGRDaGFuZ2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmllbGRDaGFuZ2UoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IHt9O1xuICAgICAgICAgICAgdXBkYXRlW2UudGFyZ2V0LmlkXSA9IGUudGFyZ2V0LnZhbHVlID8gZS50YXJnZXQudmFsdWUudG9TdHJpbmcoKS50cmltKCkgOiBudWxsO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh1cGRhdGUpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIGRpc2FibGVkID0gbnVsbCxcbiAgICAgICAgICAgICAgICBhbGVydE9wdHMgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5yZWdpc3RyYXRpb24uc3RhdHVzID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgYWxlcnRPcHRzID0ge1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdkYW5nZXInLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnByb3BzLnJlZ2lzdHJhdGlvbi5lcnJvciB8fCAnRXJyb3IsIHdyb25nIGVtYWlsIG9yIHBhc3N3b3JkJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMucmVnaXN0cmF0aW9uLnN0YXR1cyA9PT0gJ3NlbmQnKSB7XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQgPSAnZGlzYWJsZWQnO1xuICAgICAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnaW5mbycsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdMb2FkaW5nLCBwbGVhc2Ugd2FpdCdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnJlZ2lzdHJhdGlvbi5zdGF0dXMgPT09ICdzdWNjZXNzJykge1xuICAgICAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdSZWdpc3RyYXRpb24gaXMgc3VjY2Vzc2Z1bGx5LCBwbGVhc2UgbG9naW4uJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3JvdycgfSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY29sLWxnLW9mZnNldC0zIGNvbC1sZy02JyB9LFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbCBwYW5lbC1kZWZhdWx0JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbC1oZWFkaW5nJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaDMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3BhbmVsLXRpdGxlJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUmVnaXN0cmF0aW9uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3BhbmVsLWJvZHknIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb3JtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBvblN1Ym1pdDogdGhpcy5mb3JtU3VibWl0LmJpbmQodGhpcykgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZm9ybS1ncm91cCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBodG1sRm9yOiAnZW1haWwnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0VtYWlsJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZW1haWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2Zvcm0tY29udHJvbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdlbWFpbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdFbWFpbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiB0aGlzLnByb3BzLnJlZ2lzdHJhdGlvbi5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5maWVsZENoYW5nZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZm9ybS1ncm91cCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBodG1sRm9yOiAncGFzc3dvcmQnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1Bhc3N3b3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAncGFzc3dvcmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2Zvcm0tY29udHJvbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdwYXNzd29yZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdQYXNzd29yZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiB0aGlzLnByb3BzLnJlZ2lzdHJhdGlvbi5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5maWVsZENoYW5nZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZm9ybS1ncm91cCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBodG1sRm9yOiAnY29uZmlybVBhc3N3b3JkJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb25maXJtIHBhc3N3b3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAncGFzc3dvcmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2Zvcm0tY29udHJvbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdjb25maXJtUGFzc3dvcmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnQ29uZmlybSBwYXNzd29yZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiB0aGlzLnByb3BzLnJlZ2lzdHJhdGlvbi5jb25maXJtUGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuZmllbGRDaGFuZ2UuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnQuQWxlcnRNZXNzYWdlLCB7IG9wdHM6IGFsZXJ0T3B0cyB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VibWl0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdidG4gYnRuLWRlZmF1bHQgYnRuLWJsb2NrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUmVnaXN0cmF0aW9uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYnInLCBudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3AnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgaHJlZjogJy9sb2dpbicgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdMb2dpbidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9naW5Db21wO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxudmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUpO1xufTtcbkxvZ2luQ29tcCA9ICgwLCBfcmVhY3RSZWR1eC5jb25uZWN0KShtYXBTdGF0ZVRvUHJvcHMpKExvZ2luQ29tcCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IExvZ2luQ29tcDtcblxuLyoqKi8gfSksXG5cbi8qKiovIDMzMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgaW5pdFN0YXRlID0ge1xuICAgIGxvZ2luOiBudWxsLFxuICAgIHBhc3N3b3JkOiBudWxsLFxuICAgIGNvbmZpcm1QYXNzd29yZDogbnVsbCxcbiAgICBzdGF0dXM6IG51bGwsXG4gICAgZXJyb3I6IG51bGxcbn07XG5cbnZhciByZWdpc3RyYXRpb24gPSBmdW5jdGlvbiByZWdpc3RyYXRpb24oKSB7XG4gICAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBpbml0U3RhdGU7XG4gICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICAgIHZhciBkYXRhID0gX2V4dGVuZHMoe30sIHN0YXRlKTtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ1JFR19TRU5EJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3NlbmQnO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ1JFR19TVUNDRVNTJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ1JFR19FUlJPUic6XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdlcnJvcic7XG4gICAgICAgICAgICBkYXRhLmVycm9yID0gYWN0aW9uLmVycm9yO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gcmVnaXN0cmF0aW9uO1xuXG4vKioqLyB9KVxuXG59LFsxOTRdKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcmVnaXN0cmF0aW9uLmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJ1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0ICdib290c3RyYXAvZGlzdC9jc3MvYm9vdHN0cmFwLmNzcyc7XG5pbXBvcnQgJy4vc3R5bGVzL2luZGV4LnNjc3MnXG5cbmltcG9ydCB7bGF5b3V0fSBmcm9tICcuL2hlbHBlcnMvY29tcG9uZW50J1xuaW1wb3J0IFJlZ0NvbXAgZnJvbSAnLi9hdXRoL1JlZ0NvbXAnXG5cbmltcG9ydCBhdXRoIGZyb20gJy4vYXV0aC9Mb2dpblJlZCdcbmltcG9ydCByZWdpc3RyYXRpb24gZnJvbSAnLi9hdXRoL1JlZ1JlZCdcblxuaW1wb3J0IHtjb25maWd1cmVTdG9yZX0gZnJvbSAnLi9oZWxwZXJzL2NvbmZpZ3VyZVN0b3JlJ1xuXG5sZXQgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XG4gICAgYXV0aDogYXV0aCxcblx0cmVnaXN0cmF0aW9uOiByZWdpc3RyYXRpb24sXG59KTtcblxubGV0IENvbXAgPSBsYXlvdXQoe2NvbXA6IFJlZ0NvbXB9KTtcbnJlbmRlcihcblx0PFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG5cdFx0PENvbXAgLz5cblx0PC9Qcm92aWRlcj4sXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JylcbilcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zdGF0aWNfc3JjL3JlZ2lzdHJhdGlvbi5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7Z3JhcGhxbH0gZnJvbSAnLi4vaGVscGVycy9hY3Rpb24nXG5pbXBvcnQge0FsZXJ0TWVzc2FnZX0gZnJvbSAnLi4vaGVscGVycy9jb21wb25lbnQnXG5cblxuY2xhc3MgTG9naW5Db21wIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBlbWFpbDogbnVsbCxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBudWxsLFxuICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkOiBudWxsLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZvcm1TdWJtaXQgKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1x0XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICEgdGhpcy5zdGF0ZS5lbWFpbCB8fCB0aGlzLnN0YXRlLmVtYWlsLmxlbmd0aCA8IDEgfHxcbiAgICAgICAgICAgICEgdGhpcy5zdGF0ZS5wYXNzd29yZCB8fCB0aGlzLnN0YXRlLnBhc3N3b3JkLmxlbmd0aCA8IDFcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnUkVHX0VSUk9SJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ0VtYWlsIGFuZCBwYXNzd29yZCBhcmUgcmVxdWlyZWQhJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucGFzc3dvcmQgIT09IHRoaXMuc3RhdGUuY29uZmlybVBhc3N3b3JkKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnUkVHX0VSUk9SJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ1BsZWFzZSBjb25maXJtIHBhc3N3b3JkISdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChncmFwaHFsKHtcbiAgICAgICAgICAgIHR5cGU6ICdSRUcnLFxuICAgICAgICAgICAgZW1haWw6IHRoaXMuc3RhdGUuZW1haWwsXG4gICAgICAgICAgICBwYXNzd29yZDogdGhpcy5zdGF0ZS5wYXNzd29yZCxcbiAgICAgICAgICAgIGNvbmZpcm1QYXNzd29yZDogdGhpcy5zdGF0ZS5jb25maXJtUGFzc3dvcmQsXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUgKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5yZWdpc3RyYXRpb24uc3RhdHVzID09PSAnc3VjY2VzcycpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24gPSAnL2xvZ2luJztcbiAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGZpZWxkQ2hhbmdlIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGV0IHVwZGF0ZSA9IHt9O1xuICAgICAgICB1cGRhdGVbZS50YXJnZXQuaWRdID0gZS50YXJnZXQudmFsdWUgPyBlLnRhcmdldC52YWx1ZS50b1N0cmluZygpLnRyaW0oKSA6IG51bGw7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUodXBkYXRlKTtcbiAgICB9XG5cbiAgICByZW5kZXIgKCkge1xuICAgICAgICBsZXQgZGlzYWJsZWQgPSBudWxsLFxuICAgICAgICAgICAgYWxlcnRPcHRzID0gbnVsbDtcbiAgICBcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucmVnaXN0cmF0aW9uLnN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgYWxlcnRPcHRzID0ge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2RhbmdlcicsXG4gICAgICAgICAgICAgICAgdGV4dDogdGhpcy5wcm9wcy5yZWdpc3RyYXRpb24uZXJyb3IgfHwgJ0Vycm9yLCB3cm9uZyBlbWFpbCBvciBwYXNzd29yZCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnJlZ2lzdHJhdGlvbi5zdGF0dXMgPT09ICdzZW5kJykge1xuICAgICAgICAgICAgZGlzYWJsZWQgPSAnZGlzYWJsZWQnO1xuICAgICAgICAgICAgYWxlcnRPcHRzID0ge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2luZm8nLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdMb2FkaW5nLCBwbGVhc2Ugd2FpdCcsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5yZWdpc3RyYXRpb24uc3RhdHVzID09PSAnc3VjY2VzcycpIHtcbiAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiAnUmVnaXN0cmF0aW9uIGlzIHN1Y2Nlc3NmdWxseSwgcGxlYXNlIGxvZ2luLicsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLW9mZnNldC0zIGNvbC1sZy02XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbCBwYW5lbC1kZWZhdWx0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtaGVhZGluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInBhbmVsLXRpdGxlXCI+UmVnaXN0cmF0aW9uPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9ezo6dGhpcy5mb3JtU3VibWl0fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJlbWFpbFwiPkVtYWlsPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZW1haWxcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW1haWxcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17dGhpcy5wcm9wcy5yZWdpc3RyYXRpb24uZW1haWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17Ojp0aGlzLmZpZWxkQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInBhc3N3b3JkXCI+UGFzc3dvcmQ8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwicGFzc3dvcmRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiUGFzc3dvcmRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17dGhpcy5wcm9wcy5yZWdpc3RyYXRpb24ucGFzc3dvcmR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17Ojp0aGlzLmZpZWxkQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImNvbmZpcm1QYXNzd29yZFwiPkNvbmZpcm0gcGFzc3dvcmQ8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJjb25maXJtUGFzc3dvcmRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQ29uZmlybSBwYXNzd29yZFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXt0aGlzLnByb3BzLnJlZ2lzdHJhdGlvbi5jb25maXJtUGFzc3dvcmR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17Ojp0aGlzLmZpZWxkQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBbGVydE1lc3NhZ2Ugb3B0cz17YWxlcnRPcHRzfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1ibG9ja1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+UmVnaXN0cmF0aW9uPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0ndGV4dC1jZW50ZXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Jy9sb2dpbic+TG9naW48L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgfVxufVxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XG4gICAgcmV0dXJuIHsuLi5zdGF0ZX1cbn1cbkxvZ2luQ29tcCA9IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShMb2dpbkNvbXApXG5cbmV4cG9ydCBkZWZhdWx0IExvZ2luQ29tcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3N0YXRpY19zcmMvYXV0aC9SZWdDb21wLmpzIiwiY29uc3QgaW5pdFN0YXRlID0ge1xuICAgIGxvZ2luOiBudWxsLFxuICAgIHBhc3N3b3JkOiBudWxsLFxuICAgIGNvbmZpcm1QYXNzd29yZDogbnVsbCxcbiAgICBzdGF0dXM6IG51bGwsXG4gICAgZXJyb3I6IG51bGwsXG59O1xuXG5jb25zdCByZWdpc3RyYXRpb24gPSAoc3RhdGUgPSBpbml0U3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGxldCBkYXRhID0gey4uLnN0YXRlfTtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ1JFR19TRU5EJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3NlbmQnO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ1JFR19TVUNDRVNTJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ1JFR19FUlJPUic6XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdlcnJvcic7XG4gICAgICAgICAgICBkYXRhLmVycm9yID0gYWN0aW9uLmVycm9yO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGVcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlZ2lzdHJhdGlvblxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zdGF0aWNfc3JjL2F1dGgvUmVnUmVkLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==