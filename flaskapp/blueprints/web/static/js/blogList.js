webpackJsonp([7],{322:function(e,t,r){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}var n=r(1),o=a(n),l=r(10),s=r(7);r(17),r(18);var u=r(8),i=r(323),c=a(i),p=r(19),f=a(p),d=r(324),g=a(d),m=r(20),h=(0,m.configureStore)({auth:f.default,blogList:g.default}),b=(0,u.layout)({comp:c.default,forAuth:!0});(0,l.render)(o.default.createElement(s.Provider,{store:h},o.default.createElement(b,null)),document.getElementById("root"))},323:function(e,t,r){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},s=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}(),u=r(1),i=function(e){return e&&e.__esModule?e:{default:e}}(u),c=r(7),p=r(23),f=r(29),d=r(8),g=function(e){function t(e){a(this,t);var r=n(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.state={start:r.props.blogList.start,blogs:r.props.blogList.blogs},r}return o(t,e),s(t,[{key:"componentWillMount",value:function(){this.props.dispatch((0,p.graphql)({type:"BLOG_LIST",start:this.props.blogList.start,perpage:this.props.blogList.perpage}))}},{key:"changePage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.props.dispatch((0,p.graphql)({type:"BLOG_LIST",start:e,perpage:this.props.blogList.perpage}))}},{key:"getBlogItems",value:function(){var e=(0,f.chunk)(this.props.blogList.blogs,3);return(0,f.map)(e,function(e){var t=(0,f.map)(e,function(e){return i.default.createElement("div",{className:"col-md-4"},i.default.createElement("div",{className:"panel panel-default"},i.default.createElement("div",{className:"panel-heading"},i.default.createElement("h4",{className:"panel-title"},i.default.createElement("a",{href:"/blog/"+e.id},e.title))),i.default.createElement("div",{className:"panel-body"},e.text),i.default.createElement("div",{className:"panel-footer"},i.default.createElement("p",null,i.default.createElement("span",{className:"glyphicon glyphicon-user"})," ",e.userName),i.default.createElement("p",null,i.default.createElement("span",{className:"glyphicon glyphicon-time"})," ",e.date))))});return i.default.createElement("div",{className:"row"},t)})}},{key:"render",value:function(){var e=null;"error"==this.props.blogList.status?e={className:"danger",text:this.props.blogList.error}:"send"===this.props.blogList.status&&(e={className:"info",text:"Loading, please wait"});var t={start:this.props.blogList.start,perpage:this.props.blogList.perpage,count:this.props.blogList.count,items:this.getBlogItems(),changePage:this.changePage.bind(this)};return i.default.createElement("div",null,i.default.createElement(d.AlertMessage,{opts:e}),i.default.createElement(d.PaginatorLayout,{param:t}))}}]),t}(i.default.Component),m=function(e){return l({},e)};g=(0,c.connect)(m)(g),t.default=g},324:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},n={userId:window.localParams.userId?parseInt(window.localParams.userId):null,start:window.localParams.start?parseInt(window.localParams.start):0,perpage:window.localParams.perpage?parseInt(window.localParams.perpage):9,blogs:[],count:0,status:null,error:null},o=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n,t=arguments[1],r=a({},e);switch(t.type){case"BLOG_LIST_SEND":return r.start=t.start,r.status="send",r;case"BLOG_LIST_SUCCESS":return r.status="success",r.blogs=t.data.getBlogList.blogs,r.count=t.data.getBlogList.count,r;case"BLOG_LIST_ERROR":return r.status="error",r.error=t.error,r;default:return e}};t.default=o}},[322]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYmxvZ0xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljX3NyYy9ibG9nTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zdGF0aWNfc3JjL2Jsb2cvTGlzdENvbXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljX3NyYy9ibG9nL0xpc3RSZWQuanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wIiwiMzIyIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX3JlYWN0RG9tIiwiX3JlYWN0UmVkdXgiLCJfY29tcG9uZW50IiwiX0xpc3RDb21wIiwiX0xpc3RDb21wMiIsIl9Mb2dpblJlZCIsIl9Mb2dpblJlZDIiLCJfTGlzdFJlZCIsIl9MaXN0UmVkMiIsIl9jb25maWd1cmVTdG9yZSIsInN0b3JlIiwiY29uZmlndXJlU3RvcmUiLCJhdXRoIiwiYmxvZ0xpc3QiLCJDb21wIiwibGF5b3V0IiwiY29tcCIsIkxpc3RDb21wIiwiZm9yQXV0aCIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCIzMjMiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiY2FsbCIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZGVmaW5lUHJvcGVydHkiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfYWN0aW9uIiwiX2xvZGFzaCIsIkJsb2dMaXN0Q29tcCIsIl9SZWFjdCRDb21wb25lbnQiLCJ0aGlzIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsInN0YXRlIiwic3RhcnQiLCJibG9ncyIsImRpc3BhdGNoIiwiZ3JhcGhxbCIsInR5cGUiLCJwZXJwYWdlIiwidW5kZWZpbmVkIiwiY2h1bmtlZEl0ZW1zIiwiY2h1bmsiLCJtYXAiLCJwYXJ0aXRpb24iLCJibG9nIiwiY2xhc3NOYW1lIiwiaHJlZiIsImlkIiwidGl0bGUiLCJ0ZXh0IiwidXNlck5hbWUiLCJkYXRlIiwiYWxlcnRPcHRzIiwic3RhdHVzIiwiZXJyb3IiLCJwYWdlclBhcmFtIiwiY291bnQiLCJpdGVtcyIsImdldEJsb2dJdGVtcyIsImNoYW5nZVBhZ2UiLCJiaW5kIiwiQWxlcnRNZXNzYWdlIiwib3B0cyIsIlBhZ2luYXRvckxheW91dCIsInBhcmFtIiwiUmVhY3QiLCJDb21wb25lbnQiLCJtYXBTdGF0ZVRvUHJvcHMiLCJjb25uZWN0IiwiMzI0IiwiaW5pdFN0YXRlIiwidXNlcklkIiwid2luZG93IiwibG9jYWxQYXJhbXMiLCJwYXJzZUludCIsImFjdGlvbiIsImRhdGEiLCJnZXRCbG9nTGlzdCJdLCJtYXBwaW5ncyI6IkFBQUFBLGNBQWMsSUFFUkMsSUFDQSxTQUFVQyxFQUFRQyxFQUFTQyxHQUVqQyxZQStCQSxTQUFTQyxHQUF1QkMsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRRSxRQUFTRixHQ3BDdkYsR0FBQUcsR0FBQUwsRUFBQSxHRFVJTSxFQUFVTCxFQUF1QkksR0NUckNFLEVBQUFQLEVBQUEsSUFDQVEsRUFBQVIsRUFB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SSxFQUFHQSxFQUFJQyxVQUFVQyxPQUFRRixJQUFLLENBQUUsR0FBSUcsR0FBU0YsVUFBVUQsRUFBSSxLQUFLLEdBQUlJLEtBQU9ELEdBQWNoQixPQUFPRCxVQUFVbUIsZUFBZXhCLEtBQUtzQixFQUFRQyxLQUFRTCxFQUFPSyxHQUFPRCxFQUFPQyxJQUFZLE1BQU9MLElHL09uUDBELEdBQ0FDLE9BQVFDLE9BQU9DLFlBQVlGLE9BQVNHLFNBQVNGLE9BQU9DLFlBQVlGLFFBQVUsS0FDMUV0QyxNQUFPdUMsT0FBT0MsWUFBWXhDLE1BQVF5QyxTQUFTRixPQUFPQyxZQUFZeEMsT0FBUyxFQUN2RUssUUFBU2tDLE9BQU9DLFlBQVluQyxRQUFVb0MsU0FBU0YsT0FBT0MsWUFBWW5DLFNBQVcsRUFDN0VKLFNBQ0FzQixNQUFPLEVBQ1BILE9BQVEsS0FDUkMsTUFBTyxNQUVMOUUsRUFBVyxXQUErQixHQUE5QndELEdBQThCbEIsVUFBQUMsT0FBQSxPQUFBd0IsS0FBQXpCLFVBQUEsR0FBQUEsVUFBQSxHQUF0QndELEVBQVdLLEVBQVc3RCxVQUFBLEdBQ3hDOEQsT0FBVzVDLEVBQ2YsUUFBUTJDLEVBQU90QyxNQUNYLElBQUssaUJBR0QsTUFGQXVDLEdBQUszQyxNQUFRMEMsRUFBTzFDLE1BQ3BCMkMsRUFBS3ZCLE9BQVMsT0FDUHVCLENBQ1gsS0FBSyxvQkFJRCxNQUhBQSxHQUFLdkIsT0FBUyxVQUNkdUIsRUFBSzFDLE1BQVF5QyxFQUFPQyxLQUFLQyxZQUFZM0MsTUFDckMwQyxFQUFLcEIsTUFBUW1CLEVBQU9DLEtBQUtDLFlBQVlyQixNQUM5Qm9CLENBQ1gsS0FBSyxrQkFHRCxNQUZBQSxHQUFLdkIsT0FBUyxRQUNkdUIsRUFBS3RCLE1BQVFxQixFQUFPckIsTUFDYnNCLENBQ1gsU0FDSSxNQUFPNUMsSUh3UG5CN0UsR0FBUUssUUdwUE9nQixLSHdQWiIsImZpbGUiOiJibG9nTGlzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIndlYnBhY2tKc29ucChbN10se1xuXG4vKioqLyAzMjI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX3JlYWN0UmVkdXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cbnZhciBfY29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9MaXN0Q29tcCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIzKTtcblxudmFyIF9MaXN0Q29tcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaXN0Q29tcCk7XG5cbnZhciBfTG9naW5SZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblxudmFyIF9Mb2dpblJlZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2dpblJlZCk7XG5cbnZhciBfTGlzdFJlZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzI0KTtcblxudmFyIF9MaXN0UmVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xpc3RSZWQpO1xuXG52YXIgX2NvbmZpZ3VyZVN0b3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzdG9yZSA9ICgwLCBfY29uZmlndXJlU3RvcmUuY29uZmlndXJlU3RvcmUpKHtcblx0YXV0aDogX0xvZ2luUmVkMi5kZWZhdWx0LFxuXHRibG9nTGlzdDogX0xpc3RSZWQyLmRlZmF1bHRcbn0pO1xuXG52YXIgQ29tcCA9ICgwLCBfY29tcG9uZW50LmxheW91dCkoeyBjb21wOiBfTGlzdENvbXAyLmRlZmF1bHQsIGZvckF1dGg6IHRydWUgfSk7XG4oMCwgX3JlYWN0RG9tLnJlbmRlcikoX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdF9yZWFjdFJlZHV4LlByb3ZpZGVyLFxuXHR7IHN0b3JlOiBzdG9yZSB9LFxuXHRfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wLCBudWxsKVxuKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMjM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0UmVkdXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX2FjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXG52YXIgX2xvZGFzaCA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXG52YXIgX2NvbXBvbmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEJsb2dMaXN0Q29tcCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEJsb2dMaXN0Q29tcCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBCbG9nTGlzdENvbXAocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJsb2dMaXN0Q29tcCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJsb2dMaXN0Q29tcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJsb2dMaXN0Q29tcCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBfdGhpcy5wcm9wcy5ibG9nTGlzdC5zdGFydCxcbiAgICAgICAgICAgIGJsb2dzOiBfdGhpcy5wcm9wcy5ibG9nTGlzdC5ibG9nc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEJsb2dMaXN0Q29tcCwgW3tcbiAgICAgICAga2V5OiAnY29tcG9uZW50V2lsbE1vdW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goKDAsIF9hY3Rpb24uZ3JhcGhxbCkoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdCTE9HX0xJU1QnLFxuICAgICAgICAgICAgICAgIHN0YXJ0OiB0aGlzLnByb3BzLmJsb2dMaXN0LnN0YXJ0LFxuICAgICAgICAgICAgICAgIHBlcnBhZ2U6IHRoaXMucHJvcHMuYmxvZ0xpc3QucGVycGFnZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjaGFuZ2VQYWdlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVBhZ2UoKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG5cbiAgICAgICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goKDAsIF9hY3Rpb24uZ3JhcGhxbCkoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdCTE9HX0xJU1QnLFxuICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgICAgICBwZXJwYWdlOiB0aGlzLnByb3BzLmJsb2dMaXN0LnBlcnBhZ2VcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0QmxvZ0l0ZW1zJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJsb2dJdGVtcygpIHtcbiAgICAgICAgICAgIHZhciBjaHVua2VkSXRlbXMgPSAoMCwgX2xvZGFzaC5jaHVuaykodGhpcy5wcm9wcy5ibG9nTGlzdC5ibG9ncywgMyk7XG4gICAgICAgICAgICB2YXIgYmxvZ3MgPSAoMCwgX2xvZGFzaC5tYXApKGNodW5rZWRJdGVtcywgZnVuY3Rpb24gKGJsb2dzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnRpdGlvbiA9ICgwLCBfbG9kYXNoLm1hcCkoYmxvZ3MsIGZ1bmN0aW9uIChibG9nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjb2wtbWQtNCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFuZWwgcGFuZWwtZGVmYXVsdCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFuZWwtaGVhZGluZycgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaDQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbC10aXRsZScgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGhyZWY6IFwiL2Jsb2cvXCIgKyBibG9nLmlkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvZy50aXRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFuZWwtYm9keScgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvZy50ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFuZWwtZm9vdGVyJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnZ2x5cGhpY29uIGdseXBoaWNvbi11c2VyJyB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXHhBMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9nLnVzZXJOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3AnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6ICdnbHlwaGljb24gZ2x5cGhpY29uLXRpbWUnIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xceEEwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2cuZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdyb3cnIH0sXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpdGlvblxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGJsb2dzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIGFsZXJ0T3B0cyA9IG51bGwsXG4gICAgICAgICAgICAgICAgYmxvZ3MgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5ibG9nTGlzdC5zdGF0dXMgPT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnZGFuZ2VyJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGhpcy5wcm9wcy5ibG9nTGlzdC5lcnJvclxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuYmxvZ0xpc3Quc3RhdHVzID09PSAnc2VuZCcpIHtcbiAgICAgICAgICAgICAgICBhbGVydE9wdHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2luZm8nLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnTG9hZGluZywgcGxlYXNlIHdhaXQnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBhZ2VyUGFyYW0gPSB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHRoaXMucHJvcHMuYmxvZ0xpc3Quc3RhcnQsXG4gICAgICAgICAgICAgICAgcGVycGFnZTogdGhpcy5wcm9wcy5ibG9nTGlzdC5wZXJwYWdlLFxuICAgICAgICAgICAgICAgIGNvdW50OiB0aGlzLnByb3BzLmJsb2dMaXN0LmNvdW50LFxuICAgICAgICAgICAgICAgIGl0ZW1zOiB0aGlzLmdldEJsb2dJdGVtcygpLFxuICAgICAgICAgICAgICAgIGNoYW5nZVBhZ2U6IHRoaXMuY2hhbmdlUGFnZS5iaW5kKHRoaXMpXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tcG9uZW50LkFsZXJ0TWVzc2FnZSwgeyBvcHRzOiBhbGVydE9wdHMgfSksXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbXBvbmVudC5QYWdpbmF0b3JMYXlvdXQsIHsgcGFyYW06IHBhZ2VyUGFyYW0gfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQmxvZ0xpc3RDb21wO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxudmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUpO1xufTtcbkJsb2dMaXN0Q29tcCA9ICgwLCBfcmVhY3RSZWR1eC5jb25uZWN0KShtYXBTdGF0ZVRvUHJvcHMpKEJsb2dMaXN0Q29tcCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEJsb2dMaXN0Q29tcDtcblxuLyoqKi8gfSksXG5cbi8qKiovIDMyNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgaW5pdFN0YXRlID0ge1xuICAgIHVzZXJJZDogd2luZG93LmxvY2FsUGFyYW1zLnVzZXJJZCA/IHBhcnNlSW50KHdpbmRvdy5sb2NhbFBhcmFtcy51c2VySWQpIDogbnVsbCxcbiAgICBzdGFydDogd2luZG93LmxvY2FsUGFyYW1zLnN0YXJ0ID8gcGFyc2VJbnQod2luZG93LmxvY2FsUGFyYW1zLnN0YXJ0KSA6IDAsXG4gICAgcGVycGFnZTogd2luZG93LmxvY2FsUGFyYW1zLnBlcnBhZ2UgPyBwYXJzZUludCh3aW5kb3cubG9jYWxQYXJhbXMucGVycGFnZSkgOiA5LFxuICAgIGJsb2dzOiBbXSxcbiAgICBjb3VudDogMCxcbiAgICBzdGF0dXM6IG51bGwsXG4gICAgZXJyb3I6IG51bGxcbn07XG52YXIgYmxvZ0xpc3QgPSBmdW5jdGlvbiBibG9nTGlzdCgpIHtcbiAgICB2YXIgc3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGluaXRTdGF0ZTtcbiAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gICAgdmFyIGRhdGEgPSBfZXh0ZW5kcyh7fSwgc3RhdGUpO1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnQkxPR19MSVNUX1NFTkQnOlxuICAgICAgICAgICAgZGF0YS5zdGFydCA9IGFjdGlvbi5zdGFydDtcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3NlbmQnO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ0JMT0dfTElTVF9TVUNDRVNTJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgICAgICAgICAgZGF0YS5ibG9ncyA9IGFjdGlvbi5kYXRhLmdldEJsb2dMaXN0LmJsb2dzO1xuICAgICAgICAgICAgZGF0YS5jb3VudCA9IGFjdGlvbi5kYXRhLmdldEJsb2dMaXN0LmNvdW50O1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGNhc2UgJ0JMT0dfTElTVF9FUlJPUic6XG4gICAgICAgICAgICBkYXRhLnN0YXR1cyA9ICdlcnJvcic7XG4gICAgICAgICAgICBkYXRhLmVycm9yID0gYWN0aW9uLmVycm9yO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gYmxvZ0xpc3Q7XG5cbi8qKiovIH0pXG5cbn0sWzMyMl0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBibG9nTGlzdC5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSdcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5cbmltcG9ydCAnYm9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5jc3MnO1xuaW1wb3J0ICcuL3N0eWxlcy9pbmRleC5zY3NzJ1xuXG5pbXBvcnQge2xheW91dH0gZnJvbSAnLi9oZWxwZXJzL2NvbXBvbmVudCdcbmltcG9ydCBMaXN0Q29tcCBmcm9tICcuL2Jsb2cvTGlzdENvbXAnXG5cbmltcG9ydCBhdXRoIGZyb20gJy4vYXV0aC9Mb2dpblJlZCdcbmltcG9ydCBibG9nTGlzdCBmcm9tICcuL2Jsb2cvTGlzdFJlZCdcblxuaW1wb3J0IHtjb25maWd1cmVTdG9yZX0gZnJvbSAnLi9oZWxwZXJzL2NvbmZpZ3VyZVN0b3JlJ1xuXG5sZXQgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XG5cdGF1dGg6IGF1dGgsXG5cdGJsb2dMaXN0OiBibG9nTGlzdCxcbn0pO1xuXG5sZXQgQ29tcCA9IGxheW91dCh7Y29tcDogTGlzdENvbXAsIGZvckF1dGg6IHRydWV9KTtcbnJlbmRlcihcblx0PFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG5cdFx0PENvbXAgLz5cblx0PC9Qcm92aWRlcj4sXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JylcbilcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zdGF0aWNfc3JjL2Jsb2dMaXN0LmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBncmFwaHFsIH0gZnJvbSAnLi4vaGVscGVycy9hY3Rpb24nO1xuaW1wb3J0IHtmb3JFYWNoLCBjaHVuaywgbWFwfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtBbGVydE1lc3NhZ2UsIFBhZ2luYXRvckxheW91dH0gZnJvbSAnLi4vaGVscGVycy9jb21wb25lbnQnO1xuXG5jbGFzcyBCbG9nTGlzdENvbXAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc3RhcnQ6IHRoaXMucHJvcHMuYmxvZ0xpc3Quc3RhcnQsXG4gICAgICAgICAgICBibG9nczogdGhpcy5wcm9wcy5ibG9nTGlzdC5ibG9ncyxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxNb3VudCAoKSB7XG4gICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goZ3JhcGhxbCh7XG4gICAgICAgICAgICB0eXBlOiAnQkxPR19MSVNUJyxcbiAgICAgICAgICAgIHN0YXJ0OiB0aGlzLnByb3BzLmJsb2dMaXN0LnN0YXJ0LCBcbiAgICAgICAgICAgIHBlcnBhZ2U6IHRoaXMucHJvcHMuYmxvZ0xpc3QucGVycGFnZSwgXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBjaGFuZ2VQYWdlIChzdGFydCA9IDApIHtcbiAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChncmFwaHFsKHtcbiAgICAgICAgICAgIHR5cGU6ICdCTE9HX0xJU1QnLFxuICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LCBcbiAgICAgICAgICAgIHBlcnBhZ2U6IHRoaXMucHJvcHMuYmxvZ0xpc3QucGVycGFnZSwgXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBnZXRCbG9nSXRlbXMgKCkge1xuICAgICAgICBsZXQgY2h1bmtlZEl0ZW1zID0gY2h1bmsodGhpcy5wcm9wcy5ibG9nTGlzdC5ibG9ncywgMyk7XG4gICAgICAgIGxldCBibG9ncyA9IG1hcChjaHVua2VkSXRlbXMsIGJsb2dzID0+IHtcbiAgICAgICAgICAgIGxldCBwYXJ0aXRpb24gPSBtYXAoYmxvZ3MsIGJsb2cgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImNvbC1tZC00XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwgcGFuZWwtZGVmYXVsdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbC1oZWFkaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cInBhbmVsLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWYgPSB7XCIvYmxvZy9cIiArIGJsb2cuaWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2Jsb2cudGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YmxvZy50ZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsLWZvb3RlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXVzZXJcIj48L3NwYW4+Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtibG9nLnVzZXJOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aW1lXCI+PC9zcGFuPiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YmxvZy5kYXRlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj4gXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+e3BhcnRpdGlvbn08L2Rpdj5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGJsb2dzO1xuICAgIH1cblxuICAgIFxuXG4gICAgcmVuZGVyICgpIHtcbiAgICAgICAgbGV0IGFsZXJ0T3B0cyA9IG51bGwsXG4gICAgICAgICAgICBibG9ncyA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuYmxvZ0xpc3Quc3RhdHVzID09ICdlcnJvcicpIHtcbiAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdkYW5nZXInLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMucHJvcHMuYmxvZ0xpc3QuZXJyb3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmJsb2dMaXN0LnN0YXR1cyA9PT0gJ3NlbmQnKSB7XG4gICAgICAgICAgICBhbGVydE9wdHMgPSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnaW5mbycsXG4gICAgICAgICAgICAgICAgdGV4dDogJ0xvYWRpbmcsIHBsZWFzZSB3YWl0JyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwYWdlclBhcmFtID0ge1xuICAgICAgICAgICAgc3RhcnQ6IHRoaXMucHJvcHMuYmxvZ0xpc3Quc3RhcnQsXG4gICAgICAgICAgICBwZXJwYWdlOiB0aGlzLnByb3BzLmJsb2dMaXN0LnBlcnBhZ2UsXG4gICAgICAgICAgICBjb3VudDogdGhpcy5wcm9wcy5ibG9nTGlzdC5jb3VudCxcbiAgICAgICAgICAgIGl0ZW1zOiB0aGlzLmdldEJsb2dJdGVtcygpLFxuICAgICAgICAgICAgY2hhbmdlUGFnZTogOjp0aGlzLmNoYW5nZVBhZ2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIDxkaXY+XG4gICAgICAgICAgICA8QWxlcnRNZXNzYWdlIG9wdHM9e2FsZXJ0T3B0c30gLz5cbiAgICAgICAgICAgIDxQYWdpbmF0b3JMYXlvdXQgcGFyYW09e3BhZ2VyUGFyYW19IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICB9XG59XG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcbiAgICByZXR1cm4gey4uLnN0YXRlfVxufVxuQmxvZ0xpc3RDb21wID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKEJsb2dMaXN0Q29tcClcblxuZXhwb3J0IGRlZmF1bHQgQmxvZ0xpc3RDb21wXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3RhdGljX3NyYy9ibG9nL0xpc3RDb21wLmpzIiwibGV0IGluaXRTdGF0ZSA9IHtcbiAgICB1c2VySWQ6IHdpbmRvdy5sb2NhbFBhcmFtcy51c2VySWQgPyBwYXJzZUludCh3aW5kb3cubG9jYWxQYXJhbXMudXNlcklkKSA6IG51bGwsXG4gICAgc3RhcnQ6IHdpbmRvdy5sb2NhbFBhcmFtcy5zdGFydCA/IHBhcnNlSW50KHdpbmRvdy5sb2NhbFBhcmFtcy5zdGFydCkgOiAwLFxuICAgIHBlcnBhZ2U6IHdpbmRvdy5sb2NhbFBhcmFtcy5wZXJwYWdlID8gcGFyc2VJbnQod2luZG93LmxvY2FsUGFyYW1zLnBlcnBhZ2UpIDogOSxcbiAgICBibG9nczogW10sXG4gICAgY291bnQ6IDAsXG4gICAgc3RhdHVzOiBudWxsLFxuICAgIGVycm9yOiBudWxsLFxufTtcbmNvbnN0IGJsb2dMaXN0ID0gKHN0YXRlID0gaW5pdFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBsZXQgZGF0YSA9IHsuLi5zdGF0ZX07XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdCTE9HX0xJU1RfU0VORCc6XG4gICAgICAgICAgICBkYXRhLnN0YXJ0ID0gYWN0aW9uLnN0YXJ0O1xuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnc2VuZCc7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgY2FzZSAnQkxPR19MSVNUX1NVQ0NFU1MnOlxuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnc3VjY2Vzcyc7XG4gICAgICAgICAgICBkYXRhLmJsb2dzID0gYWN0aW9uLmRhdGEuZ2V0QmxvZ0xpc3QuYmxvZ3M7XG4gICAgICAgICAgICBkYXRhLmNvdW50ID0gYWN0aW9uLmRhdGEuZ2V0QmxvZ0xpc3QuY291bnQ7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgY2FzZSAnQkxPR19MSVNUX0VSUk9SJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ2Vycm9yJztcbiAgICAgICAgICAgIGRhdGEuZXJyb3IgPSBhY3Rpb24uZXJyb3I7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYmxvZ0xpc3RcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zdGF0aWNfc3JjL2Jsb2cvTGlzdFJlZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=