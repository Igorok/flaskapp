webpackJsonp([1],{319:function(e,t,r){"use strict";function s(e){return e&&e.__esModule?e:{default:e}}var n=r(1),a=s(n),u=r(10),o=r(7);r(17),r(18);var l=r(8),i=r(320),c=s(i),d=r(19),p=s(d),f=r(321),h=s(f),m=r(20),E=(0,m.configureStore)({auth:p.default,userList:h.default}),g=(0,l.layout)({comp:c.default,forAuth:!0});(0,u.render)(a.default.createElement(o.Provider,{store:E},a.default.createElement(g,null)),document.getElementById("root"))},320:function(e,t,r){"use strict";function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e},o=function(){function e(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,r,s){return r&&e(t.prototype,r),s&&e(t,s),t}}(),l=r(1),i=function(e){return e&&e.__esModule?e:{default:e}}(l),c=r(7),d=r(23),p=r(29),f=r(8),h=function(e){function t(){return s(this,t),n(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,e),o(t,[{key:"friendRequest",value:function(e){return e.preventDefault(),this.props.friendRequest(this.props.user.id)}},{key:"friendRemove",value:function(e){return e.preventDefault(),this.props.friendRemove(this.props.user.id)}},{key:"render",value:function(){var e=this.props.user.online?"success":"active",t=null;return t=null!==this.props.user.selfFriendId&&null!==this.props.user.friendUserId?i.default.createElement("button",{className:"btn btn-default",onClick:this.friendRemove.bind(this)},i.default.createElement("span",{className:"glyphicon glyphicon-minus"}),"  Remove from friends"):null!==this.props.user.selfFriendId?i.default.createElement("button",{className:"btn btn-default",onClick:this.friendRequest.bind(this)},i.default.createElement("span",{className:"glyphicon glyphicon-plus"}),"  Approve friend"):null!==this.props.user.friendUserId?i.default.createElement("button",{disabled:!0,className:"btn btn-default",onClick:this.friendRequest.bind(this)},i.default.createElement("span",{className:"glyphicon glyphicon-plus"}),"  Add to friends"):i.default.createElement("button",{className:"btn btn-default",onClick:this.friendRequest.bind(this)},i.default.createElement("span",{className:"glyphicon glyphicon-plus"}),"  Add to friends"),i.default.createElement("tr",{className:e},i.default.createElement("td",null,i.default.createElement("span",{className:"glyphicon glyphicon-user"})," ",i.default.createElement("span",null,this.props.user.login)),i.default.createElement("td",null,this.props.user.dtActive),i.default.createElement("td",{className:"text-right"},t," ",i.default.createElement("button",{className:"btn btn-default"},i.default.createElement("span",{className:"glyphicon glyphicon-envelope"}),"  Send message")))}}]),t}(i.default.Component),m=function(e){function t(e){s(this,t);var r=n(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.state={start:r.props.userList.start,users:r.props.userList.users},r}return a(t,e),o(t,[{key:"componentWillMount",value:function(){this.changePage(this.props.userList.start)}},{key:"changePage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.props.dispatch((0,d.graphql)({type:"USER_LIST",start:e,perpage:this.props.userList.perpage}))}},{key:"friendRequest",value:function(e){this.props.dispatch((0,d.graphql)({type:"FRIEND_REQUEST",id:e}))}},{key:"friendRemove",value:function(e){this.props.dispatch((0,d.graphql)({type:"FRIEND_REMOVE",id:e}))}},{key:"getUserItems",value:function(){var e=this,t=(0,p.map)(this.props.userList.users,function(t){return i.default.createElement(h,{user:t,friendRequest:e.friendRequest.bind(e),friendRemove:e.friendRemove.bind(e)})});return i.default.createElement("table",{className:"table table-hover"},i.default.createElement("tbody",null,t))}},{key:"render",value:function(){var e=null;"error"==this.props.userList.status?e={className:"danger",text:this.props.userList.error}:"send"===this.props.userList.status&&(e={className:"info",text:"Loading, please wait"});var t={start:this.props.userList.start,perpage:this.props.userList.perpage,count:this.props.userList.count,items:this.getUserItems(),changePage:this.changePage.bind(this)};return i.default.createElement("div",null,i.default.createElement(f.AlertMessage,{opts:e}),i.default.createElement(f.PaginatorLayout,{param:t}))}}]),t}(i.default.Component),E=function(e){return u({},e)};m=(0,c.connect)(E)(m),t.default=m},321:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e},n=r(29),a={userId:window.localParams.userId?parseInt(window.localParams.userId):null,start:window.localParams.start?parseInt(window.localParams.start):0,perpage:window.localParams.perpage?parseInt(window.localParams.perpage):9,users:[],count:0,status:null,error:null},u=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a,t=arguments[1];console.log("state",e,"action",t);var r=s({},e);switch(t.type){case"USER_LIST_SEND":return r.start=t.start,r.status="send",r;case"USER_LIST_SUCCESS":return r.status="success",r.users=t.data.getUserList.users,r.count=t.data.getUserList.count,r;case"USER_LIST_ERROR":return r.status="error",r.error=t.error,r;case"FRIEND_REQUEST_SEND":return r.status="send",r;case"FRIEND_REQUEST_SUCCESS":return r.status="success",(0,n.forEach)(r.users,function(e){parseInt(e.id)==t.data.friendRequest.friendId&&(e.friendUserId=t.data.friendRequest.userId)}),r;case"FRIEND_REQUEST_ERROR":return r.status="error",r;case"FRIEND_REMOVE_SEND":return r.status="send",r;case"FRIEND_REMOVE_SUCCESS":return r.status="success",(0,n.forEach)(r.users,function(e){console.log("action.data.friendRemove.id",t.data.friendRemove.id),parseInt(e.id)==t.data.friendRemove.friendId&&(e.friendUserId=null)}),r;case"FRIEND_REMOVE_ERROR":return r.status="error",r;default:return e}};t.default=u}},[319]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,