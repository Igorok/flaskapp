webpackJsonp([1],{319:function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}var s=r(1),a=n(s),o=r(10),u=r(7);r(17),r(18);var i=r(8),l=r(320),c=n(l),p=r(19),f=n(p),d=r(321),h=n(d),g=r(20),v=(0,g.configureStore)({auth:f.default,userList:h.default}),m=(0,i.layout)({comp:c.default,forAuth:!0});(0,o.render)(a.default.createElement(u.Provider,{store:v},a.default.createElement(m,null)),document.getElementById("root"))},320:function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=r(1),l=function(e){return e&&e.__esModule?e:{default:e}}(i),c=r(7),p=r(23),f=r(30),d=r(8),h=function(e){function t(e){n(this,t);var r=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.state={start:r.props.userList.start,users:r.props.userList.users},r}return a(t,e),u(t,[{key:"componentWillMount",value:function(){this.changePage(this.props.userList.start)}},{key:"changePage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.props.dispatch((0,p.graphql)({type:"USER_LIST",start:e,perpage:this.props.userList.perpage}))}},{key:"getOnlineIcon",value:function(e){var t="glyphicon glyphicon-user ";return t+=e?"text-success":"text-warning",l.default.createElement("span",{className:t})}},{key:"getUserItems",value:function(){var e=this;return(0,f.map)(this.props.userList.users,function(t){return l.default.createElement("div",{className:"row"},l.default.createElement("div",{className:"col-md-4"},e.getOnlineIcon(t.online)," ",t.login," ",t.dtActive))})}},{key:"render",value:function(){var e=null;"error"==this.props.userList.status?e={className:"danger",text:this.props.userList.error}:"send"===this.props.userList.status&&(e={className:"info",text:"Loading, please wait"});var t={start:this.props.userList.start,perpage:this.props.userList.perpage,count:this.props.userList.count,items:this.getUserItems(),changePage:this.changePage.bind(this)};return l.default.createElement("div",null,l.default.createElement(d.AlertMessage,{opts:e}),l.default.createElement(d.PaginatorLayout,{param:t}))}}]),t}(l.default.Component),g=function(e){return o({},e)};h=(0,c.connect)(g)(h),t.default=h},321:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s={userId:window.localParams.userId?parseInt(window.localParams.userId):null,start:window.localParams.start?parseInt(window.localParams.start):0,perpage:window.localParams.perpage?parseInt(window.localParams.perpage):9,users:[],count:0,status:null,error:null},a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s,t=arguments[1],r=n({},e);switch(t.type){case"USER_LIST_SEND":return r.start=t.start,r.status="send",r;case"USER_LIST_SUCCESS":return r.status="success",r.users=t.data.getUserList.users,r.count=t.data.getUserList.count,r;case"USER_LIST_ERROR":return r.status="error",r.error=t.error,r;default:return e}};t.default=a}},[319]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdXNlckxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljX3NyYy91c2VyTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zdGF0aWNfc3JjL3VzZXIvTGlzdENvbXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3RhdGljX3NyYy91c2VyL0xpc3RSZWQuanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wIiwiMzE5IiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX3JlYWN0RG9tIiwiX3JlYWN0UmVkdXgiLCJfY29tcG9uZW50IiwiX0xpc3RDb21wIiwiX0xpc3RDb21wMiIsIl9Mb2dpblJlZCIsIl9Mb2dpblJlZDIiLCJfTGlzdFJlZCIsIl9MaXN0UmVkMiIsIl9jb25maWd1cmVTdG9yZSIsInN0b3JlIiwiY29uZmlndXJlU3RvcmUiLCJhdXRoIiwidXNlckxpc3QiLCJDb21wIiwibGF5b3V0IiwiY29tcCIsIkxpc3RDb21wIiwiZm9yQXV0aCIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCIzMjAiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiY2FsbCIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZGVmaW5lUHJvcGVydHkiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfYWN0aW9uIiwiX2xvZGFzaCIsIlVzZXJMaXN0Q29tcCIsIl9SZWFjdCRDb21wb25lbnQiLCJ0aGlzIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsInN0YXRlIiwic3RhcnQiLCJ1c2VycyIsImNoYW5nZVBhZ2UiLCJ1bmRlZmluZWQiLCJkaXNwYXRjaCIsImdyYXBocWwiLCJ0eXBlIiwicGVycGFnZSIsIm9ubGluZSIsImNsTmFtZSIsImNsYXNzTmFtZSIsIm1hcCIsInVzZXIiLCJnZXRPbmxpbmVJY29uIiwibG9naW4iLCJkdEFjdGl2ZSIsImFsZXJ0T3B0cyIsInN0YXR1cyIsInRleHQiLCJlcnJvciIsInBhZ2VyUGFyYW0iLCJjb3VudCIsIml0ZW1zIiwiZ2V0VXNlckl0ZW1zIiwiYmluZCIsIkFsZXJ0TWVzc2FnZSIsIm9wdHMiLCJQYWdpbmF0b3JMYXlvdXQiLCJwYXJhbSIsIlJlYWN0IiwiQ29tcG9uZW50IiwibWFwU3RhdGVUb1Byb3BzIiwiY29ubmVjdCIsIjMyMSIsImluaXRTdGF0ZSIsInVzZXJJZCIsIndpbmRvdyIsImxvY2FsUGFyYW1zIiwicGFyc2VJbnQiLCJhY3Rpb24iLCJkYXRhIiwiZ2V0VXNlckxpc3QiXSwibWFwcGluZ3MiOiJBQUFBQSxjQUFjLElBRVJDLElBQ0EsU0FBVUMsRUFBUUMsRUFBU0MsR0FFakMsWUErQkEsU0FBU0MsR0FBdUJDLEdBQU8sTUFBT0EsSUFBT0EsRUFBSUMsV0FBYUQsR0FBUUUsUUFBU0YsR0NwQ3ZGLEdBQUFHLEdBQUFMLEVBQUEsR0RVSU0sRUFBVUwsRUFBdUJJLEdDVHJDRSxFQUFBUCxFQUFBLElBQ0FRLEVBQUFSLEVBQUEsRUFFQUEsR0FBQSxJQUNBQSxF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S0FBQXRCLFVBQUEsR0FBQUEsVUFBQSxHQUF0QnFELEVBQVdLLEVBQVcxRCxVQUFBLEdBQ3hDMkQsT0FBV3pDLEVBQ2YsUUFBUXdDLEVBQU9qQyxNQUNYLElBQUssaUJBR0QsTUFGQWtDLEdBQUt4QyxNQUFRdUMsRUFBT3ZDLE1BQ3BCd0MsRUFBS3ZCLE9BQVMsT0FDUHVCLENBQ1gsS0FBSyxvQkFJRCxNQUhBQSxHQUFLdkIsT0FBUyxVQUNkdUIsRUFBS3ZDLE1BQVFzQyxFQUFPQyxLQUFLQyxZQUFZeEMsTUFDckN1QyxFQUFLbkIsTUFBUWtCLEVBQU9DLEtBQUtDLFlBQVlwQixNQUM5Qm1CLENBQ1gsS0FBSyxrQkFHRCxNQUZBQSxHQUFLdkIsT0FBUyxRQUNkdUIsRUFBS3JCLE1BQVFvQixFQUFPcEIsTUFDYnFCLENBQ1gsU0FDSSxNQUFPekMsSUh3Um5CN0UsR0FBUUssUUdwUk9nQixLSHdSWiIsImZpbGUiOiJ1c2VyTGlzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIndlYnBhY2tKc29ucChbMV0se1xuXG4vKioqLyAzMTk6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG52YXIgX3JlYWN0UmVkdXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cbnZhciBfY29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9MaXN0Q29tcCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIwKTtcblxudmFyIF9MaXN0Q29tcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaXN0Q29tcCk7XG5cbnZhciBfTG9naW5SZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblxudmFyIF9Mb2dpblJlZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2dpblJlZCk7XG5cbnZhciBfTGlzdFJlZCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIxKTtcblxudmFyIF9MaXN0UmVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xpc3RSZWQpO1xuXG52YXIgX2NvbmZpZ3VyZVN0b3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzdG9yZSA9ICgwLCBfY29uZmlndXJlU3RvcmUuY29uZmlndXJlU3RvcmUpKHtcblx0YXV0aDogX0xvZ2luUmVkMi5kZWZhdWx0LFxuXHR1c2VyTGlzdDogX0xpc3RSZWQyLmRlZmF1bHRcbn0pO1xuXG52YXIgQ29tcCA9ICgwLCBfY29tcG9uZW50LmxheW91dCkoeyBjb21wOiBfTGlzdENvbXAyLmRlZmF1bHQsIGZvckF1dGg6IHRydWUgfSk7XG4oMCwgX3JlYWN0RG9tLnJlbmRlcikoX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdF9yZWFjdFJlZHV4LlByb3ZpZGVyLFxuXHR7IHN0b3JlOiBzdG9yZSB9LFxuXHRfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wLCBudWxsKVxuKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMjA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0UmVkdXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX2FjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXG52YXIgX2xvZGFzaCA9IF9fd2VicGFja19yZXF1aXJlX18oMzApO1xuXG52YXIgX2NvbXBvbmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFVzZXJMaXN0Q29tcCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFVzZXJMaXN0Q29tcCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBVc2VyTGlzdENvbXAocHJvcHMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVzZXJMaXN0Q29tcCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFVzZXJMaXN0Q29tcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFVzZXJMaXN0Q29tcCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBfdGhpcy5wcm9wcy51c2VyTGlzdC5zdGFydCxcbiAgICAgICAgICAgIHVzZXJzOiBfdGhpcy5wcm9wcy51c2VyTGlzdC51c2Vyc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFVzZXJMaXN0Q29tcCwgW3tcbiAgICAgICAga2V5OiAnY29tcG9uZW50V2lsbE1vdW50JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlUGFnZSh0aGlzLnByb3BzLnVzZXJMaXN0LnN0YXJ0KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2hhbmdlUGFnZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VQYWdlKCkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXG4gICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKCgwLCBfYWN0aW9uLmdyYXBocWwpKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnVVNFUl9MSVNUJyxcbiAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICAgICAgcGVycGFnZTogdGhpcy5wcm9wcy51c2VyTGlzdC5wZXJwYWdlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldE9ubGluZUljb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T25saW5lSWNvbihvbmxpbmUpIHtcbiAgICAgICAgICAgIHZhciBjbE5hbWUgPSAnZ2x5cGhpY29uIGdseXBoaWNvbi11c2VyICc7XG4gICAgICAgICAgICBpZiAob25saW5lKSB7XG4gICAgICAgICAgICAgICAgY2xOYW1lICs9ICd0ZXh0LXN1Y2Nlc3MnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbE5hbWUgKz0gJ3RleHQtd2FybmluZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogY2xOYW1lIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRVc2VySXRlbXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXNlckl0ZW1zKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gKDAsIF9sb2Rhc2gubWFwKSh0aGlzLnByb3BzLnVzZXJMaXN0LnVzZXJzLCBmdW5jdGlvbiAodXNlcikge1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBpZCA9IGdyYXBoZW5lLklEKClcbiAgICAgICAgICAgICAgICBsb2dpbiA9IGdyYXBoZW5lLlN0cmluZygpXG4gICAgICAgICAgICAgICAgZW1haWwgPSBncmFwaGVuZS5TdHJpbmcoKVxuICAgICAgICAgICAgICAgIGZyaWVuZCA9IGdyYXBoZW5lLkludCgpXG4gICAgICAgICAgICAgICAgb25saW5lID0gZ3JhcGhlbmUuQm9vbGVhbigpXG4gICAgICAgICAgICAgICAgZHRBY3RpdmUgPSBncmFwaGVuZS5TdHJpbmcoKVxuICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3JvdycgfSxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY29sLW1kLTQnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmdldE9ubGluZUljb24odXNlci5vbmxpbmUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1xceEEwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXIubG9naW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFx4QTAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5kdEFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgIGxldCBjaHVua2VkSXRlbXMgPSBjaHVuayh0aGlzLnByb3BzLmJsb2dMaXN0LmJsb2dzLCAzKTtcbiAgICAgICAgICAgIGxldCBibG9ncyA9IG1hcChjaHVua2VkSXRlbXMsIGJsb2dzID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcGFydGl0aW9uID0gbWFwKGJsb2dzLCBibG9nID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiY29sLW1kLTRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwgcGFuZWwtZGVmYXVsdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtaGVhZGluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3NOYW1lPVwicGFuZWwtdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWYgPSB7XCIvYmxvZy9cIiArIGJsb2cuaWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtibG9nLnRpdGxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YmxvZy50ZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwtZm9vdGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi11c2VyXCI+PC9zcGFuPiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2Jsb2cudXNlck5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRpbWVcIj48L3NwYW4+Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YmxvZy5kYXRlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+IFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJyb3dcIj57cGFydGl0aW9ufTwvZGl2PlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgcmV0dXJuIGJsb2dzO1xuICAgICAgICAgICAgICovXG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICB2YXIgYWxlcnRPcHRzID0gbnVsbDtcbiAgICAgICAgICAgIHZhciB1c2VycyA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnVzZXJMaXN0LnN0YXR1cyA9PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgYWxlcnRPcHRzID0ge1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdkYW5nZXInLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnByb3BzLnVzZXJMaXN0LmVycm9yXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51c2VyTGlzdC5zdGF0dXMgPT09ICdzZW5kJykge1xuICAgICAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnaW5mbycsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdMb2FkaW5nLCBwbGVhc2Ugd2FpdCdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcGFnZXJQYXJhbSA9IHtcbiAgICAgICAgICAgICAgICBzdGFydDogdGhpcy5wcm9wcy51c2VyTGlzdC5zdGFydCxcbiAgICAgICAgICAgICAgICBwZXJwYWdlOiB0aGlzLnByb3BzLnVzZXJMaXN0LnBlcnBhZ2UsXG4gICAgICAgICAgICAgICAgY291bnQ6IHRoaXMucHJvcHMudXNlckxpc3QuY291bnQsXG4gICAgICAgICAgICAgICAgaXRlbXM6IHRoaXMuZ2V0VXNlckl0ZW1zKCksXG4gICAgICAgICAgICAgICAgY2hhbmdlUGFnZTogdGhpcy5jaGFuZ2VQYWdlLmJpbmQodGhpcylcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuYmxvZ0xpc3Quc3RhdHVzID09ICdlcnJvcicpIHtcbiAgICAgICAgICAgICAgICBhbGVydE9wdHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2RhbmdlcicsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMucHJvcHMuYmxvZ0xpc3QuZXJyb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuYmxvZ0xpc3Quc3RhdHVzID09PSAnc2VuZCcpIHtcbiAgICAgICAgICAgICAgICBhbGVydE9wdHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2luZm8nLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnTG9hZGluZywgcGxlYXNlIHdhaXQnLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBsZXQgcGFnZXJQYXJhbSA9IHtcbiAgICAgICAgICAgICAgICBzdGFydDogdGhpcy5wcm9wcy5ibG9nTGlzdC5zdGFydCxcbiAgICAgICAgICAgICAgICBwZXJwYWdlOiB0aGlzLnByb3BzLmJsb2dMaXN0LnBlcnBhZ2UsXG4gICAgICAgICAgICAgICAgY291bnQ6IHRoaXMucHJvcHMuYmxvZ0xpc3QuY291bnQsXG4gICAgICAgICAgICAgICAgaXRlbXM6IHRoaXMuZ2V0QmxvZ0l0ZW1zKCksXG4gICAgICAgICAgICAgICAgY2hhbmdlUGFnZTogOjp0aGlzLmNoYW5nZVBhZ2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnQuQWxlcnRNZXNzYWdlLCB7IG9wdHM6IGFsZXJ0T3B0cyB9KSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tcG9uZW50LlBhZ2luYXRvckxheW91dCwgeyBwYXJhbTogcGFnZXJQYXJhbSB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBVc2VyTGlzdENvbXA7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG52YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSk7XG59O1xuVXNlckxpc3RDb21wID0gKDAsIF9yZWFjdFJlZHV4LmNvbm5lY3QpKG1hcFN0YXRlVG9Qcm9wcykoVXNlckxpc3RDb21wKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVXNlckxpc3RDb21wO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzIxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBpbml0U3RhdGUgPSB7XG4gICAgdXNlcklkOiB3aW5kb3cubG9jYWxQYXJhbXMudXNlcklkID8gcGFyc2VJbnQod2luZG93LmxvY2FsUGFyYW1zLnVzZXJJZCkgOiBudWxsLFxuICAgIHN0YXJ0OiB3aW5kb3cubG9jYWxQYXJhbXMuc3RhcnQgPyBwYXJzZUludCh3aW5kb3cubG9jYWxQYXJhbXMuc3RhcnQpIDogMCxcbiAgICBwZXJwYWdlOiB3aW5kb3cubG9jYWxQYXJhbXMucGVycGFnZSA/IHBhcnNlSW50KHdpbmRvdy5sb2NhbFBhcmFtcy5wZXJwYWdlKSA6IDksXG4gICAgdXNlcnM6IFtdLFxuICAgIGNvdW50OiAwLFxuICAgIHN0YXR1czogbnVsbCxcbiAgICBlcnJvcjogbnVsbFxufTtcbnZhciB1c2VyTGlzdCA9IGZ1bmN0aW9uIHVzZXJMaXN0KCkge1xuICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogaW5pdFN0YXRlO1xuICAgIHZhciBhY3Rpb24gPSBhcmd1bWVudHNbMV07XG5cbiAgICB2YXIgZGF0YSA9IF9leHRlbmRzKHt9LCBzdGF0ZSk7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdVU0VSX0xJU1RfU0VORCc6XG4gICAgICAgICAgICBkYXRhLnN0YXJ0ID0gYWN0aW9uLnN0YXJ0O1xuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnc2VuZCc7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgY2FzZSAnVVNFUl9MSVNUX1NVQ0NFU1MnOlxuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnc3VjY2Vzcyc7XG4gICAgICAgICAgICBkYXRhLnVzZXJzID0gYWN0aW9uLmRhdGEuZ2V0VXNlckxpc3QudXNlcnM7XG4gICAgICAgICAgICBkYXRhLmNvdW50ID0gYWN0aW9uLmRhdGEuZ2V0VXNlckxpc3QuY291bnQ7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgY2FzZSAnVVNFUl9MSVNUX0VSUk9SJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ2Vycm9yJztcbiAgICAgICAgICAgIGRhdGEuZXJyb3IgPSBhY3Rpb24uZXJyb3I7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB1c2VyTGlzdDtcblxuLyoqKi8gfSlcblxufSxbMzE5XSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHVzZXJMaXN0LmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJ1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCdcblxuaW1wb3J0ICdib290c3RyYXAvZGlzdC9jc3MvYm9vdHN0cmFwLmNzcyc7XG5pbXBvcnQgJy4vc3R5bGVzL2luZGV4LnNjc3MnXG5cbmltcG9ydCB7bGF5b3V0fSBmcm9tICcuL2hlbHBlcnMvY29tcG9uZW50J1xuaW1wb3J0IExpc3RDb21wIGZyb20gJy4vdXNlci9MaXN0Q29tcCdcblxuaW1wb3J0IGF1dGggZnJvbSAnLi9hdXRoL0xvZ2luUmVkJ1xuaW1wb3J0IHVzZXJMaXN0IGZyb20gJy4vdXNlci9MaXN0UmVkJ1xuXG5pbXBvcnQge2NvbmZpZ3VyZVN0b3JlfSBmcm9tICcuL2hlbHBlcnMvY29uZmlndXJlU3RvcmUnXG5cbmxldCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKHtcblx0YXV0aDogYXV0aCxcblx0dXNlckxpc3Q6IHVzZXJMaXN0LFxufSk7XG5cbmxldCBDb21wID0gbGF5b3V0KHtjb21wOiBMaXN0Q29tcCwgZm9yQXV0aDogdHJ1ZX0pO1xucmVuZGVyKFxuXHQ8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cblx0XHQ8Q29tcCAvPlxuXHQ8L1Byb3ZpZGVyPixcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKVxuKVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3N0YXRpY19zcmMvdXNlckxpc3QuanMiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGdyYXBocWwgfSBmcm9tICcuLi9oZWxwZXJzL2FjdGlvbic7XG5pbXBvcnQge2ZvckVhY2gsIGNodW5rLCBtYXB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge0FsZXJ0TWVzc2FnZSwgUGFnaW5hdG9yTGF5b3V0fSBmcm9tICcuLi9oZWxwZXJzL2NvbXBvbmVudCc7XG5cbmNsYXNzIFVzZXJMaXN0Q29tcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBzdGFydDogdGhpcy5wcm9wcy51c2VyTGlzdC5zdGFydCxcbiAgICAgICAgICAgIHVzZXJzOiB0aGlzLnByb3BzLnVzZXJMaXN0LnVzZXJzLFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50ICgpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VQYWdlKHRoaXMucHJvcHMudXNlckxpc3Quc3RhcnQpO1xuICAgIH1cblxuICAgIGNoYW5nZVBhZ2UgKHN0YXJ0ID0gMCkge1xuICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKGdyYXBocWwoe1xuICAgICAgICAgICAgdHlwZTogJ1VTRVJfTElTVCcsXG4gICAgICAgICAgICBzdGFydDogc3RhcnQsIFxuICAgICAgICAgICAgcGVycGFnZTogdGhpcy5wcm9wcy51c2VyTGlzdC5wZXJwYWdlLCBcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIGdldE9ubGluZUljb24gKG9ubGluZSkge1xuICAgICAgICBsZXQgY2xOYW1lID0gJ2dseXBoaWNvbiBnbHlwaGljb24tdXNlciAnO1xuICAgICAgICBpZiAob25saW5lKSB7XG4gICAgICAgICAgICBjbE5hbWUgKz0gJ3RleHQtc3VjY2Vzcyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbE5hbWUgKz0gJ3RleHQtd2FybmluZyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDxzcGFuIGNsYXNzTmFtZT17Y2xOYW1lfT48L3NwYW4+XG4gICAgfVxuICAgIGdldFVzZXJJdGVtcyAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgY29uc3QgaXRlbXMgPSBtYXAodGhpcy5wcm9wcy51c2VyTGlzdC51c2VycywgdXNlciA9PiB7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBpZCA9IGdyYXBoZW5lLklEKClcbiAgICAgICAgICAgIGxvZ2luID0gZ3JhcGhlbmUuU3RyaW5nKClcbiAgICAgICAgICAgIGVtYWlsID0gZ3JhcGhlbmUuU3RyaW5nKClcbiAgICAgICAgICAgIGZyaWVuZCA9IGdyYXBoZW5lLkludCgpXG4gICAgICAgICAgICBvbmxpbmUgPSBncmFwaGVuZS5Cb29sZWFuKClcbiAgICAgICAgICAgIGR0QWN0aXZlID0gZ3JhcGhlbmUuU3RyaW5nKClcbiAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLW1kLTRcIj5cbiAgICAgICAgICAgICAgICAgICAge3NlbGYuZ2V0T25saW5lSWNvbih1c2VyLm9ubGluZSl9Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgIHt1c2VyLmxvZ2lufSZuYnNwO1xuICAgICAgICAgICAgICAgICAgICB7dXNlci5kdEFjdGl2ZX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuXG5cblxuXG5cbiAgICAgICAgLypcblxuICAgICAgICBsZXQgY2h1bmtlZEl0ZW1zID0gY2h1bmsodGhpcy5wcm9wcy5ibG9nTGlzdC5ibG9ncywgMyk7XG4gICAgICAgIGxldCBibG9ncyA9IG1hcChjaHVua2VkSXRlbXMsIGJsb2dzID0+IHtcbiAgICAgICAgICAgIGxldCBwYXJ0aXRpb24gPSBtYXAoYmxvZ3MsIGJsb2cgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImNvbC1tZC00XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFuZWwgcGFuZWwtZGVmYXVsdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYW5lbC1oZWFkaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cInBhbmVsLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWYgPSB7XCIvYmxvZy9cIiArIGJsb2cuaWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2Jsb2cudGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YmxvZy50ZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbmVsLWZvb3RlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXVzZXJcIj48L3NwYW4+Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtibG9nLnVzZXJOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aW1lXCI+PC9zcGFuPiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YmxvZy5kYXRlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj4gXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+e3BhcnRpdGlvbn08L2Rpdj5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGJsb2dzO1xuXG4gICAgICAgICovXG4gICAgfVxuICAgIFxuXG4gICAgcmVuZGVyICgpIHtcbiAgICAgICAgbGV0IGFsZXJ0T3B0cyA9IG51bGw7XG4gICAgICAgIGxldCB1c2VycyA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMudXNlckxpc3Quc3RhdHVzID09ICdlcnJvcicpIHtcbiAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdkYW5nZXInLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMucHJvcHMudXNlckxpc3QuZXJyb3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnVzZXJMaXN0LnN0YXR1cyA9PT0gJ3NlbmQnKSB7XG4gICAgICAgICAgICBhbGVydE9wdHMgPSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnaW5mbycsXG4gICAgICAgICAgICAgICAgdGV4dDogJ0xvYWRpbmcsIHBsZWFzZSB3YWl0JyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwYWdlclBhcmFtID0ge1xuICAgICAgICAgICAgc3RhcnQ6IHRoaXMucHJvcHMudXNlckxpc3Quc3RhcnQsXG4gICAgICAgICAgICBwZXJwYWdlOiB0aGlzLnByb3BzLnVzZXJMaXN0LnBlcnBhZ2UsXG4gICAgICAgICAgICBjb3VudDogdGhpcy5wcm9wcy51c2VyTGlzdC5jb3VudCxcbiAgICAgICAgICAgIGl0ZW1zOiB0aGlzLmdldFVzZXJJdGVtcygpLFxuICAgICAgICAgICAgY2hhbmdlUGFnZTogOjp0aGlzLmNoYW5nZVBhZ2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgLypcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5ibG9nTGlzdC5zdGF0dXMgPT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgYWxlcnRPcHRzID0ge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2RhbmdlcicsXG4gICAgICAgICAgICAgICAgdGV4dDogdGhpcy5wcm9wcy5ibG9nTGlzdC5lcnJvclxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuYmxvZ0xpc3Quc3RhdHVzID09PSAnc2VuZCcpIHtcbiAgICAgICAgICAgIGFsZXJ0T3B0cyA9IHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdpbmZvJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiAnTG9hZGluZywgcGxlYXNlIHdhaXQnLFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBhZ2VyUGFyYW0gPSB7XG4gICAgICAgICAgICBzdGFydDogdGhpcy5wcm9wcy5ibG9nTGlzdC5zdGFydCxcbiAgICAgICAgICAgIHBlcnBhZ2U6IHRoaXMucHJvcHMuYmxvZ0xpc3QucGVycGFnZSxcbiAgICAgICAgICAgIGNvdW50OiB0aGlzLnByb3BzLmJsb2dMaXN0LmNvdW50LFxuICAgICAgICAgICAgaXRlbXM6IHRoaXMuZ2V0QmxvZ0l0ZW1zKCksXG4gICAgICAgICAgICBjaGFuZ2VQYWdlOiA6OnRoaXMuY2hhbmdlUGFnZSxcbiAgICAgICAgfTtcblxuICAgICAgICAqL1xuXG5cbiAgICAgICAgcmV0dXJuIDxkaXY+XG4gICAgICAgICAgICA8QWxlcnRNZXNzYWdlIG9wdHM9e2FsZXJ0T3B0c30gLz5cbiAgICAgICAgICAgIDxQYWdpbmF0b3JMYXlvdXQgcGFyYW09e3BhZ2VyUGFyYW19IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICB9XG59XG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcbiAgICByZXR1cm4gey4uLnN0YXRlfVxufVxuVXNlckxpc3RDb21wID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKFVzZXJMaXN0Q29tcClcblxuZXhwb3J0IGRlZmF1bHQgVXNlckxpc3RDb21wXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3RhdGljX3NyYy91c2VyL0xpc3RDb21wLmpzIiwibGV0IGluaXRTdGF0ZSA9IHtcbiAgICB1c2VySWQ6IHdpbmRvdy5sb2NhbFBhcmFtcy51c2VySWQgPyBwYXJzZUludCh3aW5kb3cubG9jYWxQYXJhbXMudXNlcklkKSA6IG51bGwsXG4gICAgc3RhcnQ6IHdpbmRvdy5sb2NhbFBhcmFtcy5zdGFydCA/IHBhcnNlSW50KHdpbmRvdy5sb2NhbFBhcmFtcy5zdGFydCkgOiAwLFxuICAgIHBlcnBhZ2U6IHdpbmRvdy5sb2NhbFBhcmFtcy5wZXJwYWdlID8gcGFyc2VJbnQod2luZG93LmxvY2FsUGFyYW1zLnBlcnBhZ2UpIDogOSxcbiAgICB1c2VyczogW10sXG4gICAgY291bnQ6IDAsXG4gICAgc3RhdHVzOiBudWxsLFxuICAgIGVycm9yOiBudWxsLFxufTtcbmNvbnN0IHVzZXJMaXN0ID0gKHN0YXRlID0gaW5pdFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBsZXQgZGF0YSA9IHsuLi5zdGF0ZX07XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdVU0VSX0xJU1RfU0VORCc6XG4gICAgICAgICAgICBkYXRhLnN0YXJ0ID0gYWN0aW9uLnN0YXJ0O1xuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnc2VuZCc7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgY2FzZSAnVVNFUl9MSVNUX1NVQ0NFU1MnOlxuICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSAnc3VjY2Vzcyc7XG4gICAgICAgICAgICBkYXRhLnVzZXJzID0gYWN0aW9uLmRhdGEuZ2V0VXNlckxpc3QudXNlcnM7XG4gICAgICAgICAgICBkYXRhLmNvdW50ID0gYWN0aW9uLmRhdGEuZ2V0VXNlckxpc3QuY291bnQ7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgY2FzZSAnVVNFUl9MSVNUX0VSUk9SJzpcbiAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gJ2Vycm9yJztcbiAgICAgICAgICAgIGRhdGEuZXJyb3IgPSBhY3Rpb24uZXJyb3I7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlckxpc3RcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zdGF0aWNfc3JjL3VzZXIvTGlzdFJlZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=