webpackJsonp([1],{319:function(e,t,r){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}var s=r(1),n=a(s),u=r(10),o=r(7);r(17),r(18);var l=r(8),c=r(320),i=a(c),p=r(19),f=a(p),d=r(321),h=a(d),m=r(20),g=(0,m.configureStore)({auth:f.default,userList:h.default}),E=(0,l.layout)({comp:i.default,forAuth:!0});(0,u.render)(n.default.createElement(o.Provider,{store:g},n.default.createElement(E,null)),document.getElementById("root"))},320:function(e,t,r){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function n(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},o=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}(),l=r(1),c=function(e){return e&&e.__esModule?e:{default:e}}(l),i=r(7),p=r(23),f=r(30),d=r(8),h=function(e){function t(e){a(this,t);var r=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.state={start:r.props.userList.start,users:r.props.userList.users},r}return n(t,e),o(t,[{key:"componentWillMount",value:function(){this.changePage(this.props.userList.start)}},{key:"changePage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.props.dispatch((0,p.graphql)({type:"USER_LIST",start:e,perpage:this.props.userList.perpage}))}},{key:"getUserItems",value:function(){var e=this,t=(0,f.map)(this.props.userList.users,function(t){function r(r){r.preventDefault(),e.props.dispatch((0,p.graphql)({type:"FRIEND_REQUEST",id:t.id}))}var a=t.online?"success":"active";return c.default.createElement("tr",{className:a},c.default.createElement("td",null,c.default.createElement("span",{className:"glyphicon glyphicon-user"})," ",c.default.createElement("span",null,t.login)),c.default.createElement("td",null,t.dtActive),c.default.createElement("td",{className:"text-right"},c.default.createElement("button",{className:"btn btn-default",onClick:r},c.default.createElement("span",{className:"glyphicon glyphicon-plus"}),"  Add to friend")," ",c.default.createElement("button",{className:"btn btn-default"},c.default.createElement("span",{className:"glyphicon glyphicon-envelope"}),"  Send message")))});return c.default.createElement("table",{className:"table table-hover"},c.default.createElement("tbody",null,t))}},{key:"render",value:function(){var e=null;"error"==this.props.userList.status?e={className:"danger",text:this.props.userList.error}:"send"===this.props.userList.status&&(e={className:"info",text:"Loading, please wait"});var t={start:this.props.userList.start,perpage:this.props.userList.perpage,count:this.props.userList.count,items:this.getUserItems(),changePage:this.changePage.bind(this)};return c.default.createElement("div",null,c.default.createElement(d.AlertMessage,{opts:e}),c.default.createElement(d.PaginatorLayout,{param:t}))}}]),t}(c.default.Component),m=function(e){return u({},e)};h=(0,i.connect)(m)(h),t.default=h},321:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},s={userId:window.localParams.userId?parseInt(window.localParams.userId):null,start:window.localParams.start?parseInt(window.localParams.start):0,perpage:window.localParams.perpage?parseInt(window.localParams.perpage):9,users:[],count:0,status:null,error:null},n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s,t=arguments[1],r=a({},e);switch(t.type){case"USER_LIST_SEND":return r.start=t.start,r.status="send",r;case"USER_LIST_SUCCESS":return r.status="success",r.users=t.data.getUserList.users,r.count=t.data.getUserList.count,r;case"USER_LIST_ERROR":return r.status="error",r.error=t.error,r;case"FRIEND_REQUEST_SEND":return r.status="send",r;case"FRIEND_REQUEST_SUCCESS":return r.status="success",r;case"FRIEND_REQUEST_ERROR":return r.status="error",r;default:return e}};t.default=n}},[319]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,